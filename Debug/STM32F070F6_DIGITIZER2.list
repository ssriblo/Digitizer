
STM32F070F6_DIGITIZER2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003200  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  080032c0  080032c0  000132c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034b0  080034b0  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  080034b0  080034b0  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034b0  080034b0  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034b0  080034b0  000134b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034b4  080034b4  000134b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080034b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a0c  20000084  0800353c  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a90  0800353c  00020a90  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bd22  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032cd  00000000  00000000  0003bdce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000148d8  00000000  00000000  0003f09b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c20  00000000  00000000  00053978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000021d8  00000000  00000000  00054598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001278b  00000000  00000000  00056770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001aaa8  00000000  00000000  00068efb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006a232  00000000  00000000  000839a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000edbd5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ffc  00000000  00000000  000edc28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000084 	.word	0x20000084
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080032a8 	.word	0x080032a8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000088 	.word	0x20000088
 8000104:	080032a8 	.word	0x080032a8

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <circular_buf_init>:
	}
}


cbuf_handle_t circular_buf_init(uint16_t* buffer, size_t size)
{
 8000234:	b570      	push	{r4, r5, r6, lr}
 8000236:	0004      	movs	r4, r0
 8000238:	000d      	movs	r5, r1
	assert(buffer && size > 1);
 800023a:	2800      	cmp	r0, #0
 800023c:	d00c      	beq.n	8000258 <circular_buf_init+0x24>
 800023e:	2901      	cmp	r1, #1
 8000240:	d90a      	bls.n	8000258 <circular_buf_init+0x24>

	cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
 8000242:	2010      	movs	r0, #16
 8000244:	f002 f848 	bl	80022d8 <malloc>
	assert(cbuf);
 8000248:	2800      	cmp	r0, #0
 800024a:	d00b      	beq.n	8000264 <circular_buf_init+0x30>

void circular_buf_reset(cbuf_handle_t cbuf)
{
    assert(cbuf);

    cbuf->head = 0;
 800024c:	2300      	movs	r3, #0
	cbuf->max = size;
 800024e:	60c5      	str	r5, [r0, #12]
	cbuf->buffer = buffer;
 8000250:	6004      	str	r4, [r0, #0]
    cbuf->head = 0;
 8000252:	6043      	str	r3, [r0, #4]
    cbuf->tail = 0;
 8000254:	6083      	str	r3, [r0, #8]
}
 8000256:	bd70      	pop	{r4, r5, r6, pc}
	assert(buffer && size > 1);
 8000258:	2132      	movs	r1, #50	; 0x32
 800025a:	4b05      	ldr	r3, [pc, #20]	; (8000270 <circular_buf_init+0x3c>)
 800025c:	4a05      	ldr	r2, [pc, #20]	; (8000274 <circular_buf_init+0x40>)
 800025e:	4806      	ldr	r0, [pc, #24]	; (8000278 <circular_buf_init+0x44>)
 8000260:	f001 ffe2 	bl	8002228 <__assert_func>
	assert(cbuf);
 8000264:	2135      	movs	r1, #53	; 0x35
 8000266:	4b05      	ldr	r3, [pc, #20]	; (800027c <circular_buf_init+0x48>)
 8000268:	4a02      	ldr	r2, [pc, #8]	; (8000274 <circular_buf_init+0x40>)
 800026a:	4803      	ldr	r0, [pc, #12]	; (8000278 <circular_buf_init+0x44>)
 800026c:	f001 ffdc 	bl	8002228 <__assert_func>
 8000270:	080032fc 	.word	0x080032fc
 8000274:	08003348 	.word	0x08003348
 8000278:	080032c8 	.word	0x080032c8
 800027c:	080032c0 	.word	0x080032c0

08000280 <circular_buf_size>:
}

size_t circular_buf_size(cbuf_handle_t cbuf)
{
 8000280:	0003      	movs	r3, r0
 8000282:	b570      	push	{r4, r5, r6, lr}
	assert(cbuf);
 8000284:	2800      	cmp	r0, #0
 8000286:	d011      	beq.n	80002ac <circular_buf_size+0x2c>
}

bool circular_buf_full(circular_buf_t* cbuf)
{
	// We need to handle the wraparound case
	size_t head = cbuf->head + 1;
 8000288:	685c      	ldr	r4, [r3, #4]
	size_t size = cbuf->max;
 800028a:	68c0      	ldr	r0, [r0, #12]
	size_t head = cbuf->head + 1;
 800028c:	1c61      	adds	r1, r4, #1
	if(head == cbuf->max)
	{
		head = 0;
 800028e:	1a42      	subs	r2, r0, r1
 8000290:	1e55      	subs	r5, r2, #1
 8000292:	41aa      	sbcs	r2, r5
	}

	return head == cbuf->tail;
 8000294:	689b      	ldr	r3, [r3, #8]
		head = 0;
 8000296:	4252      	negs	r2, r2
 8000298:	4011      	ands	r1, r2
	if(!circular_buf_full(cbuf))
 800029a:	428b      	cmp	r3, r1
 800029c:	d002      	beq.n	80002a4 <circular_buf_size+0x24>
		if(cbuf->head >= cbuf->tail)
 800029e:	429c      	cmp	r4, r3
 80002a0:	d301      	bcc.n	80002a6 <circular_buf_size+0x26>
			size = (cbuf->head - cbuf->tail);
 80002a2:	1ae0      	subs	r0, r4, r3
}
 80002a4:	bd70      	pop	{r4, r5, r6, pc}
			size = (cbuf->max + cbuf->head - cbuf->tail);
 80002a6:	1900      	adds	r0, r0, r4
 80002a8:	1ac0      	subs	r0, r0, r3
	return size;
 80002aa:	e7fb      	b.n	80002a4 <circular_buf_size+0x24>
	assert(cbuf);
 80002ac:	2150      	movs	r1, #80	; 0x50
 80002ae:	4b02      	ldr	r3, [pc, #8]	; (80002b8 <circular_buf_size+0x38>)
 80002b0:	4a02      	ldr	r2, [pc, #8]	; (80002bc <circular_buf_size+0x3c>)
 80002b2:	4803      	ldr	r0, [pc, #12]	; (80002c0 <circular_buf_size+0x40>)
 80002b4:	f001 ffb8 	bl	8002228 <__assert_func>
 80002b8:	080032c0 	.word	0x080032c0
 80002bc:	0800335c 	.word	0x0800335c
 80002c0:	080032c8 	.word	0x080032c8

080002c4 <circular_buf_put>:
{
 80002c4:	b510      	push	{r4, lr}
	assert(cbuf && cbuf->buffer);
 80002c6:	2800      	cmp	r0, #0
 80002c8:	d022      	beq.n	8000310 <circular_buf_put+0x4c>
 80002ca:	6802      	ldr	r2, [r0, #0]
 80002cc:	2a00      	cmp	r2, #0
 80002ce:	d01f      	beq.n	8000310 <circular_buf_put+0x4c>
    cbuf->buffer[cbuf->head] = data;
 80002d0:	6843      	ldr	r3, [r0, #4]
 80002d2:	005c      	lsls	r4, r3, #1
 80002d4:	52a1      	strh	r1, [r4, r2]
	if(head == cbuf->max)
 80002d6:	68c2      	ldr	r2, [r0, #12]
	size_t head = cbuf->head + 1;
 80002d8:	3301      	adds	r3, #1
	if(head == cbuf->max)
 80002da:	4293      	cmp	r3, r2
 80002dc:	d00b      	beq.n	80002f6 <circular_buf_put+0x32>
	if(circular_buf_full(cbuf))
 80002de:	6881      	ldr	r1, [r0, #8]
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d001      	beq.n	80002e8 <circular_buf_put+0x24>
    if(++(cbuf->head) == cbuf->max)
 80002e4:	6043      	str	r3, [r0, #4]
}
 80002e6:	bd10      	pop	{r4, pc}
    	if(++(cbuf->tail) == cbuf->max)
 80002e8:	1c59      	adds	r1, r3, #1
 80002ea:	6081      	str	r1, [r0, #8]
 80002ec:	428a      	cmp	r2, r1
 80002ee:	d1f9      	bne.n	80002e4 <circular_buf_put+0x20>
    		cbuf->tail = 0;
 80002f0:	2200      	movs	r2, #0
 80002f2:	6082      	str	r2, [r0, #8]
 80002f4:	e7f6      	b.n	80002e4 <circular_buf_put+0x20>
	if(circular_buf_full(cbuf))
 80002f6:	6882      	ldr	r2, [r0, #8]
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	d002      	beq.n	8000302 <circular_buf_put+0x3e>
		cbuf->head = 0;
 80002fc:	2300      	movs	r3, #0
 80002fe:	6043      	str	r3, [r0, #4]
}
 8000300:	e7f1      	b.n	80002e6 <circular_buf_put+0x22>
    	if(++(cbuf->tail) == cbuf->max)
 8000302:	2101      	movs	r1, #1
 8000304:	6081      	str	r1, [r0, #8]
 8000306:	2b01      	cmp	r3, #1
 8000308:	d1f8      	bne.n	80002fc <circular_buf_put+0x38>
    		cbuf->tail = 0;
 800030a:	6082      	str	r2, [r0, #8]
    if(++(cbuf->head) == cbuf->max)
 800030c:	6043      	str	r3, [r0, #4]
 800030e:	e7f5      	b.n	80002fc <circular_buf_put+0x38>
	assert(cbuf && cbuf->buffer);
 8000310:	216d      	movs	r1, #109	; 0x6d
 8000312:	4b02      	ldr	r3, [pc, #8]	; (800031c <circular_buf_put+0x58>)
 8000314:	4a02      	ldr	r2, [pc, #8]	; (8000320 <circular_buf_put+0x5c>)
 8000316:	4803      	ldr	r0, [pc, #12]	; (8000324 <circular_buf_put+0x60>)
 8000318:	f001 ff86 	bl	8002228 <__assert_func>
 800031c:	08003310 	.word	0x08003310
 8000320:	08003370 	.word	0x08003370
 8000324:	080032c8 	.word	0x080032c8

08000328 <circular_buf_get>:
{
 8000328:	0003      	movs	r3, r0
 800032a:	b510      	push	{r4, lr}
    assert(cbuf && data && cbuf->buffer);
 800032c:	2800      	cmp	r0, #0
 800032e:	d016      	beq.n	800035e <circular_buf_get+0x36>
 8000330:	2900      	cmp	r1, #0
 8000332:	d014      	beq.n	800035e <circular_buf_get+0x36>
 8000334:	6800      	ldr	r0, [r0, #0]
 8000336:	2800      	cmp	r0, #0
 8000338:	d011      	beq.n	800035e <circular_buf_get+0x36>
    return cbuf->head == cbuf->tail;
 800033a:	689a      	ldr	r2, [r3, #8]
    if(!circular_buf_empty(cbuf))
 800033c:	685c      	ldr	r4, [r3, #4]
 800033e:	4294      	cmp	r4, r2
 8000340:	d00a      	beq.n	8000358 <circular_buf_get+0x30>
        *data = cbuf->buffer[cbuf->tail];
 8000342:	0054      	lsls	r4, r2, #1
 8000344:	5a20      	ldrh	r0, [r4, r0]
	if(++(cbuf->tail) == cbuf->max)
 8000346:	3201      	adds	r2, #1
        *data = cbuf->buffer[cbuf->tail];
 8000348:	8008      	strh	r0, [r1, #0]
	if(++(cbuf->tail) == cbuf->max)
 800034a:	68d9      	ldr	r1, [r3, #12]
        r = 0;
 800034c:	2000      	movs	r0, #0
	if(++(cbuf->tail) == cbuf->max)
 800034e:	609a      	str	r2, [r3, #8]
 8000350:	428a      	cmp	r2, r1
 8000352:	d100      	bne.n	8000356 <circular_buf_get+0x2e>
		cbuf->tail = 0;
 8000354:	6098      	str	r0, [r3, #8]
}
 8000356:	bd10      	pop	{r4, pc}
    int r = -1;
 8000358:	2001      	movs	r0, #1
 800035a:	4240      	negs	r0, r0
 800035c:	e7fb      	b.n	8000356 <circular_buf_get+0x2e>
    assert(cbuf && data && cbuf->buffer);
 800035e:	2186      	movs	r1, #134	; 0x86
 8000360:	4b02      	ldr	r3, [pc, #8]	; (800036c <circular_buf_get+0x44>)
 8000362:	4a03      	ldr	r2, [pc, #12]	; (8000370 <circular_buf_get+0x48>)
 8000364:	4803      	ldr	r0, [pc, #12]	; (8000374 <circular_buf_get+0x4c>)
 8000366:	f001 ff5f 	bl	8002228 <__assert_func>
 800036a:	46c0      	nop			; (mov r8, r8)
 800036c:	08003328 	.word	0x08003328
 8000370:	08003384 	.word	0x08003384
 8000374:	080032c8 	.word	0x080032c8

08000378 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000378:	b500      	push	{lr}
 800037a:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800037c:	2218      	movs	r2, #24
 800037e:	2100      	movs	r1, #0
 8000380:	a80c      	add	r0, sp, #48	; 0x30
 8000382:	f001 ffb3 	bl	80022ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000386:	2210      	movs	r2, #16
 8000388:	2100      	movs	r1, #0
 800038a:	4668      	mov	r0, sp
 800038c:	f001 ffae 	bl	80022ec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000390:	2214      	movs	r2, #20
 8000392:	2100      	movs	r1, #0
 8000394:	a805      	add	r0, sp, #20
 8000396:	f001 ffa9 	bl	80022ec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800039a:	2201      	movs	r2, #1
 800039c:	2301      	movs	r3, #1
 800039e:	920a      	str	r2, [sp, #40]	; 0x28
 80003a0:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003a2:	2380      	movs	r3, #128	; 0x80
 80003a4:	2202      	movs	r2, #2
 80003a6:	025b      	lsls	r3, r3, #9
 80003a8:	9212      	str	r2, [sp, #72]	; 0x48
 80003aa:	9313      	str	r3, [sp, #76]	; 0x4c
 80003ac:	2280      	movs	r2, #128	; 0x80
 80003ae:	2300      	movs	r3, #0
 80003b0:	0312      	lsls	r2, r2, #12
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b2:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003b4:	9214      	str	r2, [sp, #80]	; 0x50
 80003b6:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b8:	f000 fd02 	bl	8000dc0 <HAL_RCC_OscConfig>
 80003bc:	2800      	cmp	r0, #0
 80003be:	d001      	beq.n	80003c4 <SystemClock_Config+0x4c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003c0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003c2:	e7fe      	b.n	80003c2 <SystemClock_Config+0x4a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c4:	2207      	movs	r2, #7
 80003c6:	2302      	movs	r3, #2
 80003c8:	9200      	str	r2, [sp, #0]
 80003ca:	9301      	str	r3, [sp, #4]
 80003cc:	2200      	movs	r2, #0
 80003ce:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003d0:	2101      	movs	r1, #1
 80003d2:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d4:	9202      	str	r2, [sp, #8]
 80003d6:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003d8:	f000 ff58 	bl	800128c <HAL_RCC_ClockConfig>
 80003dc:	2800      	cmp	r0, #0
 80003de:	d001      	beq.n	80003e4 <SystemClock_Config+0x6c>
 80003e0:	b672      	cpsid	i
  while (1)
 80003e2:	e7fe      	b.n	80003e2 <SystemClock_Config+0x6a>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80003e4:	2301      	movs	r3, #1
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80003e6:	9007      	str	r0, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003e8:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80003ea:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003ec:	f001 f864 	bl	80014b8 <HAL_RCCEx_PeriphCLKConfig>
 80003f0:	2800      	cmp	r0, #0
 80003f2:	d001      	beq.n	80003f8 <SystemClock_Config+0x80>
 80003f4:	b672      	cpsid	i
  while (1)
 80003f6:	e7fe      	b.n	80003f6 <SystemClock_Config+0x7e>
}
 80003f8:	b017      	add	sp, #92	; 0x5c
 80003fa:	bd00      	pop	{pc}

080003fc <main>:
{
 80003fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003fe:	46ce      	mov	lr, r9
 8000400:	4647      	mov	r7, r8
 8000402:	b580      	push	{r7, lr}
 8000404:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8000406:	f000 fb23 	bl	8000a50 <HAL_Init>
  SystemClock_Config();
 800040a:	f7ff ffb5 	bl	8000378 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040e:	2214      	movs	r2, #20
 8000410:	2100      	movs	r1, #0
 8000412:	a802      	add	r0, sp, #8
 8000414:	f001 ff6a 	bl	80022ec <memset>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000418:	2080      	movs	r0, #128	; 0x80
 800041a:	4b54      	ldr	r3, [pc, #336]	; (800056c <main+0x170>)
 800041c:	03c0      	lsls	r0, r0, #15
 800041e:	6959      	ldr	r1, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000420:	2780      	movs	r7, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000422:	4301      	orrs	r1, r0
 8000424:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000426:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000428:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800042a:	0289      	lsls	r1, r1, #10
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800042c:	4002      	ands	r2, r0
  HAL_GPIO_WritePin(GPIOA, RS485_DERE__Pin|CNVST_Pin|TEST_PA4_Pin, GPIO_PIN_RESET);
 800042e:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000430:	9200      	str	r2, [sp, #0]
 8000432:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000434:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, RS485_DERE__Pin|CNVST_Pin|TEST_PA4_Pin, GPIO_PIN_RESET);
 8000436:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000438:	430a      	orrs	r2, r1
 800043a:	615a      	str	r2, [r3, #20]
 800043c:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, RS485_DERE__Pin|CNVST_Pin|TEST_PA4_Pin, GPIO_PIN_RESET);
 800043e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000440:	400b      	ands	r3, r1
 8000442:	9301      	str	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, RS485_DERE__Pin|CNVST_Pin|TEST_PA4_Pin, GPIO_PIN_RESET);
 8000444:	2119      	movs	r1, #25
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000446:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, RS485_DERE__Pin|CNVST_Pin|TEST_PA4_Pin, GPIO_PIN_RESET);
 8000448:	f000 fcb4 	bl	8000db4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = RS485_DERE__Pin|CNVST_Pin|TEST_PA4_Pin;
 800044c:	2219      	movs	r2, #25
 800044e:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000450:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = RS485_DERE__Pin|CNVST_Pin|TEST_PA4_Pin;
 8000452:	9202      	str	r2, [sp, #8]
 8000454:	9303      	str	r3, [sp, #12]
 8000456:	2200      	movs	r2, #0
 8000458:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800045a:	05c0      	lsls	r0, r0, #23
 800045c:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = RS485_DERE__Pin|CNVST_Pin|TEST_PA4_Pin;
 800045e:	9204      	str	r2, [sp, #16]
 8000460:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000462:	f000 fbb3 	bl	8000bcc <HAL_GPIO_Init>
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT; // SPI_DATASIZE_16BIT
 8000466:	22e0      	movs	r2, #224	; 0xe0
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000468:	2382      	movs	r3, #130	; 0x82
  hspi1.Instance = SPI1;
 800046a:	4841      	ldr	r0, [pc, #260]	; (8000570 <main+0x174>)
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT; // SPI_DATASIZE_16BIT
 800046c:	00d2      	lsls	r2, r2, #3
 800046e:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE; // Must be SPI_PHASE_2EDGE
 8000470:	2201      	movs	r2, #1
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000472:	005b      	lsls	r3, r3, #1
 8000474:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000476:	2300      	movs	r3, #0
  hspi1.Instance = SPI1;
 8000478:	4d3e      	ldr	r5, [pc, #248]	; (8000574 <main+0x178>)
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE; // Must be SPI_PHASE_2EDGE
 800047a:	6142      	str	r2, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800047c:	3207      	adds	r2, #7
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800047e:	00bf      	lsls	r7, r7, #2
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000480:	61c2      	str	r2, [r0, #28]
  hspi1.Init.CRCPolynomial = 7;
 8000482:	3a01      	subs	r2, #1
  hspi1.Instance = SPI1;
 8000484:	6005      	str	r5, [r0, #0]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000486:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW; // Must be SPI_POLARITY_LOW
 8000488:	6103      	str	r3, [r0, #16]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800048a:	6187      	str	r7, [r0, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800048c:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800048e:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000490:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000492:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000494:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000496:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000498:	f001 f8ae 	bl	80015f8 <HAL_SPI_Init>
 800049c:	2800      	cmp	r0, #0
 800049e:	d001      	beq.n	80004a4 <main+0xa8>
 80004a0:	b672      	cpsid	i
  while (1)
 80004a2:	e7fe      	b.n	80004a2 <main+0xa6>
  htim14.Instance = TIM14;
 80004a4:	4b34      	ldr	r3, [pc, #208]	; (8000578 <main+0x17c>)
 80004a6:	4698      	mov	r8, r3
 80004a8:	4642      	mov	r2, r8
 80004aa:	4b34      	ldr	r3, [pc, #208]	; (800057c <main+0x180>)
  htim14.Init.Prescaler = 0;
 80004ac:	6050      	str	r0, [r2, #4]
  htim14.Instance = TIM14;
 80004ae:	6013      	str	r3, [r2, #0]
  htim14.Init.Period = 48*TIM14_US;
 80004b0:	2396      	movs	r3, #150	; 0x96
 80004b2:	00db      	lsls	r3, r3, #3
 80004b4:	60d3      	str	r3, [r2, #12]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80004b6:	2380      	movs	r3, #128	; 0x80
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004b8:	6090      	str	r0, [r2, #8]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004ba:	6110      	str	r0, [r2, #16]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80004bc:	4640      	mov	r0, r8
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80004be:	6193      	str	r3, [r2, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80004c0:	f001 f93a 	bl	8001738 <HAL_TIM_Base_Init>
 80004c4:	1e03      	subs	r3, r0, #0
 80004c6:	d001      	beq.n	80004cc <main+0xd0>
 80004c8:	b672      	cpsid	i
  while (1)
 80004ca:	e7fe      	b.n	80004ca <main+0xce>
  huart1.Instance = USART1;
 80004cc:	482c      	ldr	r0, [pc, #176]	; (8000580 <main+0x184>)
 80004ce:	4a2d      	ldr	r2, [pc, #180]	; (8000584 <main+0x188>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004d0:	6083      	str	r3, [r0, #8]
  huart1.Instance = USART1;
 80004d2:	6002      	str	r2, [r0, #0]
  huart1.Init.BaudRate = BAUDRATE*8;
 80004d4:	22e1      	movs	r2, #225	; 0xe1
 80004d6:	0312      	lsls	r2, r2, #12
 80004d8:	6042      	str	r2, [r0, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004da:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004dc:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004de:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004e0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004e2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004e4:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004e6:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004e8:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004ea:	f001 fd95 	bl	8002018 <HAL_UART_Init>
 80004ee:	2800      	cmp	r0, #0
 80004f0:	d139      	bne.n	8000566 <main+0x16a>
  cbuf = circular_buf_init(buffer, RING_BUFFER_SIZE);
 80004f2:	2180      	movs	r1, #128	; 0x80
 80004f4:	4e24      	ldr	r6, [pc, #144]	; (8000588 <main+0x18c>)
 80004f6:	0049      	lsls	r1, r1, #1
 80004f8:	0030      	movs	r0, r6
 80004fa:	f7ff fe9b 	bl	8000234 <circular_buf_init>
 80004fe:	4c23      	ldr	r4, [pc, #140]	; (800058c <main+0x190>)
  memset(buffer, 0xFF, sizeof(uint16_t)*RING_BUFFER_SIZE); // for debugging
 8000500:	003a      	movs	r2, r7
 8000502:	21ff      	movs	r1, #255	; 0xff
  cbuf = circular_buf_init(buffer, RING_BUFFER_SIZE);
 8000504:	6020      	str	r0, [r4, #0]
  memset(buffer, 0xFF, sizeof(uint16_t)*RING_BUFFER_SIZE); // for debugging
 8000506:	0030      	movs	r0, r6
 8000508:	f001 fef0 	bl	80022ec <memset>
  cbuf4Test = circular_buf_init(buffer4Test, RING_BUFFER_SIZE);
 800050c:	2180      	movs	r1, #128	; 0x80
 800050e:	4b20      	ldr	r3, [pc, #128]	; (8000590 <main+0x194>)
 8000510:	0049      	lsls	r1, r1, #1
 8000512:	0018      	movs	r0, r3
 8000514:	4699      	mov	r9, r3
 8000516:	f7ff fe8d 	bl	8000234 <circular_buf_init>
 800051a:	4e1e      	ldr	r6, [pc, #120]	; (8000594 <main+0x198>)
  memset(buffer4Test, 0xFF, sizeof(uint16_t)*RING_BUFFER_SIZE); // for debugging
 800051c:	003a      	movs	r2, r7
 800051e:	21ff      	movs	r1, #255	; 0xff
  cbuf4Test = circular_buf_init(buffer4Test, RING_BUFFER_SIZE);
 8000520:	6030      	str	r0, [r6, #0]
  memset(buffer4Test, 0xFF, sizeof(uint16_t)*RING_BUFFER_SIZE); // for debugging
 8000522:	4648      	mov	r0, r9
 8000524:	f001 fee2 	bl	80022ec <memset>
  SPI1->CR1 |= 1<<SPI_CR1_SPE_Pos; //Turn On SPI
 8000528:	2340      	movs	r3, #64	; 0x40
 800052a:	682a      	ldr	r2, [r5, #0]
  HAL_TIM_Base_Start_IT(&htim14);
 800052c:	4640      	mov	r0, r8
  SPI1->CR1 |= 1<<SPI_CR1_SPE_Pos; //Turn On SPI
 800052e:	4313      	orrs	r3, r2
 8000530:	602b      	str	r3, [r5, #0]
  HAL_TIM_Base_Start_IT(&htim14);
 8000532:	f001 f96f 	bl	8001814 <HAL_TIM_Base_Start_IT>
 8000536:	4d18      	ldr	r5, [pc, #96]	; (8000598 <main+0x19c>)
  	if(0 == circular_buf_get(cbuf, &data)){
 8000538:	6820      	ldr	r0, [r4, #0]
 800053a:	a902      	add	r1, sp, #8
 800053c:	f7ff fef4 	bl	8000328 <circular_buf_get>
 8000540:	2800      	cmp	r0, #0
 8000542:	d1f9      	bne.n	8000538 <main+0x13c>
  	    circular_buf_put(cbuf4Test, data); //
 8000544:	466b      	mov	r3, sp
 8000546:	6830      	ldr	r0, [r6, #0]
 8000548:	8919      	ldrh	r1, [r3, #8]
 800054a:	f7ff febb 	bl	80002c4 <circular_buf_put>
  		temp = circular_buf_size(cbuf);
 800054e:	6820      	ldr	r0, [r4, #0]
 8000550:	f7ff fe96 	bl	8000280 <circular_buf_size>
  		if(temp > ring_buff_size){
 8000554:	682b      	ldr	r3, [r5, #0]
 8000556:	4298      	cmp	r0, r3
 8000558:	d900      	bls.n	800055c <main+0x160>
  			ring_buff_size = temp;
 800055a:	6028      	str	r0, [r5, #0]
			cobs_doing((uint16_t)data);
 800055c:	466b      	mov	r3, sp
 800055e:	8918      	ldrh	r0, [r3, #8]
 8000560:	f000 f992 	bl	8000888 <cobs_doing>
 8000564:	e7e8      	b.n	8000538 <main+0x13c>
 8000566:	b672      	cpsid	i
  while (1)
 8000568:	e7fe      	b.n	8000568 <main+0x16c>
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	40021000 	.word	0x40021000
 8000570:	200009d0 	.word	0x200009d0
 8000574:	40013000 	.word	0x40013000
 8000578:	20000a34 	.word	0x20000a34
 800057c:	40002000 	.word	0x40002000
 8000580:	20000144 	.word	0x20000144
 8000584:	40013800 	.word	0x40013800
 8000588:	200001c8 	.word	0x200001c8
 800058c:	200009cc 	.word	0x200009cc
 8000590:	200005c8 	.word	0x200005c8
 8000594:	200009c8 	.word	0x200009c8
 8000598:	200000a0 	.word	0x200000a0

0800059c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800059c:	2201      	movs	r2, #1
 800059e:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <HAL_MspInit+0x2c>)
{
 80005a0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005a2:	6999      	ldr	r1, [r3, #24]
 80005a4:	4311      	orrs	r1, r2
 80005a6:	6199      	str	r1, [r3, #24]
 80005a8:	6999      	ldr	r1, [r3, #24]
 80005aa:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ac:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ae:	9200      	str	r2, [sp, #0]
 80005b0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b2:	69da      	ldr	r2, [r3, #28]
 80005b4:	0549      	lsls	r1, r1, #21
 80005b6:	430a      	orrs	r2, r1
 80005b8:	61da      	str	r2, [r3, #28]
 80005ba:	69db      	ldr	r3, [r3, #28]
 80005bc:	400b      	ands	r3, r1
 80005be:	9301      	str	r3, [sp, #4]
 80005c0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005c2:	b002      	add	sp, #8
 80005c4:	4770      	bx	lr
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	40021000 	.word	0x40021000

080005cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80005cc:	b510      	push	{r4, lr}
 80005ce:	0004      	movs	r4, r0
 80005d0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d2:	2214      	movs	r2, #20
 80005d4:	2100      	movs	r1, #0
 80005d6:	a802      	add	r0, sp, #8
 80005d8:	f001 fe88 	bl	80022ec <memset>
  if(hspi->Instance==SPI1)
 80005dc:	4b14      	ldr	r3, [pc, #80]	; (8000630 <HAL_SPI_MspInit+0x64>)
 80005de:	6822      	ldr	r2, [r4, #0]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d001      	beq.n	80005e8 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80005e4:	b008      	add	sp, #32
 80005e6:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80005e8:	2080      	movs	r0, #128	; 0x80
 80005ea:	4b12      	ldr	r3, [pc, #72]	; (8000634 <HAL_SPI_MspInit+0x68>)
 80005ec:	0140      	lsls	r0, r0, #5
 80005ee:	6999      	ldr	r1, [r3, #24]
 80005f0:	4301      	orrs	r1, r0
 80005f2:	6199      	str	r1, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f4:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_SPI1_CLK_ENABLE();
 80005f6:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f8:	0289      	lsls	r1, r1, #10
    __HAL_RCC_SPI1_CLK_ENABLE();
 80005fa:	4002      	ands	r2, r0
 80005fc:	9200      	str	r2, [sp, #0]
 80005fe:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000600:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000602:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000604:	430a      	orrs	r2, r1
 8000606:	615a      	str	r2, [r3, #20]
 8000608:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800060a:	22e0      	movs	r2, #224	; 0xe0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800060c:	400b      	ands	r3, r1
 800060e:	9301      	str	r3, [sp, #4]
 8000610:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000612:	2302      	movs	r3, #2
 8000614:	9202      	str	r2, [sp, #8]
 8000616:	9303      	str	r3, [sp, #12]
 8000618:	2200      	movs	r2, #0
 800061a:	2303      	movs	r3, #3
 800061c:	9204      	str	r2, [sp, #16]
 800061e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000620:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000622:	a902      	add	r1, sp, #8
 8000624:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000626:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000628:	f000 fad0 	bl	8000bcc <HAL_GPIO_Init>
}
 800062c:	e7da      	b.n	80005e4 <HAL_SPI_MspInit+0x18>
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	40013000 	.word	0x40013000
 8000634:	40021000 	.word	0x40021000

08000638 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000638:	b500      	push	{lr}
  if(htim_base->Instance==TIM14)
 800063a:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <HAL_TIM_Base_MspInit+0x38>)
 800063c:	6802      	ldr	r2, [r0, #0]
{
 800063e:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM14)
 8000640:	429a      	cmp	r2, r3
 8000642:	d001      	beq.n	8000648 <HAL_TIM_Base_MspInit+0x10>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000644:	b003      	add	sp, #12
 8000646:	bd00      	pop	{pc}
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000648:	2080      	movs	r0, #128	; 0x80
 800064a:	4a0a      	ldr	r2, [pc, #40]	; (8000674 <HAL_TIM_Base_MspInit+0x3c>)
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	69d1      	ldr	r1, [r2, #28]
 8000650:	4301      	orrs	r1, r0
 8000652:	61d1      	str	r1, [r2, #28]
 8000654:	69d3      	ldr	r3, [r2, #28]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000656:	2100      	movs	r1, #0
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000658:	4003      	ands	r3, r0
 800065a:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 800065c:	2200      	movs	r2, #0
 800065e:	38ed      	subs	r0, #237	; 0xed
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000660:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000662:	f000 fa17 	bl	8000a94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000666:	2013      	movs	r0, #19
 8000668:	f000 fa46 	bl	8000af8 <HAL_NVIC_EnableIRQ>
}
 800066c:	e7ea      	b.n	8000644 <HAL_TIM_Base_MspInit+0xc>
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	40002000 	.word	0x40002000
 8000674:	40021000 	.word	0x40021000

08000678 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000678:	b510      	push	{r4, lr}
 800067a:	0004      	movs	r4, r0
 800067c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	2214      	movs	r2, #20
 8000680:	2100      	movs	r1, #0
 8000682:	a802      	add	r0, sp, #8
 8000684:	f001 fe32 	bl	80022ec <memset>
  if(huart->Instance==USART1)
 8000688:	4b18      	ldr	r3, [pc, #96]	; (80006ec <HAL_UART_MspInit+0x74>)
 800068a:	6822      	ldr	r2, [r4, #0]
 800068c:	429a      	cmp	r2, r3
 800068e:	d001      	beq.n	8000694 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000690:	b008      	add	sp, #32
 8000692:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8000694:	2080      	movs	r0, #128	; 0x80
 8000696:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <HAL_UART_MspInit+0x78>)
 8000698:	01c0      	lsls	r0, r0, #7
 800069a:	6999      	ldr	r1, [r3, #24]
 800069c:	4301      	orrs	r1, r0
 800069e:	6199      	str	r1, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a0:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 80006a2:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a4:	0289      	lsls	r1, r1, #10
    __HAL_RCC_USART1_CLK_ENABLE();
 80006a6:	4002      	ands	r2, r0
 80006a8:	9200      	str	r2, [sp, #0]
 80006aa:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ac:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ae:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b0:	430a      	orrs	r2, r1
 80006b2:	615a      	str	r2, [r3, #20]
 80006b4:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80006b6:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b8:	400b      	ands	r3, r1
 80006ba:	9301      	str	r3, [sp, #4]
 80006bc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80006be:	2302      	movs	r3, #2
 80006c0:	00d2      	lsls	r2, r2, #3
 80006c2:	9202      	str	r2, [sp, #8]
 80006c4:	9303      	str	r3, [sp, #12]
 80006c6:	2200      	movs	r2, #0
 80006c8:	2303      	movs	r3, #3
 80006ca:	9204      	str	r2, [sp, #16]
 80006cc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80006ce:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d0:	a902      	add	r1, sp, #8
 80006d2:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80006d4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d6:	f000 fa79 	bl	8000bcc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80006da:	2200      	movs	r2, #0
 80006dc:	2101      	movs	r1, #1
 80006de:	201b      	movs	r0, #27
 80006e0:	f000 f9d8 	bl	8000a94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80006e4:	201b      	movs	r0, #27
 80006e6:	f000 fa07 	bl	8000af8 <HAL_NVIC_EnableIRQ>
}
 80006ea:	e7d1      	b.n	8000690 <HAL_UART_MspInit+0x18>
 80006ec:	40013800 	.word	0x40013800
 80006f0:	40021000 	.word	0x40021000

080006f4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <NMI_Handler>
 80006f6:	46c0      	nop			; (mov r8, r8)

080006f8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <HardFault_Handler>
 80006fa:	46c0      	nop			; (mov r8, r8)

080006fc <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006fc:	4770      	bx	lr
 80006fe:	46c0      	nop			; (mov r8, r8)

08000700 <PendSV_Handler>:
 8000700:	4770      	bx	lr
 8000702:	46c0      	nop			; (mov r8, r8)

08000704 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000704:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000706:	f000 f9b3 	bl	8000a70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800070a:	bd10      	pop	{r4, pc}

0800070c <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 800070c:	b530      	push	{r4, r5, lr}
  volatile uint32_t byte_msb, byte_lsb;
//  static uint16_t word;
  static uint32_t test_data = 0; // FOR TEST ONLY!!! REMOVE IT LATER !!!

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800070e:	4826      	ldr	r0, [pc, #152]	; (80007a8 <TIM14_IRQHandler+0x9c>)
{
 8000710:	b085      	sub	sp, #20
  HAL_TIM_IRQHandler(&htim14);
 8000712:	f001 f8b1 	bl	8001878 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */
  if(true == flip_flop){
 8000716:	4b25      	ldr	r3, [pc, #148]	; (80007ac <TIM14_IRQHandler+0xa0>)
 8000718:	781a      	ldrb	r2, [r3, #0]
 800071a:	2a00      	cmp	r2, #0
 800071c:	d007      	beq.n	800072e <TIM14_IRQHandler+0x22>
    GPIOA->BSRR = CNVST_Pin; // Set High
 800071e:	2290      	movs	r2, #144	; 0x90
 8000720:	2108      	movs	r1, #8
 8000722:	05d2      	lsls	r2, r2, #23
 8000724:	6191      	str	r1, [r2, #24]
  	flip_flop = false;
 8000726:	2200      	movs	r2, #0
 8000728:	701a      	strb	r2, [r3, #0]
    circular_buf_put(cbuf, word); //
//    GPIOA->BSRR = (uint32_t)TEST_PA4_Pin <<16u; // Set LOW
  } // if(true == flip_flop)/else

  /* USER CODE END TIM14_IRQn 1 */
}
 800072a:	b005      	add	sp, #20
 800072c:	bd30      	pop	{r4, r5, pc}
  	flip_flop = true;
 800072e:	2201      	movs	r2, #1
 8000730:	701a      	strb	r2, [r3, #0]
    GPIOA->BSRR = (uint32_t)CNVST_Pin <<16u; // Set LOW
 8000732:	2390      	movs	r3, #144	; 0x90
 8000734:	2280      	movs	r2, #128	; 0x80
 8000736:	2401      	movs	r4, #1
      if ( (SPI1->SR & SPI_SR_TXE) && (txallowed == true)){
 8000738:	2002      	movs	r0, #2
        SPI1->DR = 0xFF;
 800073a:	25ff      	movs	r5, #255	; 0xff
      if( SPI1->SR & SPI_SR_RXNE )
 800073c:	2101      	movs	r1, #1
    GPIOA->BSRR = (uint32_t)CNVST_Pin <<16u; // Set LOW
 800073e:	05db      	lsls	r3, r3, #23
 8000740:	0312      	lsls	r2, r2, #12
 8000742:	619a      	str	r2, [r3, #24]
      if ( (SPI1->SR & SPI_SR_TXE) && (txallowed == true)){
 8000744:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <TIM14_IRQHandler+0xa4>)
 8000746:	689a      	ldr	r2, [r3, #8]
 8000748:	4210      	tst	r0, r2
 800074a:	d003      	beq.n	8000754 <TIM14_IRQHandler+0x48>
 800074c:	2c00      	cmp	r4, #0
 800074e:	d001      	beq.n	8000754 <TIM14_IRQHandler+0x48>
        txallowed = false;
 8000750:	2400      	movs	r4, #0
        SPI1->DR = 0xFF;
 8000752:	60dd      	str	r5, [r3, #12]
      if( SPI1->SR & SPI_SR_RXNE )
 8000754:	689a      	ldr	r2, [r3, #8]
 8000756:	4211      	tst	r1, r2
 8000758:	d0f5      	beq.n	8000746 <TIM14_IRQHandler+0x3a>
          byte_msb = (*(volatile uint8_t *)&SPI1->DR);
 800075a:	2401      	movs	r4, #1
      if ( (SPI1->SR & SPI_SR_TXE) && (txallowed == true)){
 800075c:	2002      	movs	r0, #2
        SPI1->DR = 0xFF;
 800075e:	25ff      	movs	r5, #255	; 0xff
      if( SPI1->SR & SPI_SR_RXNE )
 8000760:	2101      	movs	r1, #1
          byte_msb = (*(volatile uint8_t *)&SPI1->DR);
 8000762:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <TIM14_IRQHandler+0xa8>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	b2db      	uxtb	r3, r3
 8000768:	9302      	str	r3, [sp, #8]
      if ( (SPI1->SR & SPI_SR_TXE) && (txallowed == true)){
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <TIM14_IRQHandler+0xa4>)
 800076c:	689a      	ldr	r2, [r3, #8]
 800076e:	4210      	tst	r0, r2
 8000770:	d003      	beq.n	800077a <TIM14_IRQHandler+0x6e>
 8000772:	2c00      	cmp	r4, #0
 8000774:	d001      	beq.n	800077a <TIM14_IRQHandler+0x6e>
        txallowed = false;
 8000776:	2400      	movs	r4, #0
        SPI1->DR = 0xFF;
 8000778:	60dd      	str	r5, [r3, #12]
      if( SPI1->SR & SPI_SR_RXNE )
 800077a:	689a      	ldr	r2, [r3, #8]
 800077c:	4211      	tst	r1, r2
 800077e:	d0f5      	beq.n	800076c <TIM14_IRQHandler+0x60>
          byte_lsb = (*(volatile uint8_t *)&SPI1->DR);
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <TIM14_IRQHandler+0xa8>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	b2db      	uxtb	r3, r3
 8000786:	9303      	str	r3, [sp, #12]
    word = (byte_lsb & 0xFF) + ((byte_msb & 0xFF)<< 8 );
 8000788:	23ff      	movs	r3, #255	; 0xff
 800078a:	9903      	ldr	r1, [sp, #12]
 800078c:	9a02      	ldr	r2, [sp, #8]
 800078e:	400b      	ands	r3, r1
 8000790:	0212      	lsls	r2, r2, #8
 8000792:	189b      	adds	r3, r3, r2
 8000794:	466a      	mov	r2, sp
 8000796:	b29b      	uxth	r3, r3
 8000798:	80d3      	strh	r3, [r2, #6]
    circular_buf_put(cbuf, word); //
 800079a:	88d1      	ldrh	r1, [r2, #6]
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <TIM14_IRQHandler+0xac>)
 800079e:	b289      	uxth	r1, r1
 80007a0:	6818      	ldr	r0, [r3, #0]
 80007a2:	f7ff fd8f 	bl	80002c4 <circular_buf_put>
}
 80007a6:	e7c0      	b.n	800072a <TIM14_IRQHandler+0x1e>
 80007a8:	20000a34 	.word	0x20000a34
 80007ac:	200000a4 	.word	0x200000a4
 80007b0:	40013000 	.word	0x40013000
 80007b4:	4001300c 	.word	0x4001300c
 80007b8:	200009cc 	.word	0x200009cc

080007bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80007bc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80007be:	4802      	ldr	r0, [pc, #8]	; (80007c8 <USART1_IRQHandler+0xc>)
 80007c0:	f001 f9c0 	bl	8001b44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80007c4:	bd10      	pop	{r4, pc}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	20000144 	.word	0x20000144

080007cc <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80007cc:	2001      	movs	r0, #1
 80007ce:	4770      	bx	lr

080007d0 <_kill>:

int _kill(int pid, int sig)
{
 80007d0:	b510      	push	{r4, lr}
	errno = EINVAL;
 80007d2:	f001 fd47 	bl	8002264 <__errno>
 80007d6:	2316      	movs	r3, #22
 80007d8:	6003      	str	r3, [r0, #0]
	return -1;
 80007da:	2001      	movs	r0, #1
}
 80007dc:	4240      	negs	r0, r0
 80007de:	bd10      	pop	{r4, pc}

080007e0 <_exit>:

void _exit (int status)
{
 80007e0:	b510      	push	{r4, lr}
	errno = EINVAL;
 80007e2:	f001 fd3f 	bl	8002264 <__errno>
 80007e6:	2316      	movs	r3, #22
 80007e8:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80007ea:	e7fe      	b.n	80007ea <_exit+0xa>

080007ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	1e16      	subs	r6, r2, #0
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007f0:	dd07      	ble.n	8000802 <_read+0x16>
 80007f2:	000c      	movs	r4, r1
 80007f4:	188d      	adds	r5, r1, r2
	{
		*ptr++ = __io_getchar();
 80007f6:	e000      	b.n	80007fa <_read+0xe>
 80007f8:	bf00      	nop
 80007fa:	7020      	strb	r0, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007fc:	3401      	adds	r4, #1
 80007fe:	42ac      	cmp	r4, r5
 8000800:	d1f9      	bne.n	80007f6 <_read+0xa>
	}

return len;
}
 8000802:	0030      	movs	r0, r6
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	46c0      	nop			; (mov r8, r8)

08000808 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000808:	b570      	push	{r4, r5, r6, lr}
 800080a:	1e16      	subs	r6, r2, #0
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800080c:	dd07      	ble.n	800081e <_write+0x16>
 800080e:	000c      	movs	r4, r1
 8000810:	188d      	adds	r5, r1, r2
	{
		__io_putchar(*ptr++);
 8000812:	7820      	ldrb	r0, [r4, #0]
 8000814:	3401      	adds	r4, #1
 8000816:	e000      	b.n	800081a <_write+0x12>
 8000818:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800081a:	42ac      	cmp	r4, r5
 800081c:	d1f9      	bne.n	8000812 <_write+0xa>
	}
	return len;
}
 800081e:	0030      	movs	r0, r6
 8000820:	bd70      	pop	{r4, r5, r6, pc}
 8000822:	46c0      	nop			; (mov r8, r8)

08000824 <_close>:

int _close(int file)
{
	return -1;
 8000824:	2001      	movs	r0, #1
}
 8000826:	4240      	negs	r0, r0
 8000828:	4770      	bx	lr
 800082a:	46c0      	nop			; (mov r8, r8)

0800082c <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800082c:	2380      	movs	r3, #128	; 0x80
 800082e:	019b      	lsls	r3, r3, #6
	return 0;
}
 8000830:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8000832:	604b      	str	r3, [r1, #4]
}
 8000834:	4770      	bx	lr
 8000836:	46c0      	nop			; (mov r8, r8)

08000838 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000838:	2001      	movs	r0, #1
 800083a:	4770      	bx	lr

0800083c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800083c:	2000      	movs	r0, #0
 800083e:	4770      	bx	lr

08000840 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000840:	490c      	ldr	r1, [pc, #48]	; (8000874 <_sbrk+0x34>)
 8000842:	4a0d      	ldr	r2, [pc, #52]	; (8000878 <_sbrk+0x38>)
{
 8000844:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000846:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000848:	490c      	ldr	r1, [pc, #48]	; (800087c <_sbrk+0x3c>)
{
 800084a:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 800084c:	6808      	ldr	r0, [r1, #0]
 800084e:	2800      	cmp	r0, #0
 8000850:	d004      	beq.n	800085c <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000852:	18c3      	adds	r3, r0, r3
 8000854:	4293      	cmp	r3, r2
 8000856:	d806      	bhi.n	8000866 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000858:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 800085a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800085c:	4808      	ldr	r0, [pc, #32]	; (8000880 <_sbrk+0x40>)
  if (__sbrk_heap_end + incr > max_heap)
 800085e:	18c3      	adds	r3, r0, r3
    __sbrk_heap_end = &_end;
 8000860:	6008      	str	r0, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8000862:	4293      	cmp	r3, r2
 8000864:	d9f8      	bls.n	8000858 <_sbrk+0x18>
    errno = ENOMEM;
 8000866:	f001 fcfd 	bl	8002264 <__errno>
 800086a:	230c      	movs	r3, #12
 800086c:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800086e:	2001      	movs	r0, #1
 8000870:	4240      	negs	r0, r0
 8000872:	e7f2      	b.n	800085a <_sbrk+0x1a>
 8000874:	00000400 	.word	0x00000400
 8000878:	20001800 	.word	0x20001800
 800087c:	200000a8 	.word	0x200000a8
 8000880:	20000a90 	.word	0x20000a90

08000884 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000884:	4770      	bx	lr
 8000886:	46c0      	nop			; (mov r8, r8)

08000888 <cobs_doing>:
extern UART_HandleTypeDef huart1;

/*****************************************************************************/
void cobs_doing(uint16_t avrg_data){
//	static uint32_t i = 0;
	cobs_encode(avrg_data & 0xFF);
 8000888:	b2c2      	uxtb	r2, r0
void cobs_doing(uint16_t avrg_data){
 800088a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	code = 0x01;
}

void cobs_encode(uint8_t byte){
	/* dst, code and code_ptr must be sets to start at code above  */
		if (byte == 0){
 800088c:	2a00      	cmp	r2, #0
 800088e:	d11e      	bne.n	80008ce <cobs_doing+0x46>
			*code_ptr = (code);
 8000890:	4930      	ldr	r1, [pc, #192]	; (8000954 <cobs_doing+0xcc>)
 8000892:	4a31      	ldr	r2, [pc, #196]	; (8000958 <cobs_doing+0xd0>)
 8000894:	680c      	ldr	r4, [r1, #0]
 8000896:	7813      	ldrb	r3, [r2, #0]
	cobs_encode((avrg_data >> 8) & 0xFF);
 8000898:	0a00      	lsrs	r0, r0, #8
			*code_ptr = (code);
 800089a:	7023      	strb	r3, [r4, #0]
 			code_ptr = dst++;
 800089c:	4b2f      	ldr	r3, [pc, #188]	; (800095c <cobs_doing+0xd4>)
 800089e:	681c      	ldr	r4, [r3, #0]
 80008a0:	600c      	str	r4, [r1, #0]
 			code = 0x01;
 80008a2:	2101      	movs	r1, #1
 			code_ptr = dst++;
 80008a4:	1c65      	adds	r5, r4, #1
 80008a6:	601d      	str	r5, [r3, #0]
 			code = 0x01;
 80008a8:	7011      	strb	r1, [r2, #0]
		if (byte == 0){
 80008aa:	2800      	cmp	r0, #0
 80008ac:	d11c      	bne.n	80008e8 <cobs_doing+0x60>
			*code_ptr = (code);
 80008ae:	4829      	ldr	r0, [pc, #164]	; (8000954 <cobs_doing+0xcc>)
 80008b0:	6804      	ldr	r4, [r0, #0]
 80008b2:	7021      	strb	r1, [r4, #0]
 			code_ptr = dst++;
 80008b4:	6819      	ldr	r1, [r3, #0]
 80008b6:	1c4c      	adds	r4, r1, #1
 80008b8:	6001      	str	r1, [r0, #0]
 			code = 0x01;
 80008ba:	2101      	movs	r1, #1
	cobs_counter = cobs_counter + 2; // Every COBS buff contains COBS_BUFF_SIZE/2 WORDS
 80008bc:	4828      	ldr	r0, [pc, #160]	; (8000960 <cobs_doing+0xd8>)
 			code_ptr = dst++;
 80008be:	601c      	str	r4, [r3, #0]
	cobs_counter = cobs_counter + 2; // Every COBS buff contains COBS_BUFF_SIZE/2 WORDS
 80008c0:	6804      	ldr	r4, [r0, #0]
 			code = 0x01;
 80008c2:	7011      	strb	r1, [r2, #0]
	cobs_counter = cobs_counter + 2; // Every COBS buff contains COBS_BUFF_SIZE/2 WORDS
 80008c4:	1ca5      	adds	r5, r4, #2
	if(COBS_BUFF_SIZE == cobs_counter){
 80008c6:	2c3e      	cmp	r4, #62	; 0x3e
 80008c8:	d01b      	beq.n	8000902 <cobs_doing+0x7a>
	cobs_counter = cobs_counter + 2; // Every COBS buff contains COBS_BUFF_SIZE/2 WORDS
 80008ca:	6005      	str	r5, [r0, #0]
}
 80008cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else{
			*dst++ = byte;
 80008ce:	4b23      	ldr	r3, [pc, #140]	; (800095c <cobs_doing+0xd4>)
	cobs_encode((avrg_data >> 8) & 0xFF);
 80008d0:	0a00      	lsrs	r0, r0, #8
			*dst++ = byte;
 80008d2:	6819      	ldr	r1, [r3, #0]
 80008d4:	1c4c      	adds	r4, r1, #1
 80008d6:	601c      	str	r4, [r3, #0]
 80008d8:	700a      	strb	r2, [r1, #0]
			code++;
 80008da:	4a1f      	ldr	r2, [pc, #124]	; (8000958 <cobs_doing+0xd0>)
 80008dc:	7811      	ldrb	r1, [r2, #0]
 80008de:	3101      	adds	r1, #1
 80008e0:	b2c9      	uxtb	r1, r1
 80008e2:	7011      	strb	r1, [r2, #0]
		if (byte == 0){
 80008e4:	2800      	cmp	r0, #0
 80008e6:	d0e2      	beq.n	80008ae <cobs_doing+0x26>
			*dst++ = byte;
 80008e8:	6819      	ldr	r1, [r3, #0]
 80008ea:	1c4c      	adds	r4, r1, #1
 80008ec:	601c      	str	r4, [r3, #0]
	cobs_encode((avrg_data >> 8) & 0xFF);
 80008ee:	7008      	strb	r0, [r1, #0]
			code++;
 80008f0:	7811      	ldrb	r1, [r2, #0]
	cobs_counter = cobs_counter + 2; // Every COBS buff contains COBS_BUFF_SIZE/2 WORDS
 80008f2:	481b      	ldr	r0, [pc, #108]	; (8000960 <cobs_doing+0xd8>)
			code++;
 80008f4:	3101      	adds	r1, #1
	cobs_counter = cobs_counter + 2; // Every COBS buff contains COBS_BUFF_SIZE/2 WORDS
 80008f6:	6804      	ldr	r4, [r0, #0]
			code++;
 80008f8:	b2c9      	uxtb	r1, r1
 80008fa:	7011      	strb	r1, [r2, #0]
	cobs_counter = cobs_counter + 2; // Every COBS buff contains COBS_BUFF_SIZE/2 WORDS
 80008fc:	1ca5      	adds	r5, r4, #2
	if(COBS_BUFF_SIZE == cobs_counter){
 80008fe:	2c3e      	cmp	r4, #62	; 0x3e
 8000900:	d1e3      	bne.n	80008ca <cobs_doing+0x42>
		cobs_counter = 0;
 8000902:	2600      	movs	r6, #0
		*code_ptr = (code);
 8000904:	4c13      	ldr	r4, [pc, #76]	; (8000954 <cobs_doing+0xcc>)
		cobs_counter = 0;
 8000906:	6006      	str	r6, [r0, #0]
		*code_ptr = (code);
 8000908:	6820      	ldr	r0, [r4, #0]
		if(0 == switch_status){
 800090a:	4d16      	ldr	r5, [pc, #88]	; (8000964 <cobs_doing+0xdc>)
		*code_ptr = (code);
 800090c:	7001      	strb	r1, [r0, #0]
		if(0 == switch_status){
 800090e:	6829      	ldr	r1, [r5, #0]
 8000910:	2900      	cmp	r1, #0
 8000912:	d016      	beq.n	8000942 <cobs_doing+0xba>
			p_cobs_buff_acquisition = cobs_buff_1;
 8000914:	4914      	ldr	r1, [pc, #80]	; (8000968 <cobs_doing+0xe0>)
 8000916:	4815      	ldr	r0, [pc, #84]	; (800096c <cobs_doing+0xe4>)
			p_cobs_buff_uart = cobs_buff_2;
 8000918:	4f15      	ldr	r7, [pc, #84]	; (8000970 <cobs_doing+0xe8>)
			p_cobs_buff_acquisition = cobs_buff_1;
 800091a:	6008      	str	r0, [r1, #0]
			p_cobs_buff_uart = cobs_buff_2;
 800091c:	4915      	ldr	r1, [pc, #84]	; (8000974 <cobs_doing+0xec>)
			switch_status = 0;
 800091e:	602e      	str	r6, [r5, #0]
			p_cobs_buff_uart = cobs_buff_2;
 8000920:	6039      	str	r1, [r7, #0]
	code_ptr = dst++;
 8000922:	6020      	str	r0, [r4, #0]
 8000924:	1c45      	adds	r5, r0, #1
  GPIOA->BSRR = RS485_DERE__Pin; // Set High
 8000926:	2490      	movs	r4, #144	; 0x90
	code_ptr = dst++;
 8000928:	601d      	str	r5, [r3, #0]
	code = 0x01;
 800092a:	2301      	movs	r3, #1
  GPIOA->BSRR = RS485_DERE__Pin; // Set High
 800092c:	05e4      	lsls	r4, r4, #23
	code = 0x01;
 800092e:	7013      	strb	r3, [r2, #0]
	HAL_UART_Transmit_IT(&huart1, p_cobs_buff_uart, COBS_BUFF_SIZE+2);
 8000930:	4811      	ldr	r0, [pc, #68]	; (8000978 <cobs_doing+0xf0>)
  GPIOA->BSRR = RS485_DERE__Pin; // Set High
 8000932:	61a3      	str	r3, [r4, #24]
	HAL_UART_Transmit_IT(&huart1, p_cobs_buff_uart, COBS_BUFF_SIZE+2);
 8000934:	2242      	movs	r2, #66	; 0x42
 8000936:	f001 f8a9 	bl	8001a8c <HAL_UART_Transmit_IT>
  GPIOA->BSRR = RS485_DERE__Pin <<16u; // Set LOW
 800093a:	2380      	movs	r3, #128	; 0x80
 800093c:	025b      	lsls	r3, r3, #9
 800093e:	61a3      	str	r3, [r4, #24]
}
 8000940:	e7c4      	b.n	80008cc <cobs_doing+0x44>
			p_cobs_buff_acquisition = cobs_buff_2;
 8000942:	4909      	ldr	r1, [pc, #36]	; (8000968 <cobs_doing+0xe0>)
 8000944:	480b      	ldr	r0, [pc, #44]	; (8000974 <cobs_doing+0xec>)
			p_cobs_buff_uart = cobs_buff_1;
 8000946:	4e0a      	ldr	r6, [pc, #40]	; (8000970 <cobs_doing+0xe8>)
			p_cobs_buff_acquisition = cobs_buff_2;
 8000948:	6008      	str	r0, [r1, #0]
			p_cobs_buff_uart = cobs_buff_1;
 800094a:	4908      	ldr	r1, [pc, #32]	; (800096c <cobs_doing+0xe4>)
 800094c:	6031      	str	r1, [r6, #0]
			switch_status = 1;
 800094e:	2601      	movs	r6, #1
 8000950:	602e      	str	r6, [r5, #0]
 8000952:	e7e6      	b.n	8000922 <cobs_doing+0x9a>
 8000954:	20000008 	.word	0x20000008
 8000958:	20000004 	.word	0x20000004
 800095c:	2000000c 	.word	0x2000000c
 8000960:	20000134 	.word	0x20000134
 8000964:	20000138 	.word	0x20000138
 8000968:	20000010 	.word	0x20000010
 800096c:	200000ac 	.word	0x200000ac
 8000970:	20000014 	.word	0x20000014
 8000974:	200000f0 	.word	0x200000f0
 8000978:	20000144 	.word	0x20000144

0800097c <HAL_UART_TxCpltCallback>:
}
 800097c:	4770      	bx	lr
 800097e:	46c0      	nop			; (mov r8, r8)

08000980 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000980:	4813      	ldr	r0, [pc, #76]	; (80009d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000982:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000984:	4813      	ldr	r0, [pc, #76]	; (80009d4 <LoopForever+0x6>)
    LDR R1, [R0]
 8000986:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000988:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800098a:	4a13      	ldr	r2, [pc, #76]	; (80009d8 <LoopForever+0xa>)
    CMP R1, R2
 800098c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800098e:	d105      	bne.n	800099c <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000990:	4812      	ldr	r0, [pc, #72]	; (80009dc <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000992:	4913      	ldr	r1, [pc, #76]	; (80009e0 <LoopForever+0x12>)
    STR R1, [R0]
 8000994:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000996:	4813      	ldr	r0, [pc, #76]	; (80009e4 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000998:	4913      	ldr	r1, [pc, #76]	; (80009e8 <LoopForever+0x1a>)
    STR R1, [R0]
 800099a:	6001      	str	r1, [r0, #0]

0800099c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800099c:	4813      	ldr	r0, [pc, #76]	; (80009ec <LoopForever+0x1e>)
  ldr r1, =_edata
 800099e:	4914      	ldr	r1, [pc, #80]	; (80009f0 <LoopForever+0x22>)
  ldr r2, =_sidata
 80009a0:	4a14      	ldr	r2, [pc, #80]	; (80009f4 <LoopForever+0x26>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a4:	e002      	b.n	80009ac <LoopCopyDataInit>

080009a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009aa:	3304      	adds	r3, #4

080009ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b0:	d3f9      	bcc.n	80009a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b2:	4a11      	ldr	r2, [pc, #68]	; (80009f8 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80009b4:	4c11      	ldr	r4, [pc, #68]	; (80009fc <LoopForever+0x2e>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b8:	e001      	b.n	80009be <LoopFillZerobss>

080009ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009bc:	3204      	adds	r2, #4

080009be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c0:	d3fb      	bcc.n	80009ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009c2:	f7ff ff5f 	bl	8000884 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80009c6:	f001 fc63 	bl	8002290 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ca:	f7ff fd17 	bl	80003fc <main>

080009ce <LoopForever>:

LoopForever:
    b LoopForever
 80009ce:	e7fe      	b.n	80009ce <LoopForever>
  ldr   r0, =_estack
 80009d0:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 80009d4:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80009d8:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 80009dc:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 80009e0:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80009e4:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80009e8:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80009ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f0:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80009f4:	080034b8 	.word	0x080034b8
  ldr r2, =_sbss
 80009f8:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80009fc:	20000a90 	.word	0x20000a90

08000a00 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a00:	e7fe      	b.n	8000a00 <ADC1_IRQHandler>
	...

08000a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a04:	b510      	push	{r4, lr}
 8000a06:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a08:	20fa      	movs	r0, #250	; 0xfa
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <HAL_InitTick+0x40>)
 8000a0c:	0080      	lsls	r0, r0, #2
 8000a0e:	7819      	ldrb	r1, [r3, #0]
 8000a10:	f7ff fb84 	bl	800011c <__udivsi3>
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <HAL_InitTick+0x44>)
 8000a16:	0001      	movs	r1, r0
 8000a18:	6818      	ldr	r0, [r3, #0]
 8000a1a:	f7ff fb7f 	bl	800011c <__udivsi3>
 8000a1e:	f000 f877 	bl	8000b10 <HAL_SYSTICK_Config>
 8000a22:	2800      	cmp	r0, #0
 8000a24:	d10c      	bne.n	8000a40 <HAL_InitTick+0x3c>
  {
    return HAL_ERROR;
 8000a26:	3001      	adds	r0, #1
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a28:	2c03      	cmp	r4, #3
 8000a2a:	d900      	bls.n	8000a2e <HAL_InitTick+0x2a>
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8000a2c:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a2e:	3802      	subs	r0, #2
 8000a30:	2200      	movs	r2, #0
 8000a32:	0021      	movs	r1, r4
 8000a34:	f000 f82e 	bl	8000a94 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a38:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <HAL_InitTick+0x48>)
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8000a3e:	e7f5      	b.n	8000a2c <HAL_InitTick+0x28>
    return HAL_ERROR;
 8000a40:	2001      	movs	r0, #1
 8000a42:	e7f3      	b.n	8000a2c <HAL_InitTick+0x28>
 8000a44:	20000018 	.word	0x20000018
 8000a48:	20000000 	.word	0x20000000
 8000a4c:	2000001c 	.word	0x2000001c

08000a50 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a50:	2110      	movs	r1, #16
 8000a52:	4a06      	ldr	r2, [pc, #24]	; (8000a6c <HAL_Init+0x1c>)
{
 8000a54:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a56:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a58:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a5a:	430b      	orrs	r3, r1
 8000a5c:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a5e:	f7ff ffd1 	bl	8000a04 <HAL_InitTick>
  HAL_MspInit();
 8000a62:	f7ff fd9b 	bl	800059c <HAL_MspInit>
}
 8000a66:	2000      	movs	r0, #0
 8000a68:	bd10      	pop	{r4, pc}
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	40022000 	.word	0x40022000

08000a70 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000a70:	4a03      	ldr	r2, [pc, #12]	; (8000a80 <HAL_IncTick+0x10>)
 8000a72:	4b04      	ldr	r3, [pc, #16]	; (8000a84 <HAL_IncTick+0x14>)
 8000a74:	6811      	ldr	r1, [r2, #0]
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	185b      	adds	r3, r3, r1
 8000a7a:	6013      	str	r3, [r2, #0]
}
 8000a7c:	4770      	bx	lr
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	20000a7c 	.word	0x20000a7c
 8000a84:	20000018 	.word	0x20000018

08000a88 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a88:	4b01      	ldr	r3, [pc, #4]	; (8000a90 <HAL_GetTick+0x8>)
 8000a8a:	6818      	ldr	r0, [r3, #0]
}
 8000a8c:	4770      	bx	lr
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	20000a7c 	.word	0x20000a7c

08000a94 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a94:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000a96:	2800      	cmp	r0, #0
 8000a98:	db14      	blt.n	8000ac4 <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a9a:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <HAL_NVIC_SetPriority+0x5c>)
 8000a9c:	2203      	movs	r2, #3
 8000a9e:	469c      	mov	ip, r3
 8000aa0:	23ff      	movs	r3, #255	; 0xff
 8000aa2:	0884      	lsrs	r4, r0, #2
 8000aa4:	4010      	ands	r0, r2
 8000aa6:	001a      	movs	r2, r3
 8000aa8:	26c0      	movs	r6, #192	; 0xc0
 8000aaa:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aac:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aae:	4082      	lsls	r2, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ab0:	400b      	ands	r3, r1
 8000ab2:	4083      	lsls	r3, r0
 8000ab4:	00a4      	lsls	r4, r4, #2
 8000ab6:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ab8:	00b6      	lsls	r6, r6, #2
 8000aba:	59a5      	ldr	r5, [r4, r6]
 8000abc:	4395      	bics	r5, r2
 8000abe:	432b      	orrs	r3, r5
 8000ac0:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000ac2:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ac4:	4a0b      	ldr	r2, [pc, #44]	; (8000af4 <HAL_NVIC_SetPriority+0x60>)
 8000ac6:	230f      	movs	r3, #15
 8000ac8:	4694      	mov	ip, r2
 8000aca:	2203      	movs	r2, #3
 8000acc:	4003      	ands	r3, r0
 8000ace:	4010      	ands	r0, r2
 8000ad0:	32fc      	adds	r2, #252	; 0xfc
 8000ad2:	0015      	movs	r5, r2
 8000ad4:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ad6:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ad8:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ada:	400a      	ands	r2, r1
 8000adc:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ade:	3b08      	subs	r3, #8
 8000ae0:	089b      	lsrs	r3, r3, #2
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	4463      	add	r3, ip
 8000ae6:	69dc      	ldr	r4, [r3, #28]
 8000ae8:	43ac      	bics	r4, r5
 8000aea:	4322      	orrs	r2, r4
 8000aec:	61da      	str	r2, [r3, #28]
 8000aee:	e7e8      	b.n	8000ac2 <HAL_NVIC_SetPriority+0x2e>
 8000af0:	e000e100 	.word	0xe000e100
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000af8:	2800      	cmp	r0, #0
 8000afa:	db05      	blt.n	8000b08 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000afc:	231f      	movs	r3, #31
 8000afe:	4018      	ands	r0, r3
 8000b00:	3b1e      	subs	r3, #30
 8000b02:	4083      	lsls	r3, r0
 8000b04:	4a01      	ldr	r2, [pc, #4]	; (8000b0c <HAL_NVIC_EnableIRQ+0x14>)
 8000b06:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000b08:	4770      	bx	lr
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	e000e100 	.word	0xe000e100

08000b10 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b10:	2280      	movs	r2, #128	; 0x80
 8000b12:	1e43      	subs	r3, r0, #1
 8000b14:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b16:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d20e      	bcs.n	8000b3a <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b1c:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b1e:	4a07      	ldr	r2, [pc, #28]	; (8000b3c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b20:	4807      	ldr	r0, [pc, #28]	; (8000b40 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b22:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b24:	6a03      	ldr	r3, [r0, #32]
 8000b26:	0609      	lsls	r1, r1, #24
 8000b28:	021b      	lsls	r3, r3, #8
 8000b2a:	0a1b      	lsrs	r3, r3, #8
 8000b2c:	430b      	orrs	r3, r1
 8000b2e:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b30:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b32:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b34:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b36:	3307      	adds	r3, #7
 8000b38:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b3a:	4770      	bx	lr
 8000b3c:	e000e010 	.word	0xe000e010
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <HAL_DMA_Abort>:
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b44:	2321      	movs	r3, #33	; 0x21
{
 8000b46:	b530      	push	{r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b48:	5cc2      	ldrb	r2, [r0, r3]
 8000b4a:	2a02      	cmp	r2, #2
 8000b4c:	d006      	beq.n	8000b5c <HAL_DMA_Abort+0x18>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b4e:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b50:	3b1d      	subs	r3, #29
 8000b52:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8000b54:	331c      	adds	r3, #28
 8000b56:	54c2      	strb	r2, [r0, r3]
    
    return HAL_ERROR;
 8000b58:	2001      	movs	r0, #1
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
  
  return HAL_OK;
}
 8000b5a:	bd30      	pop	{r4, r5, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b5c:	240e      	movs	r4, #14
 8000b5e:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000b60:	6c05      	ldr	r5, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b62:	6811      	ldr	r1, [r2, #0]
 8000b64:	43a1      	bics	r1, r4
 8000b66:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b68:	2101      	movs	r1, #1
 8000b6a:	6814      	ldr	r4, [r2, #0]
 8000b6c:	438c      	bics	r4, r1
 8000b6e:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000b70:	000c      	movs	r4, r1
 8000b72:	40ac      	lsls	r4, r5
 8000b74:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000b76:	6054      	str	r4, [r2, #4]
  hdma->State = HAL_DMA_STATE_READY; 
 8000b78:	54c1      	strb	r1, [r0, r3]
  __HAL_UNLOCK(hdma);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2320      	movs	r3, #32
 8000b7e:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8000b80:	2000      	movs	r0, #0
 8000b82:	e7ea      	b.n	8000b5a <HAL_DMA_Abort+0x16>

08000b84 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b84:	2321      	movs	r3, #33	; 0x21
{  
 8000b86:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b88:	5cc2      	ldrb	r2, [r0, r3]
 8000b8a:	2a02      	cmp	r2, #2
 8000b8c:	d003      	beq.n	8000b96 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b8e:	3b1d      	subs	r3, #29
 8000b90:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b92:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8000b94:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b96:	240e      	movs	r4, #14
 8000b98:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000b9a:	6c05      	ldr	r5, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b9c:	6811      	ldr	r1, [r2, #0]
 8000b9e:	43a1      	bics	r1, r4
 8000ba0:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	6814      	ldr	r4, [r2, #0]
 8000ba6:	438c      	bics	r4, r1
 8000ba8:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000baa:	000c      	movs	r4, r1
 8000bac:	40ac      	lsls	r4, r5
 8000bae:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000bb0:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000bb2:	54c1      	strb	r1, [r0, r3]
    __HAL_UNLOCK(hdma);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2320      	movs	r3, #32
 8000bb8:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferAbortCallback != NULL)
 8000bba:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d002      	beq.n	8000bc6 <HAL_DMA_Abort_IT+0x42>
      hdma->XferAbortCallback(hdma);
 8000bc0:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	e7e6      	b.n	8000b94 <HAL_DMA_Abort_IT+0x10>
 8000bc6:	2000      	movs	r0, #0
 8000bc8:	e7e4      	b.n	8000b94 <HAL_DMA_Abort_IT+0x10>
 8000bca:	46c0      	nop			; (mov r8, r8)

08000bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bce:	464e      	mov	r6, r9
 8000bd0:	46de      	mov	lr, fp
 8000bd2:	4657      	mov	r7, sl
 8000bd4:	4645      	mov	r5, r8
 8000bd6:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bd8:	680a      	ldr	r2, [r1, #0]
{
 8000bda:	4689      	mov	r9, r1
  uint32_t position = 0x00u;
 8000bdc:	2300      	movs	r3, #0
{
 8000bde:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000be0:	2a00      	cmp	r2, #0
 8000be2:	d075      	beq.n	8000cd0 <HAL_GPIO_Init+0x104>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000be4:	2101      	movs	r1, #1
 8000be6:	4688      	mov	r8, r1
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be8:	496c      	ldr	r1, [pc, #432]	; (8000d9c <HAL_GPIO_Init+0x1d0>)
 8000bea:	468b      	mov	fp, r1
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bec:	4644      	mov	r4, r8
 8000bee:	0015      	movs	r5, r2
 8000bf0:	409c      	lsls	r4, r3
 8000bf2:	4025      	ands	r5, r4
 8000bf4:	9501      	str	r5, [sp, #4]
    if (iocurrent != 0x00u)
 8000bf6:	4222      	tst	r2, r4
 8000bf8:	d066      	beq.n	8000cc8 <HAL_GPIO_Init+0xfc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bfa:	464d      	mov	r5, r9
 8000bfc:	2603      	movs	r6, #3
 8000bfe:	686d      	ldr	r5, [r5, #4]
 8000c00:	402e      	ands	r6, r5
 8000c02:	46aa      	mov	sl, r5
 8000c04:	1e75      	subs	r5, r6, #1
 8000c06:	2d01      	cmp	r5, #1
 8000c08:	d969      	bls.n	8000cde <HAL_GPIO_Init+0x112>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c0a:	005f      	lsls	r7, r3, #1
 8000c0c:	2e03      	cmp	r6, #3
 8000c0e:	d000      	beq.n	8000c12 <HAL_GPIO_Init+0x46>
 8000c10:	e0a5      	b.n	8000d5e <HAL_GPIO_Init+0x192>
 8000c12:	0034      	movs	r4, r6
 8000c14:	40bc      	lsls	r4, r7
 8000c16:	43e1      	mvns	r1, r4
 8000c18:	9102      	str	r1, [sp, #8]
      temp = GPIOx->MODER;
 8000c1a:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c1c:	9d02      	ldr	r5, [sp, #8]
 8000c1e:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c20:	4325      	orrs	r5, r4
      GPIOx->MODER = temp;
 8000c22:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c24:	25c0      	movs	r5, #192	; 0xc0
 8000c26:	4654      	mov	r4, sl
 8000c28:	02ad      	lsls	r5, r5, #10
 8000c2a:	422c      	tst	r4, r5
 8000c2c:	d04c      	beq.n	8000cc8 <HAL_GPIO_Init+0xfc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2e:	4659      	mov	r1, fp
 8000c30:	698c      	ldr	r4, [r1, #24]
 8000c32:	4641      	mov	r1, r8
 8000c34:	430c      	orrs	r4, r1
 8000c36:	4659      	mov	r1, fp
 8000c38:	618c      	str	r4, [r1, #24]
 8000c3a:	698c      	ldr	r4, [r1, #24]
 8000c3c:	4641      	mov	r1, r8

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c3e:	2603      	movs	r6, #3
 8000c40:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c42:	400c      	ands	r4, r1
 8000c44:	4956      	ldr	r1, [pc, #344]	; (8000da0 <HAL_GPIO_Init+0x1d4>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c46:	401e      	ands	r6, r3
 8000c48:	468c      	mov	ip, r1
 8000c4a:	00b6      	lsls	r6, r6, #2
 8000c4c:	40b7      	lsls	r7, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c4e:	2190      	movs	r1, #144	; 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c50:	9405      	str	r4, [sp, #20]
 8000c52:	9c05      	ldr	r4, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000c54:	089c      	lsrs	r4, r3, #2
 8000c56:	00a4      	lsls	r4, r4, #2
 8000c58:	4464      	add	r4, ip
 8000c5a:	68a5      	ldr	r5, [r4, #8]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c5c:	05c9      	lsls	r1, r1, #23
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c5e:	43bd      	bics	r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c60:	4288      	cmp	r0, r1
 8000c62:	d00e      	beq.n	8000c82 <HAL_GPIO_Init+0xb6>
 8000c64:	4f4f      	ldr	r7, [pc, #316]	; (8000da4 <HAL_GPIO_Init+0x1d8>)
 8000c66:	42b8      	cmp	r0, r7
 8000c68:	d100      	bne.n	8000c6c <HAL_GPIO_Init+0xa0>
 8000c6a:	e08e      	b.n	8000d8a <HAL_GPIO_Init+0x1be>
 8000c6c:	4f4e      	ldr	r7, [pc, #312]	; (8000da8 <HAL_GPIO_Init+0x1dc>)
 8000c6e:	42b8      	cmp	r0, r7
 8000c70:	d100      	bne.n	8000c74 <HAL_GPIO_Init+0xa8>
 8000c72:	e08e      	b.n	8000d92 <HAL_GPIO_Init+0x1c6>
 8000c74:	4f4d      	ldr	r7, [pc, #308]	; (8000dac <HAL_GPIO_Init+0x1e0>)
 8000c76:	42b8      	cmp	r0, r7
 8000c78:	d100      	bne.n	8000c7c <HAL_GPIO_Init+0xb0>
 8000c7a:	e082      	b.n	8000d82 <HAL_GPIO_Init+0x1b6>
 8000c7c:	2705      	movs	r7, #5
 8000c7e:	40b7      	lsls	r7, r6
 8000c80:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c82:	494b      	ldr	r1, [pc, #300]	; (8000db0 <HAL_GPIO_Init+0x1e4>)
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c84:	60a5      	str	r5, [r4, #8]
        temp = EXTI->IMR;
 8000c86:	680c      	ldr	r4, [r1, #0]
        temp &= ~(iocurrent);
 8000c88:	9901      	ldr	r1, [sp, #4]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c8a:	2580      	movs	r5, #128	; 0x80
        temp &= ~(iocurrent);
 8000c8c:	43ce      	mvns	r6, r1
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c8e:	4651      	mov	r1, sl
 8000c90:	026d      	lsls	r5, r5, #9
 8000c92:	4229      	tst	r1, r5
 8000c94:	d000      	beq.n	8000c98 <HAL_GPIO_Init+0xcc>
 8000c96:	e071      	b.n	8000d7c <HAL_GPIO_Init+0x1b0>
        temp &= ~(iocurrent);
 8000c98:	4034      	ands	r4, r6
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8000c9a:	4945      	ldr	r1, [pc, #276]	; (8000db0 <HAL_GPIO_Init+0x1e4>)
 8000c9c:	600c      	str	r4, [r1, #0]

        temp = EXTI->EMR;
 8000c9e:	684c      	ldr	r4, [r1, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ca0:	4651      	mov	r1, sl
 8000ca2:	0389      	lsls	r1, r1, #14
 8000ca4:	d467      	bmi.n	8000d76 <HAL_GPIO_Init+0x1aa>
        temp &= ~(iocurrent);
 8000ca6:	4034      	ands	r4, r6
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8000ca8:	4941      	ldr	r1, [pc, #260]	; (8000db0 <HAL_GPIO_Init+0x1e4>)
 8000caa:	604c      	str	r4, [r1, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cac:	688d      	ldr	r5, [r1, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cae:	4651      	mov	r1, sl
 8000cb0:	02c9      	lsls	r1, r1, #11
 8000cb2:	d45d      	bmi.n	8000d70 <HAL_GPIO_Init+0x1a4>
        temp &= ~(iocurrent);
 8000cb4:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8000cb6:	493e      	ldr	r1, [pc, #248]	; (8000db0 <HAL_GPIO_Init+0x1e4>)
 8000cb8:	608d      	str	r5, [r1, #8]

        temp = EXTI->FTSR;
 8000cba:	68cc      	ldr	r4, [r1, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cbc:	4651      	mov	r1, sl
 8000cbe:	0289      	lsls	r1, r1, #10
 8000cc0:	d452      	bmi.n	8000d68 <HAL_GPIO_Init+0x19c>
        temp &= ~(iocurrent);
 8000cc2:	4034      	ands	r4, r6
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8000cc4:	493a      	ldr	r1, [pc, #232]	; (8000db0 <HAL_GPIO_Init+0x1e4>)
 8000cc6:	60cc      	str	r4, [r1, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cc8:	0014      	movs	r4, r2
      }
    }

    position++;
 8000cca:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ccc:	40dc      	lsrs	r4, r3
 8000cce:	d18d      	bne.n	8000bec <HAL_GPIO_Init+0x20>
  } 
}
 8000cd0:	b007      	add	sp, #28
 8000cd2:	bcf0      	pop	{r4, r5, r6, r7}
 8000cd4:	46bb      	mov	fp, r7
 8000cd6:	46b2      	mov	sl, r6
 8000cd8:	46a9      	mov	r9, r5
 8000cda:	46a0      	mov	r8, r4
 8000cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 8000cde:	6885      	ldr	r5, [r0, #8]
 8000ce0:	005f      	lsls	r7, r3, #1
 8000ce2:	9503      	str	r5, [sp, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ce4:	2503      	movs	r5, #3
 8000ce6:	40bd      	lsls	r5, r7
 8000ce8:	46ac      	mov	ip, r5
 8000cea:	43e9      	mvns	r1, r5
 8000cec:	9102      	str	r1, [sp, #8]
 8000cee:	4661      	mov	r1, ip
 8000cf0:	9d03      	ldr	r5, [sp, #12]
 8000cf2:	438d      	bics	r5, r1
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cf4:	4649      	mov	r1, r9
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000cf6:	9503      	str	r5, [sp, #12]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cf8:	68cd      	ldr	r5, [r1, #12]
 8000cfa:	40bd      	lsls	r5, r7
 8000cfc:	46ac      	mov	ip, r5
 8000cfe:	4661      	mov	r1, ip
 8000d00:	9d03      	ldr	r5, [sp, #12]
 8000d02:	430d      	orrs	r5, r1
        GPIOx->OSPEEDR = temp;
 8000d04:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8000d06:	6841      	ldr	r1, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d08:	000d      	movs	r5, r1
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d0a:	4651      	mov	r1, sl
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d0c:	43a5      	bics	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d0e:	090c      	lsrs	r4, r1, #4
 8000d10:	4641      	mov	r1, r8
 8000d12:	400c      	ands	r4, r1
 8000d14:	409c      	lsls	r4, r3
 8000d16:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8000d18:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8000d1a:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d1c:	9902      	ldr	r1, [sp, #8]
 8000d1e:	400c      	ands	r4, r1
 8000d20:	46a4      	mov	ip, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d22:	464c      	mov	r4, r9
 8000d24:	68a4      	ldr	r4, [r4, #8]
 8000d26:	4665      	mov	r5, ip
 8000d28:	40bc      	lsls	r4, r7
 8000d2a:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8000d2c:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d2e:	0034      	movs	r4, r6
 8000d30:	40bc      	lsls	r4, r7
 8000d32:	2e02      	cmp	r6, #2
 8000d34:	d000      	beq.n	8000d38 <HAL_GPIO_Init+0x16c>
 8000d36:	e770      	b.n	8000c1a <HAL_GPIO_Init+0x4e>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d38:	2707      	movs	r7, #7
 8000d3a:	250f      	movs	r5, #15
 8000d3c:	401f      	ands	r7, r3
 8000d3e:	00bf      	lsls	r7, r7, #2
 8000d40:	40bd      	lsls	r5, r7
        temp = GPIOx->AFR[position >> 3u];
 8000d42:	08de      	lsrs	r6, r3, #3
 8000d44:	00b6      	lsls	r6, r6, #2
 8000d46:	1986      	adds	r6, r0, r6
 8000d48:	6a31      	ldr	r1, [r6, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d4a:	43a9      	bics	r1, r5
 8000d4c:	468c      	mov	ip, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d4e:	4649      	mov	r1, r9
 8000d50:	6909      	ldr	r1, [r1, #16]
 8000d52:	40b9      	lsls	r1, r7
 8000d54:	000f      	movs	r7, r1
 8000d56:	4661      	mov	r1, ip
 8000d58:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3u] = temp;
 8000d5a:	6237      	str	r7, [r6, #32]
 8000d5c:	e75d      	b.n	8000c1a <HAL_GPIO_Init+0x4e>
 8000d5e:	2503      	movs	r5, #3
 8000d60:	40bd      	lsls	r5, r7
 8000d62:	43e9      	mvns	r1, r5
 8000d64:	9102      	str	r1, [sp, #8]
 8000d66:	e7d8      	b.n	8000d1a <HAL_GPIO_Init+0x14e>
          temp |= iocurrent;
 8000d68:	9901      	ldr	r1, [sp, #4]
 8000d6a:	4321      	orrs	r1, r4
 8000d6c:	000c      	movs	r4, r1
 8000d6e:	e7a9      	b.n	8000cc4 <HAL_GPIO_Init+0xf8>
          temp |= iocurrent;
 8000d70:	9901      	ldr	r1, [sp, #4]
 8000d72:	430d      	orrs	r5, r1
 8000d74:	e79f      	b.n	8000cb6 <HAL_GPIO_Init+0xea>
          temp |= iocurrent;
 8000d76:	9901      	ldr	r1, [sp, #4]
 8000d78:	430c      	orrs	r4, r1
 8000d7a:	e795      	b.n	8000ca8 <HAL_GPIO_Init+0xdc>
          temp |= iocurrent;
 8000d7c:	9901      	ldr	r1, [sp, #4]
 8000d7e:	430c      	orrs	r4, r1
 8000d80:	e78b      	b.n	8000c9a <HAL_GPIO_Init+0xce>
 8000d82:	2103      	movs	r1, #3
 8000d84:	40b1      	lsls	r1, r6
 8000d86:	430d      	orrs	r5, r1
 8000d88:	e77b      	b.n	8000c82 <HAL_GPIO_Init+0xb6>
 8000d8a:	4641      	mov	r1, r8
 8000d8c:	40b1      	lsls	r1, r6
 8000d8e:	430d      	orrs	r5, r1
 8000d90:	e777      	b.n	8000c82 <HAL_GPIO_Init+0xb6>
 8000d92:	2702      	movs	r7, #2
 8000d94:	40b7      	lsls	r7, r6
 8000d96:	433d      	orrs	r5, r7
 8000d98:	e773      	b.n	8000c82 <HAL_GPIO_Init+0xb6>
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	40010000 	.word	0x40010000
 8000da4:	48000400 	.word	0x48000400
 8000da8:	48000800 	.word	0x48000800
 8000dac:	48000c00 	.word	0x48000c00
 8000db0:	40010400 	.word	0x40010400

08000db4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	d001      	beq.n	8000dbc <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000db8:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000dba:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dbc:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000dbe:	e7fc      	b.n	8000dba <HAL_GPIO_WritePin+0x6>

08000dc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dc2:	46ce      	mov	lr, r9
 8000dc4:	4647      	mov	r7, r8
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	0004      	movs	r4, r0
 8000dca:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dcc:	2800      	cmp	r0, #0
 8000dce:	d100      	bne.n	8000dd2 <HAL_RCC_OscConfig+0x12>
 8000dd0:	e0ed      	b.n	8000fae <HAL_RCC_OscConfig+0x1ee>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dd2:	6803      	ldr	r3, [r0, #0]
 8000dd4:	07da      	lsls	r2, r3, #31
 8000dd6:	d52f      	bpl.n	8000e38 <HAL_RCC_OscConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000dd8:	210c      	movs	r1, #12
 8000dda:	48c2      	ldr	r0, [pc, #776]	; (80010e4 <HAL_RCC_OscConfig+0x324>)
 8000ddc:	6842      	ldr	r2, [r0, #4]
 8000dde:	400a      	ands	r2, r1
 8000de0:	2a04      	cmp	r2, #4
 8000de2:	d100      	bne.n	8000de6 <HAL_RCC_OscConfig+0x26>
 8000de4:	e105      	b.n	8000ff2 <HAL_RCC_OscConfig+0x232>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000de6:	6842      	ldr	r2, [r0, #4]
 8000de8:	4011      	ands	r1, r2
 8000dea:	2908      	cmp	r1, #8
 8000dec:	d100      	bne.n	8000df0 <HAL_RCC_OscConfig+0x30>
 8000dee:	e0f7      	b.n	8000fe0 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000df0:	6863      	ldr	r3, [r4, #4]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d100      	bne.n	8000df8 <HAL_RCC_OscConfig+0x38>
 8000df6:	e106      	b.n	8001006 <HAL_RCC_OscConfig+0x246>
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d100      	bne.n	8000dfe <HAL_RCC_OscConfig+0x3e>
 8000dfc:	e128      	b.n	8001050 <HAL_RCC_OscConfig+0x290>
 8000dfe:	2b05      	cmp	r3, #5
 8000e00:	d100      	bne.n	8000e04 <HAL_RCC_OscConfig+0x44>
 8000e02:	e22c      	b.n	800125e <HAL_RCC_OscConfig+0x49e>
 8000e04:	4bb7      	ldr	r3, [pc, #732]	; (80010e4 <HAL_RCC_OscConfig+0x324>)
 8000e06:	49b8      	ldr	r1, [pc, #736]	; (80010e8 <HAL_RCC_OscConfig+0x328>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	400a      	ands	r2, r1
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	49b6      	ldr	r1, [pc, #728]	; (80010ec <HAL_RCC_OscConfig+0x32c>)
 8000e12:	400a      	ands	r2, r1
 8000e14:	601a      	str	r2, [r3, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e16:	f7ff fe37 	bl	8000a88 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e1a:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000e1c:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e1e:	4fb1      	ldr	r7, [pc, #708]	; (80010e4 <HAL_RCC_OscConfig+0x324>)
 8000e20:	02b6      	lsls	r6, r6, #10
 8000e22:	e005      	b.n	8000e30 <HAL_RCC_OscConfig+0x70>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e24:	f7ff fe30 	bl	8000a88 <HAL_GetTick>
 8000e28:	1b40      	subs	r0, r0, r5
 8000e2a:	2864      	cmp	r0, #100	; 0x64
 8000e2c:	d900      	bls.n	8000e30 <HAL_RCC_OscConfig+0x70>
 8000e2e:	e10d      	b.n	800104c <HAL_RCC_OscConfig+0x28c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	4233      	tst	r3, r6
 8000e34:	d0f6      	beq.n	8000e24 <HAL_RCC_OscConfig+0x64>
 8000e36:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e38:	079a      	lsls	r2, r3, #30
 8000e3a:	d529      	bpl.n	8000e90 <HAL_RCC_OscConfig+0xd0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e3c:	220c      	movs	r2, #12
 8000e3e:	49a9      	ldr	r1, [pc, #676]	; (80010e4 <HAL_RCC_OscConfig+0x324>)
 8000e40:	6848      	ldr	r0, [r1, #4]
 8000e42:	4202      	tst	r2, r0
 8000e44:	d100      	bne.n	8000e48 <HAL_RCC_OscConfig+0x88>
 8000e46:	e0ab      	b.n	8000fa0 <HAL_RCC_OscConfig+0x1e0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e48:	6848      	ldr	r0, [r1, #4]
 8000e4a:	4002      	ands	r2, r0
 8000e4c:	2a08      	cmp	r2, #8
 8000e4e:	d100      	bne.n	8000e52 <HAL_RCC_OscConfig+0x92>
 8000e50:	e09d      	b.n	8000f8e <HAL_RCC_OscConfig+0x1ce>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e52:	68e3      	ldr	r3, [r4, #12]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e54:	4da3      	ldr	r5, [pc, #652]	; (80010e4 <HAL_RCC_OscConfig+0x324>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d100      	bne.n	8000e5c <HAL_RCC_OscConfig+0x9c>
 8000e5a:	e130      	b.n	80010be <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_HSI_ENABLE();
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	682b      	ldr	r3, [r5, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e60:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8000e62:	4313      	orrs	r3, r2
 8000e64:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e66:	f7ff fe0f 	bl	8000a88 <HAL_GetTick>
 8000e6a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e6c:	e005      	b.n	8000e7a <HAL_RCC_OscConfig+0xba>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e6e:	f7ff fe0b 	bl	8000a88 <HAL_GetTick>
 8000e72:	1b80      	subs	r0, r0, r6
 8000e74:	2802      	cmp	r0, #2
 8000e76:	d900      	bls.n	8000e7a <HAL_RCC_OscConfig+0xba>
 8000e78:	e0e8      	b.n	800104c <HAL_RCC_OscConfig+0x28c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e7a:	682b      	ldr	r3, [r5, #0]
 8000e7c:	421f      	tst	r7, r3
 8000e7e:	d0f6      	beq.n	8000e6e <HAL_RCC_OscConfig+0xae>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e80:	21f8      	movs	r1, #248	; 0xf8
 8000e82:	682a      	ldr	r2, [r5, #0]
 8000e84:	6923      	ldr	r3, [r4, #16]
 8000e86:	438a      	bics	r2, r1
 8000e88:	00db      	lsls	r3, r3, #3
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	602b      	str	r3, [r5, #0]
 8000e8e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e90:	071a      	lsls	r2, r3, #28
 8000e92:	d42d      	bmi.n	8000ef0 <HAL_RCC_OscConfig+0x130>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e94:	075a      	lsls	r2, r3, #29
 8000e96:	d544      	bpl.n	8000f22 <HAL_RCC_OscConfig+0x162>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e98:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000e9a:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e9c:	4b91      	ldr	r3, [pc, #580]	; (80010e4 <HAL_RCC_OscConfig+0x324>)
 8000e9e:	0552      	lsls	r2, r2, #21
 8000ea0:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000ea2:	4681      	mov	r9, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ea4:	4211      	tst	r1, r2
 8000ea6:	d108      	bne.n	8000eba <HAL_RCC_OscConfig+0xfa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ea8:	69d9      	ldr	r1, [r3, #28]
 8000eaa:	4311      	orrs	r1, r2
 8000eac:	61d9      	str	r1, [r3, #28]
 8000eae:	69db      	ldr	r3, [r3, #28]
 8000eb0:	401a      	ands	r2, r3
 8000eb2:	9201      	str	r2, [sp, #4]
 8000eb4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	4699      	mov	r9, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eba:	2780      	movs	r7, #128	; 0x80
 8000ebc:	4e8c      	ldr	r6, [pc, #560]	; (80010f0 <HAL_RCC_OscConfig+0x330>)
 8000ebe:	007f      	lsls	r7, r7, #1
 8000ec0:	6833      	ldr	r3, [r6, #0]
 8000ec2:	423b      	tst	r3, r7
 8000ec4:	d100      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x108>
 8000ec6:	e0a5      	b.n	8001014 <HAL_RCC_OscConfig+0x254>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ec8:	68a3      	ldr	r3, [r4, #8]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d100      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x110>
 8000ece:	e115      	b.n	80010fc <HAL_RCC_OscConfig+0x33c>
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d100      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x116>
 8000ed4:	e0d5      	b.n	8001082 <HAL_RCC_OscConfig+0x2c2>
 8000ed6:	2b05      	cmp	r3, #5
 8000ed8:	d100      	bne.n	8000edc <HAL_RCC_OscConfig+0x11c>
 8000eda:	e144      	b.n	8001166 <HAL_RCC_OscConfig+0x3a6>
 8000edc:	2101      	movs	r1, #1
 8000ede:	4b81      	ldr	r3, [pc, #516]	; (80010e4 <HAL_RCC_OscConfig+0x324>)
 8000ee0:	6a1a      	ldr	r2, [r3, #32]
 8000ee2:	438a      	bics	r2, r1
 8000ee4:	621a      	str	r2, [r3, #32]
 8000ee6:	6a1a      	ldr	r2, [r3, #32]
 8000ee8:	3103      	adds	r1, #3
 8000eea:	438a      	bics	r2, r1
 8000eec:	621a      	str	r2, [r3, #32]
 8000eee:	e109      	b.n	8001104 <HAL_RCC_OscConfig+0x344>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ef0:	69e3      	ldr	r3, [r4, #28]
      __HAL_RCC_LSI_ENABLE();
 8000ef2:	4d7c      	ldr	r5, [pc, #496]	; (80010e4 <HAL_RCC_OscConfig+0x324>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d060      	beq.n	8000fba <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_LSI_ENABLE();
 8000ef8:	2201      	movs	r2, #1
 8000efa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000efc:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8000efe:	4313      	orrs	r3, r2
 8000f00:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000f02:	f7ff fdc1 	bl	8000a88 <HAL_GetTick>
 8000f06:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f08:	e005      	b.n	8000f16 <HAL_RCC_OscConfig+0x156>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f0a:	f7ff fdbd 	bl	8000a88 <HAL_GetTick>
 8000f0e:	1b80      	subs	r0, r0, r6
 8000f10:	2802      	cmp	r0, #2
 8000f12:	d900      	bls.n	8000f16 <HAL_RCC_OscConfig+0x156>
 8000f14:	e09a      	b.n	800104c <HAL_RCC_OscConfig+0x28c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000f18:	421f      	tst	r7, r3
 8000f1a:	d0f6      	beq.n	8000f0a <HAL_RCC_OscConfig+0x14a>
 8000f1c:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f1e:	075a      	lsls	r2, r3, #29
 8000f20:	d4ba      	bmi.n	8000e98 <HAL_RCC_OscConfig+0xd8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000f22:	06db      	lsls	r3, r3, #27
 8000f24:	d512      	bpl.n	8000f4c <HAL_RCC_OscConfig+0x18c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000f26:	6963      	ldr	r3, [r4, #20]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d100      	bne.n	8000f2e <HAL_RCC_OscConfig+0x16e>
 8000f2c:	e141      	b.n	80011b2 <HAL_RCC_OscConfig+0x3f2>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000f2e:	3305      	adds	r3, #5
 8000f30:	d000      	beq.n	8000f34 <HAL_RCC_OscConfig+0x174>
 8000f32:	e0f9      	b.n	8001128 <HAL_RCC_OscConfig+0x368>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000f34:	2104      	movs	r1, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000f36:	20f8      	movs	r0, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 8000f38:	4a6a      	ldr	r2, [pc, #424]	; (80010e4 <HAL_RCC_OscConfig+0x324>)
 8000f3a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000f3c:	438b      	bics	r3, r1
 8000f3e:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000f40:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8000f42:	69a3      	ldr	r3, [r4, #24]
 8000f44:	4381      	bics	r1, r0
 8000f46:	00db      	lsls	r3, r3, #3
 8000f48:	430b      	orrs	r3, r1
 8000f4a:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f4c:	6a23      	ldr	r3, [r4, #32]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d01b      	beq.n	8000f8a <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f52:	220c      	movs	r2, #12
 8000f54:	4e63      	ldr	r6, [pc, #396]	; (80010e4 <HAL_RCC_OscConfig+0x324>)
 8000f56:	6871      	ldr	r1, [r6, #4]
 8000f58:	400a      	ands	r2, r1
 8000f5a:	2a08      	cmp	r2, #8
 8000f5c:	d100      	bne.n	8000f60 <HAL_RCC_OscConfig+0x1a0>
 8000f5e:	e10c      	b.n	800117a <HAL_RCC_OscConfig+0x3ba>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d100      	bne.n	8000f66 <HAL_RCC_OscConfig+0x1a6>
 8000f64:	e143      	b.n	80011ee <HAL_RCC_OscConfig+0x42e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f66:	6833      	ldr	r3, [r6, #0]
 8000f68:	4a62      	ldr	r2, [pc, #392]	; (80010f4 <HAL_RCC_OscConfig+0x334>)
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f6a:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000f70:	f7ff fd8a 	bl	8000a88 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f74:	04ad      	lsls	r5, r5, #18
        tickstart = HAL_GetTick();
 8000f76:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f78:	e004      	b.n	8000f84 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f7a:	f7ff fd85 	bl	8000a88 <HAL_GetTick>
 8000f7e:	1b00      	subs	r0, r0, r4
 8000f80:	2802      	cmp	r0, #2
 8000f82:	d863      	bhi.n	800104c <HAL_RCC_OscConfig+0x28c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f84:	6833      	ldr	r3, [r6, #0]
 8000f86:	422b      	tst	r3, r5
 8000f88:	d1f7      	bne.n	8000f7a <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }

  return HAL_OK;
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	e010      	b.n	8000fb0 <HAL_RCC_OscConfig+0x1f0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f8e:	684a      	ldr	r2, [r1, #4]
 8000f90:	21c0      	movs	r1, #192	; 0xc0
 8000f92:	0249      	lsls	r1, r1, #9
 8000f94:	400a      	ands	r2, r1
 8000f96:	2180      	movs	r1, #128	; 0x80
 8000f98:	0209      	lsls	r1, r1, #8
 8000f9a:	428a      	cmp	r2, r1
 8000f9c:	d000      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x1e0>
 8000f9e:	e758      	b.n	8000e52 <HAL_RCC_OscConfig+0x92>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fa0:	4a50      	ldr	r2, [pc, #320]	; (80010e4 <HAL_RCC_OscConfig+0x324>)
 8000fa2:	6812      	ldr	r2, [r2, #0]
 8000fa4:	0792      	lsls	r2, r2, #30
 8000fa6:	d545      	bpl.n	8001034 <HAL_RCC_OscConfig+0x274>
 8000fa8:	68e2      	ldr	r2, [r4, #12]
 8000faa:	2a01      	cmp	r2, #1
 8000fac:	d042      	beq.n	8001034 <HAL_RCC_OscConfig+0x274>
        return HAL_ERROR;
 8000fae:	2001      	movs	r0, #1
}
 8000fb0:	b003      	add	sp, #12
 8000fb2:	bcc0      	pop	{r6, r7}
 8000fb4:	46b9      	mov	r9, r7
 8000fb6:	46b0      	mov	r8, r6
 8000fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_LSI_DISABLE();
 8000fba:	2201      	movs	r2, #1
 8000fbc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fbe:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8000fc0:	4393      	bics	r3, r2
 8000fc2:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000fc4:	f7ff fd60 	bl	8000a88 <HAL_GetTick>
 8000fc8:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fca:	e004      	b.n	8000fd6 <HAL_RCC_OscConfig+0x216>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fcc:	f7ff fd5c 	bl	8000a88 <HAL_GetTick>
 8000fd0:	1b80      	subs	r0, r0, r6
 8000fd2:	2802      	cmp	r0, #2
 8000fd4:	d83a      	bhi.n	800104c <HAL_RCC_OscConfig+0x28c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000fd8:	421f      	tst	r7, r3
 8000fda:	d1f7      	bne.n	8000fcc <HAL_RCC_OscConfig+0x20c>
 8000fdc:	6823      	ldr	r3, [r4, #0]
 8000fde:	e79e      	b.n	8000f1e <HAL_RCC_OscConfig+0x15e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fe0:	21c0      	movs	r1, #192	; 0xc0
 8000fe2:	6842      	ldr	r2, [r0, #4]
 8000fe4:	0249      	lsls	r1, r1, #9
 8000fe6:	400a      	ands	r2, r1
 8000fe8:	2180      	movs	r1, #128	; 0x80
 8000fea:	0249      	lsls	r1, r1, #9
 8000fec:	428a      	cmp	r2, r1
 8000fee:	d000      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x232>
 8000ff0:	e6fe      	b.n	8000df0 <HAL_RCC_OscConfig+0x30>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ff2:	4a3c      	ldr	r2, [pc, #240]	; (80010e4 <HAL_RCC_OscConfig+0x324>)
 8000ff4:	6812      	ldr	r2, [r2, #0]
 8000ff6:	0392      	lsls	r2, r2, #14
 8000ff8:	d400      	bmi.n	8000ffc <HAL_RCC_OscConfig+0x23c>
 8000ffa:	e71d      	b.n	8000e38 <HAL_RCC_OscConfig+0x78>
 8000ffc:	6862      	ldr	r2, [r4, #4]
 8000ffe:	2a00      	cmp	r2, #0
 8001000:	d000      	beq.n	8001004 <HAL_RCC_OscConfig+0x244>
 8001002:	e719      	b.n	8000e38 <HAL_RCC_OscConfig+0x78>
 8001004:	e7d3      	b.n	8000fae <HAL_RCC_OscConfig+0x1ee>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001006:	2380      	movs	r3, #128	; 0x80
 8001008:	4a36      	ldr	r2, [pc, #216]	; (80010e4 <HAL_RCC_OscConfig+0x324>)
 800100a:	025b      	lsls	r3, r3, #9
 800100c:	6811      	ldr	r1, [r2, #0]
 800100e:	430b      	orrs	r3, r1
 8001010:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001012:	e700      	b.n	8000e16 <HAL_RCC_OscConfig+0x56>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001014:	6833      	ldr	r3, [r6, #0]
 8001016:	433b      	orrs	r3, r7
 8001018:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800101a:	f7ff fd35 	bl	8000a88 <HAL_GetTick>
 800101e:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001020:	e004      	b.n	800102c <HAL_RCC_OscConfig+0x26c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001022:	f7ff fd31 	bl	8000a88 <HAL_GetTick>
 8001026:	1b40      	subs	r0, r0, r5
 8001028:	2864      	cmp	r0, #100	; 0x64
 800102a:	d80f      	bhi.n	800104c <HAL_RCC_OscConfig+0x28c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800102c:	6833      	ldr	r3, [r6, #0]
 800102e:	423b      	tst	r3, r7
 8001030:	d0f7      	beq.n	8001022 <HAL_RCC_OscConfig+0x262>
 8001032:	e749      	b.n	8000ec8 <HAL_RCC_OscConfig+0x108>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001034:	25f8      	movs	r5, #248	; 0xf8
 8001036:	482b      	ldr	r0, [pc, #172]	; (80010e4 <HAL_RCC_OscConfig+0x324>)
 8001038:	6922      	ldr	r2, [r4, #16]
 800103a:	6801      	ldr	r1, [r0, #0]
 800103c:	00d2      	lsls	r2, r2, #3
 800103e:	43a9      	bics	r1, r5
 8001040:	430a      	orrs	r2, r1
 8001042:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001044:	071a      	lsls	r2, r3, #28
 8001046:	d400      	bmi.n	800104a <HAL_RCC_OscConfig+0x28a>
 8001048:	e724      	b.n	8000e94 <HAL_RCC_OscConfig+0xd4>
 800104a:	e751      	b.n	8000ef0 <HAL_RCC_OscConfig+0x130>
            return HAL_TIMEOUT;
 800104c:	2003      	movs	r0, #3
 800104e:	e7af      	b.n	8000fb0 <HAL_RCC_OscConfig+0x1f0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001050:	4d24      	ldr	r5, [pc, #144]	; (80010e4 <HAL_RCC_OscConfig+0x324>)
 8001052:	4a25      	ldr	r2, [pc, #148]	; (80010e8 <HAL_RCC_OscConfig+0x328>)
 8001054:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001056:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001058:	4013      	ands	r3, r2
 800105a:	602b      	str	r3, [r5, #0]
 800105c:	682b      	ldr	r3, [r5, #0]
 800105e:	4a23      	ldr	r2, [pc, #140]	; (80010ec <HAL_RCC_OscConfig+0x32c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001060:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001062:	4013      	ands	r3, r2
 8001064:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001066:	f7ff fd0f 	bl	8000a88 <HAL_GetTick>
 800106a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800106c:	e004      	b.n	8001078 <HAL_RCC_OscConfig+0x2b8>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800106e:	f7ff fd0b 	bl	8000a88 <HAL_GetTick>
 8001072:	1b80      	subs	r0, r0, r6
 8001074:	2864      	cmp	r0, #100	; 0x64
 8001076:	d8e9      	bhi.n	800104c <HAL_RCC_OscConfig+0x28c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001078:	682b      	ldr	r3, [r5, #0]
 800107a:	423b      	tst	r3, r7
 800107c:	d1f7      	bne.n	800106e <HAL_RCC_OscConfig+0x2ae>
 800107e:	6823      	ldr	r3, [r4, #0]
 8001080:	e6da      	b.n	8000e38 <HAL_RCC_OscConfig+0x78>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001082:	2201      	movs	r2, #1
 8001084:	4e17      	ldr	r6, [pc, #92]	; (80010e4 <HAL_RCC_OscConfig+0x324>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001086:	4d1c      	ldr	r5, [pc, #112]	; (80010f8 <HAL_RCC_OscConfig+0x338>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001088:	6a33      	ldr	r3, [r6, #32]
 800108a:	4393      	bics	r3, r2
 800108c:	6233      	str	r3, [r6, #32]
 800108e:	6a33      	ldr	r3, [r6, #32]
 8001090:	3203      	adds	r2, #3
 8001092:	4393      	bics	r3, r2
 8001094:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8001096:	f7ff fcf7 	bl	8000a88 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800109a:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 800109c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800109e:	4698      	mov	r8, r3
 80010a0:	e004      	b.n	80010ac <HAL_RCC_OscConfig+0x2ec>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010a2:	f7ff fcf1 	bl	8000a88 <HAL_GetTick>
 80010a6:	1bc0      	subs	r0, r0, r7
 80010a8:	42a8      	cmp	r0, r5
 80010aa:	d8cf      	bhi.n	800104c <HAL_RCC_OscConfig+0x28c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010ac:	4642      	mov	r2, r8
 80010ae:	6a33      	ldr	r3, [r6, #32]
 80010b0:	421a      	tst	r2, r3
 80010b2:	d1f6      	bne.n	80010a2 <HAL_RCC_OscConfig+0x2e2>
    if(pwrclkchanged == SET)
 80010b4:	464b      	mov	r3, r9
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d04e      	beq.n	8001158 <HAL_RCC_OscConfig+0x398>
 80010ba:	6823      	ldr	r3, [r4, #0]
 80010bc:	e731      	b.n	8000f22 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 80010be:	2201      	movs	r2, #1
 80010c0:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010c2:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 80010c4:	4393      	bics	r3, r2
 80010c6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80010c8:	f7ff fcde 	bl	8000a88 <HAL_GetTick>
 80010cc:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ce:	e004      	b.n	80010da <HAL_RCC_OscConfig+0x31a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010d0:	f7ff fcda 	bl	8000a88 <HAL_GetTick>
 80010d4:	1b80      	subs	r0, r0, r6
 80010d6:	2802      	cmp	r0, #2
 80010d8:	d8b8      	bhi.n	800104c <HAL_RCC_OscConfig+0x28c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010da:	682b      	ldr	r3, [r5, #0]
 80010dc:	421f      	tst	r7, r3
 80010de:	d1f7      	bne.n	80010d0 <HAL_RCC_OscConfig+0x310>
 80010e0:	6823      	ldr	r3, [r4, #0]
 80010e2:	e6d5      	b.n	8000e90 <HAL_RCC_OscConfig+0xd0>
 80010e4:	40021000 	.word	0x40021000
 80010e8:	fffeffff 	.word	0xfffeffff
 80010ec:	fffbffff 	.word	0xfffbffff
 80010f0:	40007000 	.word	0x40007000
 80010f4:	feffffff 	.word	0xfeffffff
 80010f8:	00001388 	.word	0x00001388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010fc:	495e      	ldr	r1, [pc, #376]	; (8001278 <HAL_RCC_OscConfig+0x4b8>)
 80010fe:	6a0a      	ldr	r2, [r1, #32]
 8001100:	4313      	orrs	r3, r2
 8001102:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8001104:	f7ff fcc0 	bl	8000a88 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001108:	4b5b      	ldr	r3, [pc, #364]	; (8001278 <HAL_RCC_OscConfig+0x4b8>)
      tickstart = HAL_GetTick();
 800110a:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800110c:	4698      	mov	r8, r3
 800110e:	2702      	movs	r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001110:	4d5a      	ldr	r5, [pc, #360]	; (800127c <HAL_RCC_OscConfig+0x4bc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001112:	e004      	b.n	800111e <HAL_RCC_OscConfig+0x35e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001114:	f7ff fcb8 	bl	8000a88 <HAL_GetTick>
 8001118:	1b80      	subs	r0, r0, r6
 800111a:	42a8      	cmp	r0, r5
 800111c:	d896      	bhi.n	800104c <HAL_RCC_OscConfig+0x28c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800111e:	4643      	mov	r3, r8
 8001120:	6a1b      	ldr	r3, [r3, #32]
 8001122:	421f      	tst	r7, r3
 8001124:	d0f6      	beq.n	8001114 <HAL_RCC_OscConfig+0x354>
 8001126:	e7c5      	b.n	80010b4 <HAL_RCC_OscConfig+0x2f4>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001128:	2204      	movs	r2, #4
 800112a:	4d53      	ldr	r5, [pc, #332]	; (8001278 <HAL_RCC_OscConfig+0x4b8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800112c:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800112e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001130:	4313      	orrs	r3, r2
 8001132:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8001134:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001136:	3a03      	subs	r2, #3
 8001138:	4393      	bics	r3, r2
 800113a:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 800113c:	f7ff fca4 	bl	8000a88 <HAL_GetTick>
 8001140:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001142:	e005      	b.n	8001150 <HAL_RCC_OscConfig+0x390>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001144:	f7ff fca0 	bl	8000a88 <HAL_GetTick>
 8001148:	1b80      	subs	r0, r0, r6
 800114a:	2802      	cmp	r0, #2
 800114c:	d900      	bls.n	8001150 <HAL_RCC_OscConfig+0x390>
 800114e:	e77d      	b.n	800104c <HAL_RCC_OscConfig+0x28c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001150:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001152:	421f      	tst	r7, r3
 8001154:	d1f6      	bne.n	8001144 <HAL_RCC_OscConfig+0x384>
 8001156:	e6f9      	b.n	8000f4c <HAL_RCC_OscConfig+0x18c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001158:	4a47      	ldr	r2, [pc, #284]	; (8001278 <HAL_RCC_OscConfig+0x4b8>)
 800115a:	4949      	ldr	r1, [pc, #292]	; (8001280 <HAL_RCC_OscConfig+0x4c0>)
 800115c:	69d3      	ldr	r3, [r2, #28]
 800115e:	400b      	ands	r3, r1
 8001160:	61d3      	str	r3, [r2, #28]
 8001162:	6823      	ldr	r3, [r4, #0]
 8001164:	e6dd      	b.n	8000f22 <HAL_RCC_OscConfig+0x162>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001166:	2104      	movs	r1, #4
 8001168:	4b43      	ldr	r3, [pc, #268]	; (8001278 <HAL_RCC_OscConfig+0x4b8>)
 800116a:	6a1a      	ldr	r2, [r3, #32]
 800116c:	430a      	orrs	r2, r1
 800116e:	621a      	str	r2, [r3, #32]
 8001170:	6a1a      	ldr	r2, [r3, #32]
 8001172:	3903      	subs	r1, #3
 8001174:	430a      	orrs	r2, r1
 8001176:	621a      	str	r2, [r3, #32]
 8001178:	e7c4      	b.n	8001104 <HAL_RCC_OscConfig+0x344>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800117a:	2b01      	cmp	r3, #1
 800117c:	d100      	bne.n	8001180 <HAL_RCC_OscConfig+0x3c0>
 800117e:	e716      	b.n	8000fae <HAL_RCC_OscConfig+0x1ee>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001180:	23c0      	movs	r3, #192	; 0xc0
        pll_config  = RCC->CFGR;
 8001182:	6872      	ldr	r2, [r6, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001184:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001186:	025b      	lsls	r3, r3, #9
        return HAL_ERROR;
 8001188:	2001      	movs	r0, #1
        pll_config2 = RCC->CFGR2;
 800118a:	6af1      	ldr	r1, [r6, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800118c:	4013      	ands	r3, r2
 800118e:	42ab      	cmp	r3, r5
 8001190:	d000      	beq.n	8001194 <HAL_RCC_OscConfig+0x3d4>
 8001192:	e70d      	b.n	8000fb0 <HAL_RCC_OscConfig+0x1f0>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001194:	230f      	movs	r3, #15
 8001196:	400b      	ands	r3, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001198:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800119a:	428b      	cmp	r3, r1
 800119c:	d000      	beq.n	80011a0 <HAL_RCC_OscConfig+0x3e0>
 800119e:	e707      	b.n	8000fb0 <HAL_RCC_OscConfig+0x1f0>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80011a0:	20f0      	movs	r0, #240	; 0xf0
 80011a2:	0380      	lsls	r0, r0, #14
 80011a4:	4002      	ands	r2, r0
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80011a6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80011a8:	1a10      	subs	r0, r2, r0
 80011aa:	1e42      	subs	r2, r0, #1
 80011ac:	4190      	sbcs	r0, r2
  return HAL_OK;
 80011ae:	b2c0      	uxtb	r0, r0
 80011b0:	e6fe      	b.n	8000fb0 <HAL_RCC_OscConfig+0x1f0>
      __HAL_RCC_HSI14ADC_DISABLE();
 80011b2:	2104      	movs	r1, #4
 80011b4:	4e30      	ldr	r6, [pc, #192]	; (8001278 <HAL_RCC_OscConfig+0x4b8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80011b6:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80011b8:	6b72      	ldr	r2, [r6, #52]	; 0x34
 80011ba:	430a      	orrs	r2, r1
 80011bc:	6372      	str	r2, [r6, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80011be:	6b72      	ldr	r2, [r6, #52]	; 0x34
 80011c0:	4313      	orrs	r3, r2
 80011c2:	6373      	str	r3, [r6, #52]	; 0x34
      tickstart = HAL_GetTick();
 80011c4:	f7ff fc60 	bl	8000a88 <HAL_GetTick>
 80011c8:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80011ca:	e005      	b.n	80011d8 <HAL_RCC_OscConfig+0x418>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80011cc:	f7ff fc5c 	bl	8000a88 <HAL_GetTick>
 80011d0:	1b40      	subs	r0, r0, r5
 80011d2:	2802      	cmp	r0, #2
 80011d4:	d900      	bls.n	80011d8 <HAL_RCC_OscConfig+0x418>
 80011d6:	e739      	b.n	800104c <HAL_RCC_OscConfig+0x28c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80011d8:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80011da:	421f      	tst	r7, r3
 80011dc:	d0f6      	beq.n	80011cc <HAL_RCC_OscConfig+0x40c>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80011de:	21f8      	movs	r1, #248	; 0xf8
 80011e0:	6b72      	ldr	r2, [r6, #52]	; 0x34
 80011e2:	69a3      	ldr	r3, [r4, #24]
 80011e4:	438a      	bics	r2, r1
 80011e6:	00db      	lsls	r3, r3, #3
 80011e8:	4313      	orrs	r3, r2
 80011ea:	6373      	str	r3, [r6, #52]	; 0x34
 80011ec:	e6ae      	b.n	8000f4c <HAL_RCC_OscConfig+0x18c>
        __HAL_RCC_PLL_DISABLE();
 80011ee:	6833      	ldr	r3, [r6, #0]
 80011f0:	4a24      	ldr	r2, [pc, #144]	; (8001284 <HAL_RCC_OscConfig+0x4c4>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011f2:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80011f4:	4013      	ands	r3, r2
 80011f6:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80011f8:	f7ff fc46 	bl	8000a88 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011fc:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 80011fe:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001200:	e005      	b.n	800120e <HAL_RCC_OscConfig+0x44e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001202:	f7ff fc41 	bl	8000a88 <HAL_GetTick>
 8001206:	1b40      	subs	r0, r0, r5
 8001208:	2802      	cmp	r0, #2
 800120a:	d900      	bls.n	800120e <HAL_RCC_OscConfig+0x44e>
 800120c:	e71e      	b.n	800104c <HAL_RCC_OscConfig+0x28c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800120e:	6833      	ldr	r3, [r6, #0]
 8001210:	423b      	tst	r3, r7
 8001212:	d1f6      	bne.n	8001202 <HAL_RCC_OscConfig+0x442>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001214:	220f      	movs	r2, #15
 8001216:	6af3      	ldr	r3, [r6, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001218:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800121a:	4393      	bics	r3, r2
 800121c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800121e:	04ad      	lsls	r5, r5, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001220:	4313      	orrs	r3, r2
 8001222:	62f3      	str	r3, [r6, #44]	; 0x2c
 8001224:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001226:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001228:	6872      	ldr	r2, [r6, #4]
 800122a:	430b      	orrs	r3, r1
 800122c:	4916      	ldr	r1, [pc, #88]	; (8001288 <HAL_RCC_OscConfig+0x4c8>)
 800122e:	400a      	ands	r2, r1
 8001230:	4313      	orrs	r3, r2
 8001232:	6073      	str	r3, [r6, #4]
        __HAL_RCC_PLL_ENABLE();
 8001234:	2380      	movs	r3, #128	; 0x80
 8001236:	6832      	ldr	r2, [r6, #0]
 8001238:	045b      	lsls	r3, r3, #17
 800123a:	4313      	orrs	r3, r2
 800123c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800123e:	f7ff fc23 	bl	8000a88 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001242:	4e0d      	ldr	r6, [pc, #52]	; (8001278 <HAL_RCC_OscConfig+0x4b8>)
        tickstart = HAL_GetTick();
 8001244:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001246:	e005      	b.n	8001254 <HAL_RCC_OscConfig+0x494>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001248:	f7ff fc1e 	bl	8000a88 <HAL_GetTick>
 800124c:	1b00      	subs	r0, r0, r4
 800124e:	2802      	cmp	r0, #2
 8001250:	d900      	bls.n	8001254 <HAL_RCC_OscConfig+0x494>
 8001252:	e6fb      	b.n	800104c <HAL_RCC_OscConfig+0x28c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001254:	6833      	ldr	r3, [r6, #0]
 8001256:	422b      	tst	r3, r5
 8001258:	d0f6      	beq.n	8001248 <HAL_RCC_OscConfig+0x488>
  return HAL_OK;
 800125a:	2000      	movs	r0, #0
 800125c:	e6a8      	b.n	8000fb0 <HAL_RCC_OscConfig+0x1f0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800125e:	2280      	movs	r2, #128	; 0x80
 8001260:	4b05      	ldr	r3, [pc, #20]	; (8001278 <HAL_RCC_OscConfig+0x4b8>)
 8001262:	02d2      	lsls	r2, r2, #11
 8001264:	6819      	ldr	r1, [r3, #0]
 8001266:	430a      	orrs	r2, r1
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	2280      	movs	r2, #128	; 0x80
 800126c:	6819      	ldr	r1, [r3, #0]
 800126e:	0252      	lsls	r2, r2, #9
 8001270:	430a      	orrs	r2, r1
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	e5cf      	b.n	8000e16 <HAL_RCC_OscConfig+0x56>
 8001276:	46c0      	nop			; (mov r8, r8)
 8001278:	40021000 	.word	0x40021000
 800127c:	00001388 	.word	0x00001388
 8001280:	efffffff 	.word	0xefffffff
 8001284:	feffffff 	.word	0xfeffffff
 8001288:	ffc27fff 	.word	0xffc27fff

0800128c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800128c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800128e:	46ce      	mov	lr, r9
 8001290:	4647      	mov	r7, r8
 8001292:	b580      	push	{r7, lr}
 8001294:	0004      	movs	r4, r0
 8001296:	000d      	movs	r5, r1
 8001298:	b089      	sub	sp, #36	; 0x24
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800129a:	2800      	cmp	r0, #0
 800129c:	d00d      	beq.n	80012ba <HAL_RCC_ClockConfig+0x2e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800129e:	2301      	movs	r3, #1
 80012a0:	4953      	ldr	r1, [pc, #332]	; (80013f0 <HAL_RCC_ClockConfig+0x164>)
 80012a2:	680a      	ldr	r2, [r1, #0]
 80012a4:	401a      	ands	r2, r3
 80012a6:	42aa      	cmp	r2, r5
 80012a8:	d20d      	bcs.n	80012c6 <HAL_RCC_ClockConfig+0x3a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012aa:	680a      	ldr	r2, [r1, #0]
 80012ac:	439a      	bics	r2, r3
 80012ae:	432a      	orrs	r2, r5
 80012b0:	600a      	str	r2, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012b2:	680a      	ldr	r2, [r1, #0]
 80012b4:	4013      	ands	r3, r2
 80012b6:	42ab      	cmp	r3, r5
 80012b8:	d005      	beq.n	80012c6 <HAL_RCC_ClockConfig+0x3a>
    return HAL_ERROR;
 80012ba:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 80012bc:	b009      	add	sp, #36	; 0x24
 80012be:	bcc0      	pop	{r6, r7}
 80012c0:	46b9      	mov	r9, r7
 80012c2:	46b0      	mov	r8, r6
 80012c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012c6:	6823      	ldr	r3, [r4, #0]
 80012c8:	079a      	lsls	r2, r3, #30
 80012ca:	d50e      	bpl.n	80012ea <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012cc:	075a      	lsls	r2, r3, #29
 80012ce:	d505      	bpl.n	80012dc <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80012d0:	22e0      	movs	r2, #224	; 0xe0
 80012d2:	4948      	ldr	r1, [pc, #288]	; (80013f4 <HAL_RCC_ClockConfig+0x168>)
 80012d4:	00d2      	lsls	r2, r2, #3
 80012d6:	6848      	ldr	r0, [r1, #4]
 80012d8:	4302      	orrs	r2, r0
 80012da:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012dc:	20f0      	movs	r0, #240	; 0xf0
 80012de:	4945      	ldr	r1, [pc, #276]	; (80013f4 <HAL_RCC_ClockConfig+0x168>)
 80012e0:	684a      	ldr	r2, [r1, #4]
 80012e2:	4382      	bics	r2, r0
 80012e4:	68a0      	ldr	r0, [r4, #8]
 80012e6:	4302      	orrs	r2, r0
 80012e8:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012ea:	07db      	lsls	r3, r3, #31
 80012ec:	d522      	bpl.n	8001334 <HAL_RCC_ClockConfig+0xa8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ee:	4b41      	ldr	r3, [pc, #260]	; (80013f4 <HAL_RCC_ClockConfig+0x168>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012f0:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f2:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012f4:	2a01      	cmp	r2, #1
 80012f6:	d071      	beq.n	80013dc <HAL_RCC_ClockConfig+0x150>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012f8:	2a02      	cmp	r2, #2
 80012fa:	d06a      	beq.n	80013d2 <HAL_RCC_ClockConfig+0x146>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012fc:	079b      	lsls	r3, r3, #30
 80012fe:	d5dc      	bpl.n	80012ba <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001300:	2103      	movs	r1, #3
 8001302:	4e3c      	ldr	r6, [pc, #240]	; (80013f4 <HAL_RCC_ClockConfig+0x168>)
 8001304:	6873      	ldr	r3, [r6, #4]
 8001306:	438b      	bics	r3, r1
 8001308:	4313      	orrs	r3, r2
 800130a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800130c:	f7ff fbbc 	bl	8000a88 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001310:	230c      	movs	r3, #12
 8001312:	4698      	mov	r8, r3
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001314:	4b38      	ldr	r3, [pc, #224]	; (80013f8 <HAL_RCC_ClockConfig+0x16c>)
    tickstart = HAL_GetTick();
 8001316:	0007      	movs	r7, r0
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001318:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800131a:	e004      	b.n	8001326 <HAL_RCC_ClockConfig+0x9a>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800131c:	f7ff fbb4 	bl	8000a88 <HAL_GetTick>
 8001320:	1bc0      	subs	r0, r0, r7
 8001322:	4548      	cmp	r0, r9
 8001324:	d85d      	bhi.n	80013e2 <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001326:	4643      	mov	r3, r8
 8001328:	6872      	ldr	r2, [r6, #4]
 800132a:	401a      	ands	r2, r3
 800132c:	6863      	ldr	r3, [r4, #4]
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	429a      	cmp	r2, r3
 8001332:	d1f3      	bne.n	800131c <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001334:	2101      	movs	r1, #1
 8001336:	4a2e      	ldr	r2, [pc, #184]	; (80013f0 <HAL_RCC_ClockConfig+0x164>)
 8001338:	6813      	ldr	r3, [r2, #0]
 800133a:	400b      	ands	r3, r1
 800133c:	42ab      	cmp	r3, r5
 800133e:	d905      	bls.n	800134c <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001340:	6813      	ldr	r3, [r2, #0]
 8001342:	438b      	bics	r3, r1
 8001344:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001346:	6813      	ldr	r3, [r2, #0]
 8001348:	4219      	tst	r1, r3
 800134a:	d1b6      	bne.n	80012ba <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800134c:	6823      	ldr	r3, [r4, #0]
 800134e:	075b      	lsls	r3, r3, #29
 8001350:	d424      	bmi.n	800139c <HAL_RCC_ClockConfig+0x110>
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001352:	4669      	mov	r1, sp
 8001354:	000a      	movs	r2, r1
 8001356:	4b29      	ldr	r3, [pc, #164]	; (80013fc <HAL_RCC_ClockConfig+0x170>)
 8001358:	cb31      	ldmia	r3!, {r0, r4, r5}
 800135a:	c231      	stmia	r2!, {r0, r4, r5}
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	6013      	str	r3, [r2, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001360:	aa04      	add	r2, sp, #16
 8001362:	0010      	movs	r0, r2
 8001364:	4b26      	ldr	r3, [pc, #152]	; (8001400 <HAL_RCC_ClockConfig+0x174>)
 8001366:	cb70      	ldmia	r3!, {r4, r5, r6}
 8001368:	c070      	stmia	r0!, {r4, r5, r6}
 800136a:	681b      	ldr	r3, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 800136c:	4d21      	ldr	r5, [pc, #132]	; (80013f4 <HAL_RCC_ClockConfig+0x168>)
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800136e:	6003      	str	r3, [r0, #0]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001370:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8001372:	6868      	ldr	r0, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001374:	4003      	ands	r3, r0
 8001376:	2b04      	cmp	r3, #4
 8001378:	d02e      	beq.n	80013d8 <HAL_RCC_ClockConfig+0x14c>
 800137a:	2b08      	cmp	r3, #8
 800137c:	d016      	beq.n	80013ac <HAL_RCC_ClockConfig+0x120>
 800137e:	4821      	ldr	r0, [pc, #132]	; (8001404 <HAL_RCC_ClockConfig+0x178>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001380:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <HAL_RCC_ClockConfig+0x168>)
 8001382:	4a21      	ldr	r2, [pc, #132]	; (8001408 <HAL_RCC_ClockConfig+0x17c>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	061b      	lsls	r3, r3, #24
 8001388:	0f1b      	lsrs	r3, r3, #28
 800138a:	5cd3      	ldrb	r3, [r2, r3]
 800138c:	40d8      	lsrs	r0, r3
 800138e:	4b1f      	ldr	r3, [pc, #124]	; (800140c <HAL_RCC_ClockConfig+0x180>)
 8001390:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001392:	2003      	movs	r0, #3
 8001394:	f7ff fb36 	bl	8000a04 <HAL_InitTick>
  return HAL_OK;
 8001398:	2000      	movs	r0, #0
 800139a:	e78f      	b.n	80012bc <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800139c:	4a15      	ldr	r2, [pc, #84]	; (80013f4 <HAL_RCC_ClockConfig+0x168>)
 800139e:	491c      	ldr	r1, [pc, #112]	; (8001410 <HAL_RCC_ClockConfig+0x184>)
 80013a0:	6853      	ldr	r3, [r2, #4]
 80013a2:	400b      	ands	r3, r1
 80013a4:	68e1      	ldr	r1, [r4, #12]
 80013a6:	430b      	orrs	r3, r1
 80013a8:	6053      	str	r3, [r2, #4]
 80013aa:	e7d2      	b.n	8001352 <HAL_RCC_ClockConfig+0xc6>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80013ac:	0c84      	lsrs	r4, r0, #18
 80013ae:	3307      	adds	r3, #7
 80013b0:	401c      	ands	r4, r3
 80013b2:	5d0c      	ldrb	r4, [r1, r4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80013b4:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80013b6:	400b      	ands	r3, r1
 80013b8:	5cd1      	ldrb	r1, [r2, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80013ba:	23c0      	movs	r3, #192	; 0xc0
 80013bc:	025b      	lsls	r3, r3, #9
 80013be:	4018      	ands	r0, r3
 80013c0:	2380      	movs	r3, #128	; 0x80
 80013c2:	025b      	lsls	r3, r3, #9
 80013c4:	4298      	cmp	r0, r3
 80013c6:	d00e      	beq.n	80013e6 <HAL_RCC_ClockConfig+0x15a>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80013c8:	480e      	ldr	r0, [pc, #56]	; (8001404 <HAL_RCC_ClockConfig+0x178>)
 80013ca:	f7fe fea7 	bl	800011c <__udivsi3>
 80013ce:	4360      	muls	r0, r4
 80013d0:	e7d6      	b.n	8001380 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013d2:	019b      	lsls	r3, r3, #6
 80013d4:	d494      	bmi.n	8001300 <HAL_RCC_ClockConfig+0x74>
 80013d6:	e770      	b.n	80012ba <HAL_RCC_ClockConfig+0x2e>
      sysclockfreq = HSE_VALUE;
 80013d8:	480e      	ldr	r0, [pc, #56]	; (8001414 <HAL_RCC_ClockConfig+0x188>)
 80013da:	e7d1      	b.n	8001380 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013dc:	039b      	lsls	r3, r3, #14
 80013de:	d48f      	bmi.n	8001300 <HAL_RCC_ClockConfig+0x74>
 80013e0:	e76b      	b.n	80012ba <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 80013e2:	2003      	movs	r0, #3
 80013e4:	e76a      	b.n	80012bc <HAL_RCC_ClockConfig+0x30>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80013e6:	480b      	ldr	r0, [pc, #44]	; (8001414 <HAL_RCC_ClockConfig+0x188>)
 80013e8:	f7fe fe98 	bl	800011c <__udivsi3>
 80013ec:	4360      	muls	r0, r4
 80013ee:	e7c7      	b.n	8001380 <HAL_RCC_ClockConfig+0xf4>
 80013f0:	40022000 	.word	0x40022000
 80013f4:	40021000 	.word	0x40021000
 80013f8:	00001388 	.word	0x00001388
 80013fc:	080033b0 	.word	0x080033b0
 8001400:	080033c4 	.word	0x080033c4
 8001404:	007a1200 	.word	0x007a1200
 8001408:	08003398 	.word	0x08003398
 800140c:	20000000 	.word	0x20000000
 8001410:	fffff8ff 	.word	0xfffff8ff
 8001414:	00b71b00 	.word	0x00b71b00

08001418 <HAL_RCC_GetSysClockFreq>:
{
 8001418:	b570      	push	{r4, r5, r6, lr}
 800141a:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800141c:	4669      	mov	r1, sp
 800141e:	000a      	movs	r2, r1
 8001420:	4b18      	ldr	r3, [pc, #96]	; (8001484 <HAL_RCC_GetSysClockFreq+0x6c>)
 8001422:	cb31      	ldmia	r3!, {r0, r4, r5}
 8001424:	c231      	stmia	r2!, {r0, r4, r5}
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	6013      	str	r3, [r2, #0]
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800142a:	aa04      	add	r2, sp, #16
 800142c:	0010      	movs	r0, r2
 800142e:	4b16      	ldr	r3, [pc, #88]	; (8001488 <HAL_RCC_GetSysClockFreq+0x70>)
 8001430:	cb70      	ldmia	r3!, {r4, r5, r6}
 8001432:	c070      	stmia	r0!, {r4, r5, r6}
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6003      	str	r3, [r0, #0]
  switch (tmpreg & RCC_CFGR_SWS)
 8001438:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 800143a:	4814      	ldr	r0, [pc, #80]	; (800148c <HAL_RCC_GetSysClockFreq+0x74>)
 800143c:	6844      	ldr	r4, [r0, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800143e:	4023      	ands	r3, r4
 8001440:	2b04      	cmp	r3, #4
 8001442:	d017      	beq.n	8001474 <HAL_RCC_GetSysClockFreq+0x5c>
 8001444:	2b08      	cmp	r3, #8
 8001446:	d112      	bne.n	800146e <HAL_RCC_GetSysClockFreq+0x56>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001448:	0ca5      	lsrs	r5, r4, #18
 800144a:	3307      	adds	r3, #7
 800144c:	401d      	ands	r5, r3
 800144e:	5d4d      	ldrb	r5, [r1, r5]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001450:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001452:	400b      	ands	r3, r1
 8001454:	5cd1      	ldrb	r1, [r2, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001456:	23c0      	movs	r3, #192	; 0xc0
 8001458:	025b      	lsls	r3, r3, #9
 800145a:	401c      	ands	r4, r3
 800145c:	2380      	movs	r3, #128	; 0x80
 800145e:	025b      	lsls	r3, r3, #9
 8001460:	429c      	cmp	r4, r3
 8001462:	d009      	beq.n	8001478 <HAL_RCC_GetSysClockFreq+0x60>
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001464:	480a      	ldr	r0, [pc, #40]	; (8001490 <HAL_RCC_GetSysClockFreq+0x78>)
 8001466:	f7fe fe59 	bl	800011c <__udivsi3>
 800146a:	4368      	muls	r0, r5
 800146c:	e000      	b.n	8001470 <HAL_RCC_GetSysClockFreq+0x58>
  switch (tmpreg & RCC_CFGR_SWS)
 800146e:	4808      	ldr	r0, [pc, #32]	; (8001490 <HAL_RCC_GetSysClockFreq+0x78>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001470:	b008      	add	sp, #32
 8001472:	bd70      	pop	{r4, r5, r6, pc}
      sysclockfreq = HSE_VALUE;
 8001474:	4807      	ldr	r0, [pc, #28]	; (8001494 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001476:	e7fb      	b.n	8001470 <HAL_RCC_GetSysClockFreq+0x58>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001478:	4806      	ldr	r0, [pc, #24]	; (8001494 <HAL_RCC_GetSysClockFreq+0x7c>)
 800147a:	f7fe fe4f 	bl	800011c <__udivsi3>
 800147e:	4368      	muls	r0, r5
 8001480:	e7f6      	b.n	8001470 <HAL_RCC_GetSysClockFreq+0x58>
 8001482:	46c0      	nop			; (mov r8, r8)
 8001484:	080033b0 	.word	0x080033b0
 8001488:	080033c4 	.word	0x080033c4
 800148c:	40021000 	.word	0x40021000
 8001490:	007a1200 	.word	0x007a1200
 8001494:	00b71b00 	.word	0x00b71b00

08001498 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001498:	4b04      	ldr	r3, [pc, #16]	; (80014ac <HAL_RCC_GetPCLK1Freq+0x14>)
 800149a:	4a05      	ldr	r2, [pc, #20]	; (80014b0 <HAL_RCC_GetPCLK1Freq+0x18>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	055b      	lsls	r3, r3, #21
 80014a0:	0f5b      	lsrs	r3, r3, #29
 80014a2:	5cd3      	ldrb	r3, [r2, r3]
 80014a4:	4a03      	ldr	r2, [pc, #12]	; (80014b4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80014a6:	6810      	ldr	r0, [r2, #0]
 80014a8:	40d8      	lsrs	r0, r3
}    
 80014aa:	4770      	bx	lr
 80014ac:	40021000 	.word	0x40021000
 80014b0:	080033a8 	.word	0x080033a8
 80014b4:	20000000 	.word	0x20000000

080014b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80014b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ba:	46ce      	mov	lr, r9
 80014bc:	4647      	mov	r7, r8
 80014be:	b580      	push	{r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80014c0:	6803      	ldr	r3, [r0, #0]
{
 80014c2:	0004      	movs	r4, r0
 80014c4:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80014c6:	03da      	lsls	r2, r3, #15
 80014c8:	d532      	bpl.n	8001530 <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ca:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80014cc:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ce:	4b44      	ldr	r3, [pc, #272]	; (80015e0 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 80014d0:	0552      	lsls	r2, r2, #21
 80014d2:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 80014d4:	4680      	mov	r8, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014d6:	4211      	tst	r1, r2
 80014d8:	d04b      	beq.n	8001572 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014da:	2680      	movs	r6, #128	; 0x80
 80014dc:	4d41      	ldr	r5, [pc, #260]	; (80015e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80014de:	0076      	lsls	r6, r6, #1
 80014e0:	682b      	ldr	r3, [r5, #0]
 80014e2:	4233      	tst	r3, r6
 80014e4:	d054      	beq.n	8001590 <HAL_RCCEx_PeriphCLKConfig+0xd8>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80014e6:	4d3e      	ldr	r5, [pc, #248]	; (80015e0 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 80014e8:	22c0      	movs	r2, #192	; 0xc0
 80014ea:	6a2b      	ldr	r3, [r5, #32]
 80014ec:	0092      	lsls	r2, r2, #2
 80014ee:	0018      	movs	r0, r3
 80014f0:	4010      	ands	r0, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80014f2:	4213      	tst	r3, r2
 80014f4:	d06b      	beq.n	80015ce <HAL_RCCEx_PeriphCLKConfig+0x116>
 80014f6:	6861      	ldr	r1, [r4, #4]
 80014f8:	400a      	ands	r2, r1
 80014fa:	4282      	cmp	r2, r0
 80014fc:	d00e      	beq.n	800151c <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80014fe:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001500:	6a28      	ldr	r0, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001502:	6a2e      	ldr	r6, [r5, #32]
 8001504:	0252      	lsls	r2, r2, #9
 8001506:	4332      	orrs	r2, r6
 8001508:	622a      	str	r2, [r5, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800150a:	6a2a      	ldr	r2, [r5, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800150c:	4b36      	ldr	r3, [pc, #216]	; (80015e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 800150e:	4e37      	ldr	r6, [pc, #220]	; (80015ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001510:	4003      	ands	r3, r0
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001512:	4032      	ands	r2, r6
 8001514:	622a      	str	r2, [r5, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001516:	622b      	str	r3, [r5, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001518:	07c3      	lsls	r3, r0, #31
 800151a:	d449      	bmi.n	80015b0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800151c:	4a30      	ldr	r2, [pc, #192]	; (80015e0 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 800151e:	4832      	ldr	r0, [pc, #200]	; (80015e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001520:	6a13      	ldr	r3, [r2, #32]
 8001522:	4003      	ands	r3, r0
 8001524:	430b      	orrs	r3, r1
 8001526:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001528:	4643      	mov	r3, r8
 800152a:	2b01      	cmp	r3, #1
 800152c:	d051      	beq.n	80015d2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
 800152e:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001530:	07da      	lsls	r2, r3, #31
 8001532:	d506      	bpl.n	8001542 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001534:	2003      	movs	r0, #3
 8001536:	492a      	ldr	r1, [pc, #168]	; (80015e0 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8001538:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800153a:	4382      	bics	r2, r0
 800153c:	68a0      	ldr	r0, [r4, #8]
 800153e:	4302      	orrs	r2, r0
 8001540:	630a      	str	r2, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001542:	069a      	lsls	r2, r3, #26
 8001544:	d506      	bpl.n	8001554 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001546:	2010      	movs	r0, #16
 8001548:	4925      	ldr	r1, [pc, #148]	; (80015e0 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 800154a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800154c:	4382      	bics	r2, r0
 800154e:	68e0      	ldr	r0, [r4, #12]
 8001550:	4302      	orrs	r2, r0
 8001552:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001554:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001556:	039b      	lsls	r3, r3, #14
 8001558:	d506      	bpl.n	8001568 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800155a:	2180      	movs	r1, #128	; 0x80
 800155c:	4a20      	ldr	r2, [pc, #128]	; (80015e0 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 800155e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001560:	438b      	bics	r3, r1
 8001562:	6921      	ldr	r1, [r4, #16]
 8001564:	430b      	orrs	r3, r1
 8001566:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001568:	b003      	add	sp, #12
 800156a:	bcc0      	pop	{r6, r7}
 800156c:	46b9      	mov	r9, r7
 800156e:	46b0      	mov	r8, r6
 8001570:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8001572:	69d9      	ldr	r1, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001574:	2680      	movs	r6, #128	; 0x80
    __HAL_RCC_PWR_CLK_ENABLE();
 8001576:	4311      	orrs	r1, r2
 8001578:	61d9      	str	r1, [r3, #28]
 800157a:	69db      	ldr	r3, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800157c:	4d19      	ldr	r5, [pc, #100]	; (80015e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800157e:	401a      	ands	r2, r3
 8001580:	9201      	str	r2, [sp, #4]
 8001582:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001584:	2301      	movs	r3, #1
 8001586:	4698      	mov	r8, r3
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001588:	682b      	ldr	r3, [r5, #0]
 800158a:	0076      	lsls	r6, r6, #1
 800158c:	4233      	tst	r3, r6
 800158e:	d1aa      	bne.n	80014e6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001590:	682b      	ldr	r3, [r5, #0]
 8001592:	4333      	orrs	r3, r6
 8001594:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001596:	f7ff fa77 	bl	8000a88 <HAL_GetTick>
 800159a:	0007      	movs	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800159c:	682b      	ldr	r3, [r5, #0]
 800159e:	4233      	tst	r3, r6
 80015a0:	d1a1      	bne.n	80014e6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015a2:	f7ff fa71 	bl	8000a88 <HAL_GetTick>
 80015a6:	1bc0      	subs	r0, r0, r7
 80015a8:	2864      	cmp	r0, #100	; 0x64
 80015aa:	d9f7      	bls.n	800159c <HAL_RCCEx_PeriphCLKConfig+0xe4>
          return HAL_TIMEOUT;
 80015ac:	2003      	movs	r0, #3
 80015ae:	e7db      	b.n	8001568 <HAL_RCCEx_PeriphCLKConfig+0xb0>
        tickstart = HAL_GetTick();
 80015b0:	f7ff fa6a 	bl	8000a88 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015b4:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <HAL_RCCEx_PeriphCLKConfig+0x138>)
        tickstart = HAL_GetTick();
 80015b6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015b8:	2702      	movs	r7, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ba:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015bc:	e004      	b.n	80015c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015be:	f7ff fa63 	bl	8000a88 <HAL_GetTick>
 80015c2:	1b80      	subs	r0, r0, r6
 80015c4:	4548      	cmp	r0, r9
 80015c6:	d8f1      	bhi.n	80015ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015c8:	6a2b      	ldr	r3, [r5, #32]
 80015ca:	421f      	tst	r7, r3
 80015cc:	d0f7      	beq.n	80015be <HAL_RCCEx_PeriphCLKConfig+0x106>
 80015ce:	6861      	ldr	r1, [r4, #4]
 80015d0:	e7a4      	b.n	800151c <HAL_RCCEx_PeriphCLKConfig+0x64>
      __HAL_RCC_PWR_CLK_DISABLE();
 80015d2:	69d3      	ldr	r3, [r2, #28]
 80015d4:	4907      	ldr	r1, [pc, #28]	; (80015f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80015d6:	400b      	ands	r3, r1
 80015d8:	61d3      	str	r3, [r2, #28]
 80015da:	6823      	ldr	r3, [r4, #0]
 80015dc:	e7a8      	b.n	8001530 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80015de:	46c0      	nop			; (mov r8, r8)
 80015e0:	40021000 	.word	0x40021000
 80015e4:	40007000 	.word	0x40007000
 80015e8:	fffffcff 	.word	0xfffffcff
 80015ec:	fffeffff 	.word	0xfffeffff
 80015f0:	00001388 	.word	0x00001388
 80015f4:	efffffff 	.word	0xefffffff

080015f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80015f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015fa:	46d6      	mov	lr, sl
 80015fc:	464f      	mov	r7, r9
 80015fe:	4646      	mov	r6, r8
 8001600:	0004      	movs	r4, r0
 8001602:	b5c0      	push	{r6, r7, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001604:	2800      	cmp	r0, #0
 8001606:	d100      	bne.n	800160a <HAL_SPI_Init+0x12>
 8001608:	e08e      	b.n	8001728 <HAL_SPI_Init+0x130>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800160a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800160c:	2d00      	cmp	r5, #0
 800160e:	d065      	beq.n	80016dc <HAL_SPI_Init+0xe4>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001610:	2300      	movs	r3, #0
 8001612:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001614:	6143      	str	r3, [r0, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001616:	2300      	movs	r3, #0
 8001618:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800161a:	335d      	adds	r3, #93	; 0x5d
 800161c:	5ce3      	ldrb	r3, [r4, r3]
 800161e:	b2da      	uxtb	r2, r3
 8001620:	2b00      	cmp	r3, #0
 8001622:	d068      	beq.n	80016f6 <HAL_SPI_Init+0xfe>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001624:	235d      	movs	r3, #93	; 0x5d
 8001626:	2202      	movs	r2, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001628:	2140      	movs	r1, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 800162a:	54e2      	strb	r2, [r4, r3]
  __HAL_SPI_DISABLE(hspi);
 800162c:	6822      	ldr	r2, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800162e:	68e0      	ldr	r0, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8001630:	6813      	ldr	r3, [r2, #0]
 8001632:	438b      	bics	r3, r1
 8001634:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001636:	23e0      	movs	r3, #224	; 0xe0
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	4298      	cmp	r0, r3
 800163c:	d962      	bls.n	8001704 <HAL_SPI_Init+0x10c>
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800163e:	23f0      	movs	r3, #240	; 0xf0
 8001640:	011b      	lsls	r3, r3, #4
 8001642:	4298      	cmp	r0, r3
 8001644:	d000      	beq.n	8001648 <HAL_SPI_Init+0x50>
 8001646:	e071      	b.n	800172c <HAL_SPI_Init+0x134>
 8001648:	2380      	movs	r3, #128	; 0x80
 800164a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800164c:	019b      	lsls	r3, r3, #6
 800164e:	4019      	ands	r1, r3
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001650:	2300      	movs	r3, #0
 8001652:	468c      	mov	ip, r1
 8001654:	469a      	mov	sl, r3
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001656:	2382      	movs	r3, #130	; 0x82
 8001658:	6866      	ldr	r6, [r4, #4]
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	4033      	ands	r3, r6
 800165e:	2684      	movs	r6, #132	; 0x84
 8001660:	68a7      	ldr	r7, [r4, #8]
 8001662:	0236      	lsls	r6, r6, #8
 8001664:	403e      	ands	r6, r7
 8001666:	4333      	orrs	r3, r6
 8001668:	2602      	movs	r6, #2
 800166a:	6927      	ldr	r7, [r4, #16]
 800166c:	69a1      	ldr	r1, [r4, #24]
 800166e:	403e      	ands	r6, r7
 8001670:	4333      	orrs	r3, r6
 8001672:	2601      	movs	r6, #1
 8001674:	6967      	ldr	r7, [r4, #20]
 8001676:	46b1      	mov	r9, r6
 8001678:	4037      	ands	r7, r6
 800167a:	433b      	orrs	r3, r7
 800167c:	2780      	movs	r7, #128	; 0x80
 800167e:	00bf      	lsls	r7, r7, #2
 8001680:	400f      	ands	r7, r1
 8001682:	433b      	orrs	r3, r7
 8001684:	2738      	movs	r7, #56	; 0x38
 8001686:	69e6      	ldr	r6, [r4, #28]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001688:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800168a:	4037      	ands	r7, r6
 800168c:	2680      	movs	r6, #128	; 0x80
 800168e:	433b      	orrs	r3, r7
 8001690:	0037      	movs	r7, r6
 8001692:	6a26      	ldr	r6, [r4, #32]
 8001694:	4037      	ands	r7, r6
 8001696:	4666      	mov	r6, ip
 8001698:	433b      	orrs	r3, r7
 800169a:	4333      	orrs	r3, r6
 800169c:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800169e:	2308      	movs	r3, #8
 80016a0:	6b66      	ldr	r6, [r4, #52]	; 0x34
 80016a2:	4657      	mov	r7, sl
 80016a4:	4033      	ands	r3, r6
 80016a6:	26f0      	movs	r6, #240	; 0xf0
 80016a8:	0136      	lsls	r6, r6, #4
 80016aa:	4030      	ands	r0, r6
 80016ac:	4318      	orrs	r0, r3
 80016ae:	2304      	movs	r3, #4
 80016b0:	4019      	ands	r1, r3
 80016b2:	4301      	orrs	r1, r0
 80016b4:	2010      	movs	r0, #16
 80016b6:	4005      	ands	r5, r0
 80016b8:	430d      	orrs	r5, r1
 80016ba:	432f      	orrs	r7, r5
 80016bc:	6057      	str	r7, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80016be:	69d3      	ldr	r3, [r2, #28]
 80016c0:	491c      	ldr	r1, [pc, #112]	; (8001734 <HAL_SPI_Init+0x13c>)
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;

  return HAL_OK;
 80016c2:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80016c4:	400b      	ands	r3, r1
 80016c6:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80016c8:	2300      	movs	r3, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80016ca:	464a      	mov	r2, r9
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80016cc:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80016ce:	335d      	adds	r3, #93	; 0x5d
 80016d0:	54e2      	strb	r2, [r4, r3]
}
 80016d2:	bce0      	pop	{r5, r6, r7}
 80016d4:	46ba      	mov	sl, r7
 80016d6:	46b1      	mov	r9, r6
 80016d8:	46a8      	mov	r8, r5
 80016da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80016dc:	2382      	movs	r3, #130	; 0x82
 80016de:	6842      	ldr	r2, [r0, #4]
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d097      	beq.n	8001616 <HAL_SPI_Init+0x1e>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016e6:	2300      	movs	r3, #0
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016e8:	61c5      	str	r5, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016ea:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80016ec:	335d      	adds	r3, #93	; 0x5d
 80016ee:	5ce3      	ldrb	r3, [r4, r3]
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d196      	bne.n	8001624 <HAL_SPI_Init+0x2c>
    hspi->Lock = HAL_UNLOCKED;
 80016f6:	335c      	adds	r3, #92	; 0x5c
    HAL_SPI_MspInit(hspi);
 80016f8:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 80016fa:	54e2      	strb	r2, [r4, r3]
    HAL_SPI_MspInit(hspi);
 80016fc:	f7fe ff66 	bl	80005cc <HAL_SPI_MspInit>
 8001700:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001702:	e78f      	b.n	8001624 <HAL_SPI_Init+0x2c>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001704:	4298      	cmp	r0, r3
 8001706:	d006      	beq.n	8001716 <HAL_SPI_Init+0x11e>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001708:	2380      	movs	r3, #128	; 0x80
 800170a:	015b      	lsls	r3, r3, #5
 800170c:	469a      	mov	sl, r3
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800170e:	2300      	movs	r3, #0
 8001710:	469c      	mov	ip, r3
 8001712:	62a3      	str	r3, [r4, #40]	; 0x28
 8001714:	e79f      	b.n	8001656 <HAL_SPI_Init+0x5e>
 8001716:	2380      	movs	r3, #128	; 0x80
 8001718:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800171a:	019b      	lsls	r3, r3, #6
 800171c:	4019      	ands	r1, r3
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800171e:	2380      	movs	r3, #128	; 0x80
 8001720:	015b      	lsls	r3, r3, #5
 8001722:	468c      	mov	ip, r1
 8001724:	469a      	mov	sl, r3
 8001726:	e796      	b.n	8001656 <HAL_SPI_Init+0x5e>
    return HAL_ERROR;
 8001728:	2001      	movs	r0, #1
 800172a:	e7d2      	b.n	80016d2 <HAL_SPI_Init+0xda>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800172c:	2300      	movs	r3, #0
 800172e:	469a      	mov	sl, r3
 8001730:	e7ed      	b.n	800170e <HAL_SPI_Init+0x116>
 8001732:	46c0      	nop			; (mov r8, r8)
 8001734:	fffff7ff 	.word	0xfffff7ff

08001738 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001738:	b510      	push	{r4, lr}
 800173a:	1e04      	subs	r4, r0, #0
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800173c:	d05b      	beq.n	80017f6 <HAL_TIM_Base_Init+0xbe>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800173e:	233d      	movs	r3, #61	; 0x3d
 8001740:	5cc3      	ldrb	r3, [r0, r3]
 8001742:	b2da      	uxtb	r2, r3
 8001744:	2b00      	cmp	r3, #0
 8001746:	d048      	beq.n	80017da <HAL_TIM_Base_Init+0xa2>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001748:	233d      	movs	r3, #61	; 0x3d
 800174a:	2202      	movs	r2, #2
 800174c:	54e2      	strb	r2, [r4, r3]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800174e:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001750:	492a      	ldr	r1, [pc, #168]	; (80017fc <HAL_TIM_Base_Init+0xc4>)
  tmpcr1 = TIMx->CR1;
 8001752:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001754:	428a      	cmp	r2, r1
 8001756:	d015      	beq.n	8001784 <HAL_TIM_Base_Init+0x4c>
 8001758:	4929      	ldr	r1, [pc, #164]	; (8001800 <HAL_TIM_Base_Init+0xc8>)
 800175a:	428a      	cmp	r2, r1
 800175c:	d042      	beq.n	80017e4 <HAL_TIM_Base_Init+0xac>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800175e:	4929      	ldr	r1, [pc, #164]	; (8001804 <HAL_TIM_Base_Init+0xcc>)
 8001760:	428a      	cmp	r2, r1
 8001762:	d043      	beq.n	80017ec <HAL_TIM_Base_Init+0xb4>
 8001764:	4928      	ldr	r1, [pc, #160]	; (8001808 <HAL_TIM_Base_Init+0xd0>)
 8001766:	428a      	cmp	r2, r1
 8001768:	d010      	beq.n	800178c <HAL_TIM_Base_Init+0x54>
 800176a:	4928      	ldr	r1, [pc, #160]	; (800180c <HAL_TIM_Base_Init+0xd4>)
 800176c:	428a      	cmp	r2, r1
 800176e:	d00d      	beq.n	800178c <HAL_TIM_Base_Init+0x54>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001770:	2180      	movs	r1, #128	; 0x80
 8001772:	438b      	bics	r3, r1
 8001774:	69a1      	ldr	r1, [r4, #24]
 8001776:	430b      	orrs	r3, r1

  TIMx->CR1 = tmpcr1;
 8001778:	6013      	str	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800177a:	68e3      	ldr	r3, [r4, #12]
 800177c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800177e:	6863      	ldr	r3, [r4, #4]
 8001780:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001782:	e012      	b.n	80017aa <HAL_TIM_Base_Init+0x72>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001784:	2170      	movs	r1, #112	; 0x70
 8001786:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 8001788:	68a1      	ldr	r1, [r4, #8]
 800178a:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800178c:	4920      	ldr	r1, [pc, #128]	; (8001810 <HAL_TIM_Base_Init+0xd8>)
 800178e:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001790:	6921      	ldr	r1, [r4, #16]
 8001792:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001794:	2180      	movs	r1, #128	; 0x80
 8001796:	438b      	bics	r3, r1
 8001798:	69a1      	ldr	r1, [r4, #24]
 800179a:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800179c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800179e:	68e3      	ldr	r3, [r4, #12]
 80017a0:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80017a2:	6863      	ldr	r3, [r4, #4]
 80017a4:	6293      	str	r3, [r2, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80017a6:	6963      	ldr	r3, [r4, #20]
 80017a8:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80017aa:	2301      	movs	r3, #1
 80017ac:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017ae:	2246      	movs	r2, #70	; 0x46
  return HAL_OK;
 80017b0:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017b2:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017b4:	3a08      	subs	r2, #8
 80017b6:	54a3      	strb	r3, [r4, r2]
 80017b8:	3201      	adds	r2, #1
 80017ba:	54a3      	strb	r3, [r4, r2]
 80017bc:	3201      	adds	r2, #1
 80017be:	54a3      	strb	r3, [r4, r2]
 80017c0:	3201      	adds	r2, #1
 80017c2:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017c4:	3201      	adds	r2, #1
 80017c6:	54a3      	strb	r3, [r4, r2]
 80017c8:	3201      	adds	r2, #1
 80017ca:	54a3      	strb	r3, [r4, r2]
 80017cc:	3201      	adds	r2, #1
 80017ce:	54a3      	strb	r3, [r4, r2]
 80017d0:	3201      	adds	r2, #1
 80017d2:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80017d4:	3a08      	subs	r2, #8
 80017d6:	54a3      	strb	r3, [r4, r2]
}
 80017d8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80017da:	333c      	adds	r3, #60	; 0x3c
 80017dc:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 80017de:	f7fe ff2b 	bl	8000638 <HAL_TIM_Base_MspInit>
 80017e2:	e7b1      	b.n	8001748 <HAL_TIM_Base_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017e4:	2170      	movs	r1, #112	; 0x70
 80017e6:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 80017e8:	68a1      	ldr	r1, [r4, #8]
 80017ea:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80017ec:	4908      	ldr	r1, [pc, #32]	; (8001810 <HAL_TIM_Base_Init+0xd8>)
 80017ee:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017f0:	6921      	ldr	r1, [r4, #16]
 80017f2:	430b      	orrs	r3, r1
 80017f4:	e7bc      	b.n	8001770 <HAL_TIM_Base_Init+0x38>
    return HAL_ERROR;
 80017f6:	2001      	movs	r0, #1
 80017f8:	e7ee      	b.n	80017d8 <HAL_TIM_Base_Init+0xa0>
 80017fa:	46c0      	nop			; (mov r8, r8)
 80017fc:	40012c00 	.word	0x40012c00
 8001800:	40000400 	.word	0x40000400
 8001804:	40002000 	.word	0x40002000
 8001808:	40014400 	.word	0x40014400
 800180c:	40014800 	.word	0x40014800
 8001810:	fffffcff 	.word	0xfffffcff

08001814 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8001814:	223d      	movs	r2, #61	; 0x3d
 8001816:	5c81      	ldrb	r1, [r0, r2]
{
 8001818:	0003      	movs	r3, r0
    return HAL_ERROR;
 800181a:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 800181c:	2901      	cmp	r1, #1
 800181e:	d10f      	bne.n	8001840 <HAL_TIM_Base_Start_IT+0x2c>
  htim->State = HAL_TIM_STATE_BUSY;
 8001820:	3101      	adds	r1, #1
 8001822:	5499      	strb	r1, [r3, r2]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	68da      	ldr	r2, [r3, #12]
 8001828:	4302      	orrs	r2, r0
 800182a:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800182c:	4a0b      	ldr	r2, [pc, #44]	; (800185c <HAL_TIM_Base_Start_IT+0x48>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d007      	beq.n	8001842 <HAL_TIM_Base_Start_IT+0x2e>
 8001832:	4a0b      	ldr	r2, [pc, #44]	; (8001860 <HAL_TIM_Base_Start_IT+0x4c>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d004      	beq.n	8001842 <HAL_TIM_Base_Start_IT+0x2e>
    __HAL_TIM_ENABLE(htim);
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	4310      	orrs	r0, r2
 800183c:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 800183e:	2000      	movs	r0, #0
}
 8001840:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001842:	2207      	movs	r2, #7
 8001844:	6899      	ldr	r1, [r3, #8]
 8001846:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001848:	2a06      	cmp	r2, #6
 800184a:	d005      	beq.n	8001858 <HAL_TIM_Base_Start_IT+0x44>
      __HAL_TIM_ENABLE(htim);
 800184c:	2101      	movs	r1, #1
 800184e:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8001850:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8001852:	430a      	orrs	r2, r1
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	e7f3      	b.n	8001840 <HAL_TIM_Base_Start_IT+0x2c>
  return HAL_OK;
 8001858:	2000      	movs	r0, #0
 800185a:	e7f1      	b.n	8001840 <HAL_TIM_Base_Start_IT+0x2c>
 800185c:	40012c00 	.word	0x40012c00
 8001860:	40000400 	.word	0x40000400

08001864 <HAL_TIM_PeriodElapsedCallback>:
 8001864:	4770      	bx	lr
 8001866:	46c0      	nop			; (mov r8, r8)

08001868 <HAL_TIM_OC_DelayElapsedCallback>:
 8001868:	4770      	bx	lr
 800186a:	46c0      	nop			; (mov r8, r8)

0800186c <HAL_TIM_IC_CaptureCallback>:
 800186c:	4770      	bx	lr
 800186e:	46c0      	nop			; (mov r8, r8)

08001870 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001870:	4770      	bx	lr
 8001872:	46c0      	nop			; (mov r8, r8)

08001874 <HAL_TIM_TriggerCallback>:
 8001874:	4770      	bx	lr
 8001876:	46c0      	nop			; (mov r8, r8)

08001878 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001878:	2202      	movs	r2, #2
 800187a:	6803      	ldr	r3, [r0, #0]
{
 800187c:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800187e:	6919      	ldr	r1, [r3, #16]
{
 8001880:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001882:	420a      	tst	r2, r1
 8001884:	d002      	beq.n	800188c <HAL_TIM_IRQHandler+0x14>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001886:	68d9      	ldr	r1, [r3, #12]
 8001888:	420a      	tst	r2, r1
 800188a:	d165      	bne.n	8001958 <HAL_TIM_IRQHandler+0xe0>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800188c:	2204      	movs	r2, #4
 800188e:	6919      	ldr	r1, [r3, #16]
 8001890:	420a      	tst	r2, r1
 8001892:	d002      	beq.n	800189a <HAL_TIM_IRQHandler+0x22>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001894:	68d9      	ldr	r1, [r3, #12]
 8001896:	420a      	tst	r2, r1
 8001898:	d14b      	bne.n	8001932 <HAL_TIM_IRQHandler+0xba>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800189a:	2208      	movs	r2, #8
 800189c:	6919      	ldr	r1, [r3, #16]
 800189e:	420a      	tst	r2, r1
 80018a0:	d002      	beq.n	80018a8 <HAL_TIM_IRQHandler+0x30>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80018a2:	68d9      	ldr	r1, [r3, #12]
 80018a4:	420a      	tst	r2, r1
 80018a6:	d133      	bne.n	8001910 <HAL_TIM_IRQHandler+0x98>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80018a8:	2210      	movs	r2, #16
 80018aa:	6919      	ldr	r1, [r3, #16]
 80018ac:	420a      	tst	r2, r1
 80018ae:	d002      	beq.n	80018b6 <HAL_TIM_IRQHandler+0x3e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80018b0:	68d9      	ldr	r1, [r3, #12]
 80018b2:	420a      	tst	r2, r1
 80018b4:	d11c      	bne.n	80018f0 <HAL_TIM_IRQHandler+0x78>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80018b6:	2201      	movs	r2, #1
 80018b8:	6919      	ldr	r1, [r3, #16]
 80018ba:	420a      	tst	r2, r1
 80018bc:	d002      	beq.n	80018c4 <HAL_TIM_IRQHandler+0x4c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80018be:	68d9      	ldr	r1, [r3, #12]
 80018c0:	420a      	tst	r2, r1
 80018c2:	d15c      	bne.n	800197e <HAL_TIM_IRQHandler+0x106>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80018c4:	2280      	movs	r2, #128	; 0x80
 80018c6:	6919      	ldr	r1, [r3, #16]
 80018c8:	420a      	tst	r2, r1
 80018ca:	d002      	beq.n	80018d2 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80018cc:	68d9      	ldr	r1, [r3, #12]
 80018ce:	420a      	tst	r2, r1
 80018d0:	d15c      	bne.n	800198c <HAL_TIM_IRQHandler+0x114>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80018d2:	2240      	movs	r2, #64	; 0x40
 80018d4:	6919      	ldr	r1, [r3, #16]
 80018d6:	420a      	tst	r2, r1
 80018d8:	d002      	beq.n	80018e0 <HAL_TIM_IRQHandler+0x68>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80018da:	68d9      	ldr	r1, [r3, #12]
 80018dc:	420a      	tst	r2, r1
 80018de:	d15d      	bne.n	800199c <HAL_TIM_IRQHandler+0x124>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80018e0:	2220      	movs	r2, #32
 80018e2:	6919      	ldr	r1, [r3, #16]
 80018e4:	420a      	tst	r2, r1
 80018e6:	d002      	beq.n	80018ee <HAL_TIM_IRQHandler+0x76>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80018e8:	68d9      	ldr	r1, [r3, #12]
 80018ea:	420a      	tst	r2, r1
 80018ec:	d141      	bne.n	8001972 <HAL_TIM_IRQHandler+0xfa>
}
 80018ee:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80018f0:	3a21      	subs	r2, #33	; 0x21
 80018f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80018f4:	3219      	adds	r2, #25
 80018f6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80018f8:	69da      	ldr	r2, [r3, #28]
 80018fa:	23c0      	movs	r3, #192	; 0xc0
 80018fc:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80018fe:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001900:	421a      	tst	r2, r3
 8001902:	d05e      	beq.n	80019c2 <HAL_TIM_IRQHandler+0x14a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001904:	f7ff ffb2 	bl	800186c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001908:	2300      	movs	r3, #0
 800190a:	7723      	strb	r3, [r4, #28]
 800190c:	6823      	ldr	r3, [r4, #0]
 800190e:	e7d2      	b.n	80018b6 <HAL_TIM_IRQHandler+0x3e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001910:	3a11      	subs	r2, #17
 8001912:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001914:	320d      	adds	r2, #13
 8001916:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001918:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800191a:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800191c:	079b      	lsls	r3, r3, #30
 800191e:	d14d      	bne.n	80019bc <HAL_TIM_IRQHandler+0x144>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001920:	f7ff ffa2 	bl	8001868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001924:	0020      	movs	r0, r4
 8001926:	f7ff ffa3 	bl	8001870 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800192a:	2300      	movs	r3, #0
 800192c:	7723      	strb	r3, [r4, #28]
 800192e:	6823      	ldr	r3, [r4, #0]
 8001930:	e7ba      	b.n	80018a8 <HAL_TIM_IRQHandler+0x30>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001932:	3a09      	subs	r2, #9
 8001934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001936:	3207      	adds	r2, #7
 8001938:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800193a:	699a      	ldr	r2, [r3, #24]
 800193c:	23c0      	movs	r3, #192	; 0xc0
 800193e:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8001940:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001942:	421a      	tst	r2, r3
 8001944:	d137      	bne.n	80019b6 <HAL_TIM_IRQHandler+0x13e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001946:	f7ff ff8f 	bl	8001868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800194a:	0020      	movs	r0, r4
 800194c:	f7ff ff90 	bl	8001870 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001950:	2300      	movs	r3, #0
 8001952:	7723      	strb	r3, [r4, #28]
 8001954:	6823      	ldr	r3, [r4, #0]
 8001956:	e7a0      	b.n	800189a <HAL_TIM_IRQHandler+0x22>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001958:	3a05      	subs	r2, #5
 800195a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800195c:	3204      	adds	r2, #4
 800195e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	079b      	lsls	r3, r3, #30
 8001964:	d021      	beq.n	80019aa <HAL_TIM_IRQHandler+0x132>
          HAL_TIM_IC_CaptureCallback(htim);
 8001966:	f7ff ff81 	bl	800186c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800196a:	2300      	movs	r3, #0
 800196c:	7723      	strb	r3, [r4, #28]
 800196e:	6823      	ldr	r3, [r4, #0]
 8001970:	e78c      	b.n	800188c <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001972:	3a41      	subs	r2, #65	; 0x41
      HAL_TIMEx_CommutCallback(htim);
 8001974:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001976:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8001978:	f000 f82a 	bl	80019d0 <HAL_TIMEx_CommutCallback>
}
 800197c:	e7b7      	b.n	80018ee <HAL_TIM_IRQHandler+0x76>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800197e:	3a03      	subs	r2, #3
 8001980:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001982:	0020      	movs	r0, r4
 8001984:	f7ff ff6e 	bl	8001864 <HAL_TIM_PeriodElapsedCallback>
 8001988:	6823      	ldr	r3, [r4, #0]
 800198a:	e79b      	b.n	80018c4 <HAL_TIM_IRQHandler+0x4c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800198c:	3a02      	subs	r2, #2
 800198e:	3aff      	subs	r2, #255	; 0xff
 8001990:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001992:	0020      	movs	r0, r4
 8001994:	f000 f81e 	bl	80019d4 <HAL_TIMEx_BreakCallback>
 8001998:	6823      	ldr	r3, [r4, #0]
 800199a:	e79a      	b.n	80018d2 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800199c:	3a81      	subs	r2, #129	; 0x81
 800199e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80019a0:	0020      	movs	r0, r4
 80019a2:	f7ff ff67 	bl	8001874 <HAL_TIM_TriggerCallback>
 80019a6:	6823      	ldr	r3, [r4, #0]
 80019a8:	e79a      	b.n	80018e0 <HAL_TIM_IRQHandler+0x68>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80019aa:	f7ff ff5d 	bl	8001868 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019ae:	0020      	movs	r0, r4
 80019b0:	f7ff ff5e 	bl	8001870 <HAL_TIM_PWM_PulseFinishedCallback>
 80019b4:	e7d9      	b.n	800196a <HAL_TIM_IRQHandler+0xf2>
        HAL_TIM_IC_CaptureCallback(htim);
 80019b6:	f7ff ff59 	bl	800186c <HAL_TIM_IC_CaptureCallback>
 80019ba:	e7c9      	b.n	8001950 <HAL_TIM_IRQHandler+0xd8>
        HAL_TIM_IC_CaptureCallback(htim);
 80019bc:	f7ff ff56 	bl	800186c <HAL_TIM_IC_CaptureCallback>
 80019c0:	e7b3      	b.n	800192a <HAL_TIM_IRQHandler+0xb2>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019c2:	f7ff ff51 	bl	8001868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019c6:	0020      	movs	r0, r4
 80019c8:	f7ff ff52 	bl	8001870 <HAL_TIM_PWM_PulseFinishedCallback>
 80019cc:	e79c      	b.n	8001908 <HAL_TIM_IRQHandler+0x90>
 80019ce:	46c0      	nop			; (mov r8, r8)

080019d0 <HAL_TIMEx_CommutCallback>:
 80019d0:	4770      	bx	lr
 80019d2:	46c0      	nop			; (mov r8, r8)

080019d4 <HAL_TIMEx_BreakCallback>:
 80019d4:	4770      	bx	lr
 80019d6:	46c0      	nop			; (mov r8, r8)

080019d8 <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80019d8:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 80019da:	b530      	push	{r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80019dc:	2b21      	cmp	r3, #33	; 0x21
 80019de:	d000      	beq.n	80019e2 <UART_TxISR_16BIT+0xa>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80019e0:	bd30      	pop	{r4, r5, pc}
    if (huart->TxXferCount == 0U)
 80019e2:	3331      	adds	r3, #49	; 0x31
 80019e4:	5ac2      	ldrh	r2, [r0, r3]
 80019e6:	2a00      	cmp	r2, #0
 80019e8:	d117      	bne.n	8001a1a <UART_TxISR_16BIT+0x42>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80019ea:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019ee:	3201      	adds	r2, #1
 80019f0:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80019f4:	2580      	movs	r5, #128	; 0x80
 80019f6:	6801      	ldr	r1, [r0, #0]
 80019f8:	680b      	ldr	r3, [r1, #0]
 80019fa:	43ab      	bics	r3, r5
 80019fc:	600b      	str	r3, [r1, #0]
 80019fe:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a02:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a06:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001a0a:	6802      	ldr	r2, [r0, #0]
 8001a0c:	2040      	movs	r0, #64	; 0x40
 8001a0e:	6813      	ldr	r3, [r2, #0]
 8001a10:	4303      	orrs	r3, r0
 8001a12:	6013      	str	r3, [r2, #0]
 8001a14:	f381 8810 	msr	PRIMASK, r1
}
 8001a18:	e7e2      	b.n	80019e0 <UART_TxISR_16BIT+0x8>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001a1a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8001a1c:	6804      	ldr	r4, [r0, #0]
 8001a1e:	880a      	ldrh	r2, [r1, #0]
      huart->pTxBuffPtr += 2U;
 8001a20:	3102      	adds	r1, #2
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8001a22:	05d2      	lsls	r2, r2, #23
 8001a24:	0dd2      	lsrs	r2, r2, #23
 8001a26:	8522      	strh	r2, [r4, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8001a28:	64c1      	str	r1, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8001a2a:	5ac2      	ldrh	r2, [r0, r3]
 8001a2c:	3a01      	subs	r2, #1
 8001a2e:	b292      	uxth	r2, r2
 8001a30:	52c2      	strh	r2, [r0, r3]
}
 8001a32:	e7d5      	b.n	80019e0 <UART_TxISR_16BIT+0x8>

08001a34 <UART_TxISR_8BIT>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001a34:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 8001a36:	b530      	push	{r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001a38:	2b21      	cmp	r3, #33	; 0x21
 8001a3a:	d000      	beq.n	8001a3e <UART_TxISR_8BIT+0xa>
}
 8001a3c:	bd30      	pop	{r4, r5, pc}
    if (huart->TxXferCount == 0U)
 8001a3e:	3331      	adds	r3, #49	; 0x31
 8001a40:	5ac2      	ldrh	r2, [r0, r3]
 8001a42:	2a00      	cmp	r2, #0
 8001a44:	d117      	bne.n	8001a76 <UART_TxISR_8BIT+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a46:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a4a:	3201      	adds	r2, #1
 8001a4c:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001a50:	2580      	movs	r5, #128	; 0x80
 8001a52:	6801      	ldr	r1, [r0, #0]
 8001a54:	680b      	ldr	r3, [r1, #0]
 8001a56:	43ab      	bics	r3, r5
 8001a58:	600b      	str	r3, [r1, #0]
 8001a5a:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a5e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a62:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001a66:	6802      	ldr	r2, [r0, #0]
 8001a68:	2040      	movs	r0, #64	; 0x40
 8001a6a:	6813      	ldr	r3, [r2, #0]
 8001a6c:	4303      	orrs	r3, r0
 8001a6e:	6013      	str	r3, [r2, #0]
 8001a70:	f381 8810 	msr	PRIMASK, r1
}
 8001a74:	e7e2      	b.n	8001a3c <UART_TxISR_8BIT+0x8>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8001a76:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001a78:	6804      	ldr	r4, [r0, #0]
 8001a7a:	7811      	ldrb	r1, [r2, #0]
      huart->pTxBuffPtr++;
 8001a7c:	3201      	adds	r2, #1
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8001a7e:	8521      	strh	r1, [r4, #40]	; 0x28
      huart->pTxBuffPtr++;
 8001a80:	64c2      	str	r2, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8001a82:	5ac2      	ldrh	r2, [r0, r3]
 8001a84:	3a01      	subs	r2, #1
 8001a86:	b292      	uxth	r2, r2
 8001a88:	52c2      	strh	r2, [r0, r3]
}
 8001a8a:	e7d7      	b.n	8001a3c <UART_TxISR_8BIT+0x8>

08001a8c <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8001a8c:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 8001a8e:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8001a90:	2b20      	cmp	r3, #32
 8001a92:	d133      	bne.n	8001afc <HAL_UART_Transmit_IT+0x70>
    if ((pData == NULL) || (Size == 0U))
 8001a94:	2900      	cmp	r1, #0
 8001a96:	d02f      	beq.n	8001af8 <HAL_UART_Transmit_IT+0x6c>
 8001a98:	2a00      	cmp	r2, #0
 8001a9a:	d02d      	beq.n	8001af8 <HAL_UART_Transmit_IT+0x6c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a9c:	2380      	movs	r3, #128	; 0x80
 8001a9e:	6884      	ldr	r4, [r0, #8]
 8001aa0:	015b      	lsls	r3, r3, #5
 8001aa2:	429c      	cmp	r4, r3
 8001aa4:	d020      	beq.n	8001ae8 <HAL_UART_Transmit_IT+0x5c>
    __HAL_LOCK(huart);
 8001aa6:	2374      	movs	r3, #116	; 0x74
 8001aa8:	5cc3      	ldrb	r3, [r0, r3]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d026      	beq.n	8001afc <HAL_UART_Transmit_IT+0x70>
    huart->TxXferSize  = Size;
 8001aae:	2350      	movs	r3, #80	; 0x50
    huart->pTxBuffPtr  = pData;
 8001ab0:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8001ab2:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 8001ab4:	3302      	adds	r3, #2
 8001ab6:	52c2      	strh	r2, [r0, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ab8:	2200      	movs	r2, #0
 8001aba:	332e      	adds	r3, #46	; 0x2e
 8001abc:	50c2      	str	r2, [r0, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001abe:	3b5f      	subs	r3, #95	; 0x5f
 8001ac0:	6783      	str	r3, [r0, #120]	; 0x78
      huart->TxISR = UART_TxISR_8BIT;
 8001ac2:	4b17      	ldr	r3, [pc, #92]	; (8001b20 <HAL_UART_Transmit_IT+0x94>)
 8001ac4:	6683      	str	r3, [r0, #104]	; 0x68
    __HAL_UNLOCK(huart);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2374      	movs	r3, #116	; 0x74
 8001aca:	54c2      	strb	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001acc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ad0:	3b73      	subs	r3, #115	; 0x73
 8001ad2:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001ad6:	6802      	ldr	r2, [r0, #0]
 8001ad8:	2080      	movs	r0, #128	; 0x80
 8001ada:	6813      	ldr	r3, [r2, #0]
 8001adc:	4303      	orrs	r3, r0
 8001ade:	6013      	str	r3, [r2, #0]
 8001ae0:	f381 8810 	msr	PRIMASK, r1
    return HAL_OK;
 8001ae4:	2000      	movs	r0, #0
}
 8001ae6:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ae8:	6903      	ldr	r3, [r0, #16]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1db      	bne.n	8001aa6 <HAL_UART_Transmit_IT+0x1a>
      if ((((uint32_t)pData) & 1U) != 0U)
 8001aee:	3301      	adds	r3, #1
 8001af0:	001c      	movs	r4, r3
 8001af2:	400c      	ands	r4, r1
 8001af4:	4219      	tst	r1, r3
 8001af6:	d003      	beq.n	8001b00 <HAL_UART_Transmit_IT+0x74>
      return HAL_ERROR;
 8001af8:	2001      	movs	r0, #1
 8001afa:	e7f4      	b.n	8001ae6 <HAL_UART_Transmit_IT+0x5a>
    return HAL_BUSY;
 8001afc:	2002      	movs	r0, #2
 8001afe:	e7f2      	b.n	8001ae6 <HAL_UART_Transmit_IT+0x5a>
    __HAL_LOCK(huart);
 8001b00:	2374      	movs	r3, #116	; 0x74
 8001b02:	5cc3      	ldrb	r3, [r0, r3]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d0f9      	beq.n	8001afc <HAL_UART_Transmit_IT+0x70>
    huart->TxXferSize  = Size;
 8001b08:	2350      	movs	r3, #80	; 0x50
    huart->pTxBuffPtr  = pData;
 8001b0a:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8001b0c:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 8001b0e:	3302      	adds	r3, #2
 8001b10:	52c2      	strh	r2, [r0, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b12:	332e      	adds	r3, #46	; 0x2e
 8001b14:	50c4      	str	r4, [r0, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b16:	3b5f      	subs	r3, #95	; 0x5f
 8001b18:	6783      	str	r3, [r0, #120]	; 0x78
      huart->TxISR = UART_TxISR_16BIT;
 8001b1a:	4b02      	ldr	r3, [pc, #8]	; (8001b24 <HAL_UART_Transmit_IT+0x98>)
 8001b1c:	e7d2      	b.n	8001ac4 <HAL_UART_Transmit_IT+0x38>
 8001b1e:	46c0      	nop			; (mov r8, r8)
 8001b20:	08001a35 	.word	0x08001a35
 8001b24:	080019d9 	.word	0x080019d9

08001b28 <HAL_UART_ErrorCallback>:
 8001b28:	4770      	bx	lr
 8001b2a:	46c0      	nop			; (mov r8, r8)

08001b2c <UART_DMAAbortOnError>:
  huart->RxXferCount = 0U;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	225a      	movs	r2, #90	; 0x5a
{
 8001b30:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001b32:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8001b34:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 8001b36:	3a08      	subs	r2, #8
 8001b38:	5283      	strh	r3, [r0, r2]
  HAL_UART_ErrorCallback(huart);
 8001b3a:	f7ff fff5 	bl	8001b28 <HAL_UART_ErrorCallback>
}
 8001b3e:	bd10      	pop	{r4, pc}

08001b40 <HAL_UARTEx_RxEventCallback>:
}
 8001b40:	4770      	bx	lr
 8001b42:	46c0      	nop			; (mov r8, r8)

08001b44 <HAL_UART_IRQHandler>:
{
 8001b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b46:	46ce      	mov	lr, r9
 8001b48:	4647      	mov	r7, r8
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001b4a:	6802      	ldr	r2, [r0, #0]
{
 8001b4c:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001b4e:	69d3      	ldr	r3, [r2, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001b50:	48bc      	ldr	r0, [pc, #752]	; (8001e44 <HAL_UART_IRQHandler+0x300>)
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001b52:	6811      	ldr	r1, [r2, #0]
{
 8001b54:	b580      	push	{r7, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001b56:	6895      	ldr	r5, [r2, #8]
  if (errorflags == 0U)
 8001b58:	4203      	tst	r3, r0
 8001b5a:	d000      	beq.n	8001b5e <HAL_UART_IRQHandler+0x1a>
 8001b5c:	e074      	b.n	8001c48 <HAL_UART_IRQHandler+0x104>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001b5e:	2020      	movs	r0, #32
 8001b60:	4218      	tst	r0, r3
 8001b62:	d002      	beq.n	8001b6a <HAL_UART_IRQHandler+0x26>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001b64:	4208      	tst	r0, r1
 8001b66:	d000      	beq.n	8001b6a <HAL_UART_IRQHandler+0x26>
 8001b68:	e10a      	b.n	8001d80 <HAL_UART_IRQHandler+0x23c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001b6a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001b6c:	2801      	cmp	r0, #1
 8001b6e:	d014      	beq.n	8001b9a <HAL_UART_IRQHandler+0x56>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8001b70:	2280      	movs	r2, #128	; 0x80
 8001b72:	421a      	tst	r2, r3
 8001b74:	d109      	bne.n	8001b8a <HAL_UART_IRQHandler+0x46>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001b76:	2240      	movs	r2, #64	; 0x40
 8001b78:	421a      	tst	r2, r3
 8001b7a:	d002      	beq.n	8001b82 <HAL_UART_IRQHandler+0x3e>
 8001b7c:	420a      	tst	r2, r1
 8001b7e:	d000      	beq.n	8001b82 <HAL_UART_IRQHandler+0x3e>
 8001b80:	e103      	b.n	8001d8a <HAL_UART_IRQHandler+0x246>
}
 8001b82:	bcc0      	pop	{r6, r7}
 8001b84:	46b9      	mov	r9, r7
 8001b86:	46b0      	mov	r8, r6
 8001b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8001b8a:	420a      	tst	r2, r1
 8001b8c:	d0f3      	beq.n	8001b76 <HAL_UART_IRQHandler+0x32>
    if (huart->TxISR != NULL)
 8001b8e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d0f6      	beq.n	8001b82 <HAL_UART_IRQHandler+0x3e>
      huart->TxISR(huart);
 8001b94:	0020      	movs	r0, r4
 8001b96:	4798      	blx	r3
 8001b98:	e7f3      	b.n	8001b82 <HAL_UART_IRQHandler+0x3e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8001b9a:	2510      	movs	r5, #16
 8001b9c:	421d      	tst	r5, r3
 8001b9e:	d0e7      	beq.n	8001b70 <HAL_UART_IRQHandler+0x2c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8001ba0:	420d      	tst	r5, r1
 8001ba2:	d0e5      	beq.n	8001b70 <HAL_UART_IRQHandler+0x2c>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ba4:	2340      	movs	r3, #64	; 0x40
 8001ba6:	001e      	movs	r6, r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8001ba8:	6215      	str	r5, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001baa:	6892      	ldr	r2, [r2, #8]
 8001bac:	4016      	ands	r6, r2
 8001bae:	4213      	tst	r3, r2
 8001bb0:	d100      	bne.n	8001bb4 <HAL_UART_IRQHandler+0x70>
 8001bb2:	e108      	b.n	8001dc6 <HAL_UART_IRQHandler+0x282>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001bb4:	6f26      	ldr	r6, [r4, #112]	; 0x70
 8001bb6:	6832      	ldr	r2, [r6, #0]
 8001bb8:	6852      	ldr	r2, [r2, #4]
 8001bba:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8001bbc:	2a00      	cmp	r2, #0
 8001bbe:	d0e0      	beq.n	8001b82 <HAL_UART_IRQHandler+0x3e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001bc0:	2158      	movs	r1, #88	; 0x58
 8001bc2:	4688      	mov	r8, r1
 8001bc4:	5a61      	ldrh	r1, [r4, r1]
 8001bc6:	4291      	cmp	r1, r2
 8001bc8:	d9db      	bls.n	8001b82 <HAL_UART_IRQHandler+0x3e>
        huart->RxXferCount = nb_remaining_rx_data;
 8001bca:	275a      	movs	r7, #90	; 0x5a
 8001bcc:	53e2      	strh	r2, [r4, r7]
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001bce:	69b2      	ldr	r2, [r6, #24]
 8001bd0:	2a20      	cmp	r2, #32
 8001bd2:	d031      	beq.n	8001c38 <HAL_UART_IRQHandler+0xf4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001bd4:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bd8:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001bdc:	6821      	ldr	r1, [r4, #0]
 8001bde:	4f9a      	ldr	r7, [pc, #616]	; (8001e48 <HAL_UART_IRQHandler+0x304>)
 8001be0:	680a      	ldr	r2, [r1, #0]
 8001be2:	403a      	ands	r2, r7
 8001be4:	600a      	str	r2, [r1, #0]
 8001be6:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001bea:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bee:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bf2:	6821      	ldr	r1, [r4, #0]
 8001bf4:	688a      	ldr	r2, [r1, #8]
 8001bf6:	4382      	bics	r2, r0
 8001bf8:	608a      	str	r2, [r1, #8]
 8001bfa:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001bfe:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c02:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c06:	6821      	ldr	r1, [r4, #0]
 8001c08:	688a      	ldr	r2, [r1, #8]
 8001c0a:	439a      	bics	r2, r3
 8001c0c:	608a      	str	r2, [r1, #8]
 8001c0e:	f386 8810 	msr	PRIMASK, r6
          huart->RxState = HAL_UART_STATE_READY;
 8001c12:	3b20      	subs	r3, #32
 8001c14:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c16:	2300      	movs	r3, #0
 8001c18:	6623      	str	r3, [r4, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c1a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c1e:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c22:	6822      	ldr	r2, [r4, #0]
 8001c24:	6813      	ldr	r3, [r2, #0]
 8001c26:	43ab      	bics	r3, r5
 8001c28:	6013      	str	r3, [r2, #0]
 8001c2a:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001c2e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001c30:	f7fe ff88 	bl	8000b44 <HAL_DMA_Abort>
 8001c34:	4643      	mov	r3, r8
 8001c36:	5ae1      	ldrh	r1, [r4, r3]
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001c38:	235a      	movs	r3, #90	; 0x5a
 8001c3a:	5ae3      	ldrh	r3, [r4, r3]
 8001c3c:	0020      	movs	r0, r4
 8001c3e:	1ac9      	subs	r1, r1, r3
 8001c40:	b289      	uxth	r1, r1
 8001c42:	f7ff ff7d 	bl	8001b40 <HAL_UARTEx_RxEventCallback>
 8001c46:	e79c      	b.n	8001b82 <HAL_UART_IRQHandler+0x3e>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001c48:	2601      	movs	r6, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001c4a:	4880      	ldr	r0, [pc, #512]	; (8001e4c <HAL_UART_IRQHandler+0x308>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001c4c:	4035      	ands	r5, r6
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001c4e:	4008      	ands	r0, r1
 8001c50:	4328      	orrs	r0, r5
 8001c52:	d100      	bne.n	8001c56 <HAL_UART_IRQHandler+0x112>
 8001c54:	e789      	b.n	8001b6a <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001c56:	421e      	tst	r6, r3
 8001c58:	d006      	beq.n	8001c68 <HAL_UART_IRQHandler+0x124>
 8001c5a:	05c8      	lsls	r0, r1, #23
 8001c5c:	d504      	bpl.n	8001c68 <HAL_UART_IRQHandler+0x124>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001c5e:	2780      	movs	r7, #128	; 0x80
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001c60:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001c62:	59e0      	ldr	r0, [r4, r7]
 8001c64:	4306      	orrs	r6, r0
 8001c66:	51e6      	str	r6, [r4, r7]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001c68:	2002      	movs	r0, #2
 8001c6a:	4218      	tst	r0, r3
 8001c6c:	d07c      	beq.n	8001d68 <HAL_UART_IRQHandler+0x224>
 8001c6e:	2d00      	cmp	r5, #0
 8001c70:	d007      	beq.n	8001c82 <HAL_UART_IRQHandler+0x13e>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001c72:	2780      	movs	r7, #128	; 0x80
 8001c74:	2604      	movs	r6, #4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001c76:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001c78:	59e0      	ldr	r0, [r4, r7]
 8001c7a:	4330      	orrs	r0, r6
 8001c7c:	51e0      	str	r0, [r4, r7]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001c7e:	421e      	tst	r6, r3
 8001c80:	d176      	bne.n	8001d70 <HAL_UART_IRQHandler+0x22c>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001c82:	2608      	movs	r6, #8
 8001c84:	421e      	tst	r6, r3
 8001c86:	d008      	beq.n	8001c9a <HAL_UART_IRQHandler+0x156>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001c88:	2020      	movs	r0, #32
 8001c8a:	4008      	ands	r0, r1
 8001c8c:	4305      	orrs	r5, r0
 8001c8e:	d004      	beq.n	8001c9a <HAL_UART_IRQHandler+0x156>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001c90:	2580      	movs	r5, #128	; 0x80
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001c92:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001c94:	5960      	ldr	r0, [r4, r5]
 8001c96:	4306      	orrs	r6, r0
 8001c98:	5166      	str	r6, [r4, r5]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001c9a:	2080      	movs	r0, #128	; 0x80
 8001c9c:	0100      	lsls	r0, r0, #4
 8001c9e:	4203      	tst	r3, r0
 8001ca0:	d007      	beq.n	8001cb2 <HAL_UART_IRQHandler+0x16e>
 8001ca2:	014d      	lsls	r5, r1, #5
 8001ca4:	d505      	bpl.n	8001cb2 <HAL_UART_IRQHandler+0x16e>
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001ca6:	2580      	movs	r5, #128	; 0x80
 8001ca8:	2620      	movs	r6, #32
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001caa:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001cac:	5960      	ldr	r0, [r4, r5]
 8001cae:	4330      	orrs	r0, r6
 8001cb0:	5160      	str	r0, [r4, r5]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001cb2:	2080      	movs	r0, #128	; 0x80
 8001cb4:	5820      	ldr	r0, [r4, r0]
 8001cb6:	2800      	cmp	r0, #0
 8001cb8:	d100      	bne.n	8001cbc <HAL_UART_IRQHandler+0x178>
 8001cba:	e762      	b.n	8001b82 <HAL_UART_IRQHandler+0x3e>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001cbc:	2020      	movs	r0, #32
 8001cbe:	4218      	tst	r0, r3
 8001cc0:	d001      	beq.n	8001cc6 <HAL_UART_IRQHandler+0x182>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001cc2:	4208      	tst	r0, r1
 8001cc4:	d178      	bne.n	8001db8 <HAL_UART_IRQHandler+0x274>
      errorcode = huart->ErrorCode;
 8001cc6:	2680      	movs	r6, #128	; 0x80
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001cc8:	2540      	movs	r5, #64	; 0x40
      errorcode = huart->ErrorCode;
 8001cca:	59a1      	ldr	r1, [r4, r6]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001ccc:	6893      	ldr	r3, [r2, #8]
 8001cce:	401d      	ands	r5, r3
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001cd0:	2328      	movs	r3, #40	; 0x28
 8001cd2:	400b      	ands	r3, r1
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001cd4:	431d      	orrs	r5, r3
 8001cd6:	d100      	bne.n	8001cda <HAL_UART_IRQHandler+0x196>
 8001cd8:	e0af      	b.n	8001e3a <HAL_UART_IRQHandler+0x2f6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001cda:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ce4:	6821      	ldr	r1, [r4, #0]
 8001ce6:	4d5a      	ldr	r5, [pc, #360]	; (8001e50 <HAL_UART_IRQHandler+0x30c>)
 8001ce8:	680b      	ldr	r3, [r1, #0]
 8001cea:	402b      	ands	r3, r5
 8001cec:	600b      	str	r3, [r1, #0]
 8001cee:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001cf2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cf6:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cfa:	6821      	ldr	r1, [r4, #0]
 8001cfc:	688b      	ldr	r3, [r1, #8]
 8001cfe:	4393      	bics	r3, r2
 8001d00:	608b      	str	r3, [r1, #8]
 8001d02:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d06:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d10a      	bne.n	8001d22 <HAL_UART_IRQHandler+0x1de>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d0c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d10:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d14:	2010      	movs	r0, #16
 8001d16:	6822      	ldr	r2, [r4, #0]
 8001d18:	6813      	ldr	r3, [r2, #0]
 8001d1a:	4383      	bics	r3, r0
 8001d1c:	6013      	str	r3, [r2, #0]
 8001d1e:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8001d22:	2320      	movs	r3, #32
 8001d24:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d26:	2300      	movs	r3, #0
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d28:	2240      	movs	r2, #64	; 0x40
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d2a:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 8001d2c:	6663      	str	r3, [r4, #100]	; 0x64
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d2e:	6823      	ldr	r3, [r4, #0]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	421a      	tst	r2, r3
 8001d34:	d03c      	beq.n	8001db0 <HAL_UART_IRQHandler+0x26c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d36:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d40:	6821      	ldr	r1, [r4, #0]
 8001d42:	688b      	ldr	r3, [r1, #8]
 8001d44:	4393      	bics	r3, r2
 8001d46:	608b      	str	r3, [r1, #8]
 8001d48:	f380 8810 	msr	PRIMASK, r0
          if (huart->hdmarx != NULL)
 8001d4c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001d4e:	2800      	cmp	r0, #0
 8001d50:	d02e      	beq.n	8001db0 <HAL_UART_IRQHandler+0x26c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001d52:	4b40      	ldr	r3, [pc, #256]	; (8001e54 <HAL_UART_IRQHandler+0x310>)
 8001d54:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001d56:	f7fe ff15 	bl	8000b84 <HAL_DMA_Abort_IT>
 8001d5a:	2800      	cmp	r0, #0
 8001d5c:	d100      	bne.n	8001d60 <HAL_UART_IRQHandler+0x21c>
 8001d5e:	e710      	b.n	8001b82 <HAL_UART_IRQHandler+0x3e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001d60:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001d62:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001d64:	4798      	blx	r3
 8001d66:	e70c      	b.n	8001b82 <HAL_UART_IRQHandler+0x3e>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001d68:	0758      	lsls	r0, r3, #29
 8001d6a:	d58a      	bpl.n	8001c82 <HAL_UART_IRQHandler+0x13e>
 8001d6c:	2d00      	cmp	r5, #0
 8001d6e:	d088      	beq.n	8001c82 <HAL_UART_IRQHandler+0x13e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001d70:	2004      	movs	r0, #4
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001d72:	2680      	movs	r6, #128	; 0x80
 8001d74:	2702      	movs	r7, #2
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001d76:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001d78:	59a0      	ldr	r0, [r4, r6]
 8001d7a:	4338      	orrs	r0, r7
 8001d7c:	51a0      	str	r0, [r4, r6]
 8001d7e:	e780      	b.n	8001c82 <HAL_UART_IRQHandler+0x13e>
      if (huart->RxISR != NULL)
 8001d80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d000      	beq.n	8001d88 <HAL_UART_IRQHandler+0x244>
 8001d86:	e705      	b.n	8001b94 <HAL_UART_IRQHandler+0x50>
 8001d88:	e6fb      	b.n	8001b82 <HAL_UART_IRQHandler+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d8a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d8e:	2301      	movs	r3, #1
 8001d90:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001d94:	6821      	ldr	r1, [r4, #0]
 8001d96:	680b      	ldr	r3, [r1, #0]
 8001d98:	4393      	bics	r3, r2
 8001d9a:	600b      	str	r3, [r1, #0]
 8001d9c:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001da0:	2320      	movs	r3, #32
 8001da2:	67a3      	str	r3, [r4, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8001da4:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001da6:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 8001da8:	66a3      	str	r3, [r4, #104]	; 0x68
  HAL_UART_TxCpltCallback(huart);
 8001daa:	f7fe fde7 	bl	800097c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001dae:	e6e8      	b.n	8001b82 <HAL_UART_IRQHandler+0x3e>
            HAL_UART_ErrorCallback(huart);
 8001db0:	0020      	movs	r0, r4
 8001db2:	f7ff feb9 	bl	8001b28 <HAL_UART_ErrorCallback>
 8001db6:	e6e4      	b.n	8001b82 <HAL_UART_IRQHandler+0x3e>
        if (huart->RxISR != NULL)
 8001db8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d083      	beq.n	8001cc6 <HAL_UART_IRQHandler+0x182>
          huart->RxISR(huart);
 8001dbe:	0020      	movs	r0, r4
 8001dc0:	4798      	blx	r3
 8001dc2:	6822      	ldr	r2, [r4, #0]
 8001dc4:	e77f      	b.n	8001cc6 <HAL_UART_IRQHandler+0x182>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001dc6:	225a      	movs	r2, #90	; 0x5a
 8001dc8:	5aa3      	ldrh	r3, [r4, r2]
      if ((huart->RxXferCount > 0U)
 8001dca:	5aa2      	ldrh	r2, [r4, r2]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001dcc:	b29b      	uxth	r3, r3
      if ((huart->RxXferCount > 0U)
 8001dce:	2a00      	cmp	r2, #0
 8001dd0:	d100      	bne.n	8001dd4 <HAL_UART_IRQHandler+0x290>
 8001dd2:	e6d6      	b.n	8001b82 <HAL_UART_IRQHandler+0x3e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001dd4:	2258      	movs	r2, #88	; 0x58
 8001dd6:	5aa1      	ldrh	r1, [r4, r2]
 8001dd8:	1ac9      	subs	r1, r1, r3
 8001dda:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8001ddc:	2900      	cmp	r1, #0
 8001dde:	d100      	bne.n	8001de2 <HAL_UART_IRQHandler+0x29e>
 8001de0:	e6cf      	b.n	8001b82 <HAL_UART_IRQHandler+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001de2:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001de6:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001dea:	6823      	ldr	r3, [r4, #0]
 8001dec:	4699      	mov	r9, r3
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4698      	mov	r8, r3
 8001df2:	4642      	mov	r2, r8
 8001df4:	4b16      	ldr	r3, [pc, #88]	; (8001e50 <HAL_UART_IRQHandler+0x30c>)
 8001df6:	401a      	ands	r2, r3
 8001df8:	0013      	movs	r3, r2
 8001dfa:	464a      	mov	r2, r9
 8001dfc:	6013      	str	r3, [r2, #0]
 8001dfe:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e02:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e06:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e0a:	6822      	ldr	r2, [r4, #0]
 8001e0c:	6893      	ldr	r3, [r2, #8]
 8001e0e:	4383      	bics	r3, r0
 8001e10:	6093      	str	r3, [r2, #8]
 8001e12:	f387 8810 	msr	PRIMASK, r7
        huart->RxState = HAL_UART_STATE_READY;
 8001e16:	2320      	movs	r3, #32
        huart->RxISR = NULL;
 8001e18:	6666      	str	r6, [r4, #100]	; 0x64
        huart->RxState = HAL_UART_STATE_READY;
 8001e1a:	67e3      	str	r3, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e1c:	6626      	str	r6, [r4, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e1e:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e22:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e26:	6822      	ldr	r2, [r4, #0]
 8001e28:	6813      	ldr	r3, [r2, #0]
 8001e2a:	43ab      	bics	r3, r5
 8001e2c:	6013      	str	r3, [r2, #0]
 8001e2e:	f386 8810 	msr	PRIMASK, r6
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001e32:	0020      	movs	r0, r4
 8001e34:	f7ff fe84 	bl	8001b40 <HAL_UARTEx_RxEventCallback>
 8001e38:	e6a3      	b.n	8001b82 <HAL_UART_IRQHandler+0x3e>
        HAL_UART_ErrorCallback(huart);
 8001e3a:	0020      	movs	r0, r4
 8001e3c:	f7ff fe74 	bl	8001b28 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e40:	51a5      	str	r5, [r4, r6]
 8001e42:	e69e      	b.n	8001b82 <HAL_UART_IRQHandler+0x3e>
 8001e44:	0000080f 	.word	0x0000080f
 8001e48:	fffffeff 	.word	0xfffffeff
 8001e4c:	04000120 	.word	0x04000120
 8001e50:	fffffedf 	.word	0xfffffedf
 8001e54:	08001b2d 	.word	0x08001b2d

08001e58 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001e58:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001e5a:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001e5c:	07da      	lsls	r2, r3, #31
 8001e5e:	d506      	bpl.n	8001e6e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001e60:	6801      	ldr	r1, [r0, #0]
 8001e62:	4c28      	ldr	r4, [pc, #160]	; (8001f04 <UART_AdvFeatureConfig+0xac>)
 8001e64:	684a      	ldr	r2, [r1, #4]
 8001e66:	4022      	ands	r2, r4
 8001e68:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001e6a:	4322      	orrs	r2, r4
 8001e6c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001e6e:	079a      	lsls	r2, r3, #30
 8001e70:	d506      	bpl.n	8001e80 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001e72:	6801      	ldr	r1, [r0, #0]
 8001e74:	4c24      	ldr	r4, [pc, #144]	; (8001f08 <UART_AdvFeatureConfig+0xb0>)
 8001e76:	684a      	ldr	r2, [r1, #4]
 8001e78:	4022      	ands	r2, r4
 8001e7a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001e7c:	4322      	orrs	r2, r4
 8001e7e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001e80:	075a      	lsls	r2, r3, #29
 8001e82:	d506      	bpl.n	8001e92 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001e84:	6801      	ldr	r1, [r0, #0]
 8001e86:	4c21      	ldr	r4, [pc, #132]	; (8001f0c <UART_AdvFeatureConfig+0xb4>)
 8001e88:	684a      	ldr	r2, [r1, #4]
 8001e8a:	4022      	ands	r2, r4
 8001e8c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001e8e:	4322      	orrs	r2, r4
 8001e90:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001e92:	071a      	lsls	r2, r3, #28
 8001e94:	d506      	bpl.n	8001ea4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001e96:	6801      	ldr	r1, [r0, #0]
 8001e98:	4c1d      	ldr	r4, [pc, #116]	; (8001f10 <UART_AdvFeatureConfig+0xb8>)
 8001e9a:	684a      	ldr	r2, [r1, #4]
 8001e9c:	4022      	ands	r2, r4
 8001e9e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001ea0:	4322      	orrs	r2, r4
 8001ea2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001ea4:	06da      	lsls	r2, r3, #27
 8001ea6:	d506      	bpl.n	8001eb6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001ea8:	6801      	ldr	r1, [r0, #0]
 8001eaa:	4c1a      	ldr	r4, [pc, #104]	; (8001f14 <UART_AdvFeatureConfig+0xbc>)
 8001eac:	688a      	ldr	r2, [r1, #8]
 8001eae:	4022      	ands	r2, r4
 8001eb0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001eb2:	4322      	orrs	r2, r4
 8001eb4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001eb6:	069a      	lsls	r2, r3, #26
 8001eb8:	d506      	bpl.n	8001ec8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001eba:	6801      	ldr	r1, [r0, #0]
 8001ebc:	4c16      	ldr	r4, [pc, #88]	; (8001f18 <UART_AdvFeatureConfig+0xc0>)
 8001ebe:	688a      	ldr	r2, [r1, #8]
 8001ec0:	4022      	ands	r2, r4
 8001ec2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001ec4:	4322      	orrs	r2, r4
 8001ec6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001ec8:	065a      	lsls	r2, r3, #25
 8001eca:	d50a      	bpl.n	8001ee2 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001ecc:	6801      	ldr	r1, [r0, #0]
 8001ece:	4d13      	ldr	r5, [pc, #76]	; (8001f1c <UART_AdvFeatureConfig+0xc4>)
 8001ed0:	684a      	ldr	r2, [r1, #4]
 8001ed2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001ed4:	402a      	ands	r2, r5
 8001ed6:	4322      	orrs	r2, r4
 8001ed8:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001eda:	2280      	movs	r2, #128	; 0x80
 8001edc:	0352      	lsls	r2, r2, #13
 8001ede:	4294      	cmp	r4, r2
 8001ee0:	d009      	beq.n	8001ef6 <UART_AdvFeatureConfig+0x9e>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001ee2:	061b      	lsls	r3, r3, #24
 8001ee4:	d506      	bpl.n	8001ef4 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001ee6:	6802      	ldr	r2, [r0, #0]
 8001ee8:	490d      	ldr	r1, [pc, #52]	; (8001f20 <UART_AdvFeatureConfig+0xc8>)
 8001eea:	6853      	ldr	r3, [r2, #4]
 8001eec:	400b      	ands	r3, r1
 8001eee:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001ef0:	430b      	orrs	r3, r1
 8001ef2:	6053      	str	r3, [r2, #4]
}
 8001ef4:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001ef6:	684a      	ldr	r2, [r1, #4]
 8001ef8:	4c0a      	ldr	r4, [pc, #40]	; (8001f24 <UART_AdvFeatureConfig+0xcc>)
 8001efa:	4022      	ands	r2, r4
 8001efc:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001efe:	4322      	orrs	r2, r4
 8001f00:	604a      	str	r2, [r1, #4]
 8001f02:	e7ee      	b.n	8001ee2 <UART_AdvFeatureConfig+0x8a>
 8001f04:	fffdffff 	.word	0xfffdffff
 8001f08:	fffeffff 	.word	0xfffeffff
 8001f0c:	fffbffff 	.word	0xfffbffff
 8001f10:	ffff7fff 	.word	0xffff7fff
 8001f14:	ffffefff 	.word	0xffffefff
 8001f18:	ffffdfff 	.word	0xffffdfff
 8001f1c:	ffefffff 	.word	0xffefffff
 8001f20:	fff7ffff 	.word	0xfff7ffff
 8001f24:	ff9fffff 	.word	0xff9fffff

08001f28 <UART_WaitOnFlagUntilTimeout>:
{
 8001f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f2a:	4646      	mov	r6, r8
 8001f2c:	4698      	mov	r8, r3
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001f2e:	2304      	movs	r3, #4
{
 8001f30:	464f      	mov	r7, r9
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001f32:	4699      	mov	r9, r3
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001f34:	2380      	movs	r3, #128	; 0x80
{
 8001f36:	46d6      	mov	lr, sl
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001f38:	011b      	lsls	r3, r3, #4
{
 8001f3a:	b5c0      	push	{r6, r7, lr}
 8001f3c:	0015      	movs	r5, r2
 8001f3e:	0007      	movs	r7, r0
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001f40:	469a      	mov	sl, r3
{
 8001f42:	000c      	movs	r4, r1
 8001f44:	9e08      	ldr	r6, [sp, #32]
 8001f46:	6801      	ldr	r1, [r0, #0]
 8001f48:	1c73      	adds	r3, r6, #1
 8001f4a:	d10c      	bne.n	8001f66 <UART_WaitOnFlagUntilTimeout+0x3e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f4c:	69cb      	ldr	r3, [r1, #28]
 8001f4e:	4023      	ands	r3, r4
 8001f50:	1b1b      	subs	r3, r3, r4
 8001f52:	425a      	negs	r2, r3
 8001f54:	4153      	adcs	r3, r2
 8001f56:	42ab      	cmp	r3, r5
 8001f58:	d0f8      	beq.n	8001f4c <UART_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8001f5a:	2000      	movs	r0, #0
}
 8001f5c:	bce0      	pop	{r5, r6, r7}
 8001f5e:	46ba      	mov	sl, r7
 8001f60:	46b1      	mov	r9, r6
 8001f62:	46a8      	mov	r8, r5
 8001f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f66:	69cb      	ldr	r3, [r1, #28]
 8001f68:	4023      	ands	r3, r4
 8001f6a:	1b1b      	subs	r3, r3, r4
 8001f6c:	425a      	negs	r2, r3
 8001f6e:	4153      	adcs	r3, r2
 8001f70:	42ab      	cmp	r3, r5
 8001f72:	d1f2      	bne.n	8001f5a <UART_WaitOnFlagUntilTimeout+0x32>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f74:	f7fe fd88 	bl	8000a88 <HAL_GetTick>
 8001f78:	4643      	mov	r3, r8
 8001f7a:	1ac0      	subs	r0, r0, r3
 8001f7c:	42b0      	cmp	r0, r6
 8001f7e:	d82b      	bhi.n	8001fd8 <UART_WaitOnFlagUntilTimeout+0xb0>
 8001f80:	2e00      	cmp	r6, #0
 8001f82:	d029      	beq.n	8001fd8 <UART_WaitOnFlagUntilTimeout+0xb0>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001f84:	464a      	mov	r2, r9
 8001f86:	6839      	ldr	r1, [r7, #0]
 8001f88:	680b      	ldr	r3, [r1, #0]
 8001f8a:	421a      	tst	r2, r3
 8001f8c:	d0dc      	beq.n	8001f48 <UART_WaitOnFlagUntilTimeout+0x20>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001f8e:	4652      	mov	r2, sl
 8001f90:	69cb      	ldr	r3, [r1, #28]
 8001f92:	4213      	tst	r3, r2
 8001f94:	d0d8      	beq.n	8001f48 <UART_WaitOnFlagUntilTimeout+0x20>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001f96:	620a      	str	r2, [r1, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f98:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001fa2:	6839      	ldr	r1, [r7, #0]
 8001fa4:	4c1b      	ldr	r4, [pc, #108]	; (8002014 <UART_WaitOnFlagUntilTimeout+0xec>)
 8001fa6:	680b      	ldr	r3, [r1, #0]
 8001fa8:	4023      	ands	r3, r4
 8001faa:	600b      	str	r3, [r1, #0]
 8001fac:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fb0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fb4:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fb8:	6839      	ldr	r1, [r7, #0]
 8001fba:	688b      	ldr	r3, [r1, #8]
 8001fbc:	4393      	bics	r3, r2
 8001fbe:	608b      	str	r3, [r1, #8]
 8001fc0:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 8001fc4:	2320      	movs	r3, #32
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001fc6:	327f      	adds	r2, #127	; 0x7f
          huart->gState = HAL_UART_STATE_READY;
 8001fc8:	67bb      	str	r3, [r7, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8001fca:	67fb      	str	r3, [r7, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001fcc:	50bb      	str	r3, [r7, r2]
          __HAL_UNLOCK(huart);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	3354      	adds	r3, #84	; 0x54
          return HAL_TIMEOUT;
 8001fd2:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8001fd4:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 8001fd6:	e7c1      	b.n	8001f5c <UART_WaitOnFlagUntilTimeout+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fd8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001fe2:	6839      	ldr	r1, [r7, #0]
 8001fe4:	4c0b      	ldr	r4, [pc, #44]	; (8002014 <UART_WaitOnFlagUntilTimeout+0xec>)
 8001fe6:	680b      	ldr	r3, [r1, #0]
 8001fe8:	4023      	ands	r3, r4
 8001fea:	600b      	str	r3, [r1, #0]
 8001fec:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ff0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ff4:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ff8:	6839      	ldr	r1, [r7, #0]
 8001ffa:	688b      	ldr	r3, [r1, #8]
 8001ffc:	4393      	bics	r3, r2
 8001ffe:	608b      	str	r3, [r1, #8]
 8002000:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 8002004:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 8002006:	2200      	movs	r2, #0
        huart->gState = HAL_UART_STATE_READY;
 8002008:	67bb      	str	r3, [r7, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800200a:	67fb      	str	r3, [r7, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 800200c:	3354      	adds	r3, #84	; 0x54
        return HAL_TIMEOUT;
 800200e:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 8002010:	54fa      	strb	r2, [r7, r3]
        return HAL_TIMEOUT;
 8002012:	e7a3      	b.n	8001f5c <UART_WaitOnFlagUntilTimeout+0x34>
 8002014:	fffffe5f 	.word	0xfffffe5f

08002018 <HAL_UART_Init>:
{
 8002018:	b570      	push	{r4, r5, r6, lr}
 800201a:	0004      	movs	r4, r0
 800201c:	b082      	sub	sp, #8
  if (huart == NULL)
 800201e:	2800      	cmp	r0, #0
 8002020:	d100      	bne.n	8002024 <HAL_UART_Init+0xc>
 8002022:	e0cf      	b.n	80021c4 <HAL_UART_Init+0x1ac>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002024:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8002026:	2b00      	cmp	r3, #0
 8002028:	d064      	beq.n	80020f4 <HAL_UART_Init+0xdc>
  huart->gState = HAL_UART_STATE_BUSY;
 800202a:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800202c:	2101      	movs	r1, #1
  huart->gState = HAL_UART_STATE_BUSY;
 800202e:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8002030:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002032:	6920      	ldr	r0, [r4, #16]
  __HAL_UART_DISABLE(huart);
 8002034:	681a      	ldr	r2, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002036:	69e5      	ldr	r5, [r4, #28]
  __HAL_UART_DISABLE(huart);
 8002038:	438a      	bics	r2, r1
 800203a:	601a      	str	r2, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800203c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800203e:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002040:	4302      	orrs	r2, r0
 8002042:	6960      	ldr	r0, [r4, #20]
 8002044:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002046:	486b      	ldr	r0, [pc, #428]	; (80021f4 <HAL_UART_Init+0x1dc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002048:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800204a:	4001      	ands	r1, r0
 800204c:	430a      	orrs	r2, r1
 800204e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	4969      	ldr	r1, [pc, #420]	; (80021f8 <HAL_UART_Init+0x1e0>)
  tmpreg |= huart->Init.OneBitSampling;
 8002054:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002056:	400a      	ands	r2, r1
 8002058:	68e1      	ldr	r1, [r4, #12]
 800205a:	430a      	orrs	r2, r1
 800205c:	605a      	str	r2, [r3, #4]
  tmpreg |= huart->Init.OneBitSampling;
 800205e:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002060:	6899      	ldr	r1, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8002062:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002064:	4865      	ldr	r0, [pc, #404]	; (80021fc <HAL_UART_Init+0x1e4>)
 8002066:	4001      	ands	r1, r0
 8002068:	430a      	orrs	r2, r1
 800206a:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800206c:	4a64      	ldr	r2, [pc, #400]	; (8002200 <HAL_UART_Init+0x1e8>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d008      	beq.n	8002084 <HAL_UART_Init+0x6c>
 8002072:	4a64      	ldr	r2, [pc, #400]	; (8002204 <HAL_UART_Init+0x1ec>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d00c      	beq.n	8002092 <HAL_UART_Init+0x7a>
  huart->RxISR = NULL;
 8002078:	2300      	movs	r3, #0
    return HAL_ERROR;
 800207a:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800207c:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 800207e:	66a3      	str	r3, [r4, #104]	; 0x68
}
 8002080:	b002      	add	sp, #8
 8002082:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002084:	4b60      	ldr	r3, [pc, #384]	; (8002208 <HAL_UART_Init+0x1f0>)
 8002086:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002088:	2303      	movs	r3, #3
 800208a:	4013      	ands	r3, r2
 800208c:	3b01      	subs	r3, #1
 800208e:	2b02      	cmp	r3, #2
 8002090:	d935      	bls.n	80020fe <HAL_UART_Init+0xe6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002092:	2380      	movs	r3, #128	; 0x80
 8002094:	021b      	lsls	r3, r3, #8
 8002096:	429d      	cmp	r5, r3
 8002098:	d058      	beq.n	800214c <HAL_UART_Init+0x134>
        pclk = HAL_RCC_GetPCLK1Freq();
 800209a:	f7ff f9fd 	bl	8001498 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800209e:	2800      	cmp	r0, #0
 80020a0:	d13b      	bne.n	800211a <HAL_UART_Init+0x102>
  huart->RxISR = NULL;
 80020a2:	2300      	movs	r3, #0
 80020a4:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 80020a6:	66a3      	str	r3, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80020a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d14a      	bne.n	8002144 <HAL_UART_Init+0x12c>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80020ae:	6823      	ldr	r3, [r4, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80020b0:	2508      	movs	r5, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	4955      	ldr	r1, [pc, #340]	; (800220c <HAL_UART_Init+0x1f4>)
 80020b6:	400a      	ands	r2, r1
  __HAL_UART_ENABLE(huart);
 80020b8:	2101      	movs	r1, #1
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80020ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80020bc:	689a      	ldr	r2, [r3, #8]
 80020be:	43aa      	bics	r2, r5
 80020c0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020c8:	2380      	movs	r3, #128	; 0x80
 80020ca:	2200      	movs	r2, #0
 80020cc:	50e2      	str	r2, [r4, r3]
  tickstart = HAL_GetTick();
 80020ce:	f7fe fcdb 	bl	8000a88 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80020d2:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80020d4:	0006      	movs	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	4215      	tst	r5, r2
 80020da:	d157      	bne.n	800218c <HAL_UART_Init+0x174>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	075b      	lsls	r3, r3, #29
 80020e0:	d463      	bmi.n	80021aa <HAL_UART_Init+0x192>
  huart->gState = HAL_UART_STATE_READY;
 80020e2:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80020e4:	2274      	movs	r2, #116	; 0x74
  huart->gState = HAL_UART_STATE_READY;
 80020e6:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80020e8:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020ea:	2300      	movs	r3, #0
  return HAL_OK;
 80020ec:	2000      	movs	r0, #0
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020ee:	6623      	str	r3, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 80020f0:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 80020f2:	e7c5      	b.n	8002080 <HAL_UART_Init+0x68>
    huart->Lock = HAL_UNLOCKED;
 80020f4:	2274      	movs	r2, #116	; 0x74
 80020f6:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 80020f8:	f7fe fabe 	bl	8000678 <HAL_UART_MspInit>
 80020fc:	e795      	b.n	800202a <HAL_UART_Init+0x12>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020fe:	2080      	movs	r0, #128	; 0x80
 8002100:	4a43      	ldr	r2, [pc, #268]	; (8002210 <HAL_UART_Init+0x1f8>)
 8002102:	0200      	lsls	r0, r0, #8
 8002104:	5cd3      	ldrb	r3, [r2, r3]
 8002106:	4285      	cmp	r5, r0
 8002108:	d061      	beq.n	80021ce <HAL_UART_Init+0x1b6>
    switch (clocksource)
 800210a:	2b04      	cmp	r3, #4
 800210c:	d05c      	beq.n	80021c8 <HAL_UART_Init+0x1b0>
 800210e:	d83a      	bhi.n	8002186 <HAL_UART_Init+0x16e>
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0c2      	beq.n	800209a <HAL_UART_Init+0x82>
 8002114:	2b02      	cmp	r3, #2
 8002116:	d1af      	bne.n	8002078 <HAL_UART_Init+0x60>
        pclk = (uint32_t) HSI_VALUE;
 8002118:	483e      	ldr	r0, [pc, #248]	; (8002214 <HAL_UART_Init+0x1fc>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800211a:	6863      	ldr	r3, [r4, #4]
 800211c:	6861      	ldr	r1, [r4, #4]
 800211e:	085b      	lsrs	r3, r3, #1
 8002120:	1818      	adds	r0, r3, r0
 8002122:	f7fd fffb 	bl	800011c <__udivsi3>
 8002126:	0400      	lsls	r0, r0, #16
 8002128:	0c00      	lsrs	r0, r0, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800212a:	0002      	movs	r2, r0
 800212c:	4b3a      	ldr	r3, [pc, #232]	; (8002218 <HAL_UART_Init+0x200>)
 800212e:	3a10      	subs	r2, #16
 8002130:	429a      	cmp	r2, r3
 8002132:	d8a1      	bhi.n	8002078 <HAL_UART_Init+0x60>
        huart->Instance->BRR = usartdiv;
 8002134:	6823      	ldr	r3, [r4, #0]
 8002136:	60d8      	str	r0, [r3, #12]
  huart->RxISR = NULL;
 8002138:	2300      	movs	r3, #0
 800213a:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 800213c:	66a3      	str	r3, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800213e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0b4      	beq.n	80020ae <HAL_UART_Init+0x96>
    UART_AdvFeatureConfig(huart);
 8002144:	0020      	movs	r0, r4
 8002146:	f7ff fe87 	bl	8001e58 <UART_AdvFeatureConfig>
 800214a:	e7b0      	b.n	80020ae <HAL_UART_Init+0x96>
        pclk = HAL_RCC_GetPCLK1Freq();
 800214c:	f7ff f9a4 	bl	8001498 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002150:	2800      	cmp	r0, #0
 8002152:	d0a6      	beq.n	80020a2 <HAL_UART_Init+0x8a>
 8002154:	0040      	lsls	r0, r0, #1
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002156:	6863      	ldr	r3, [r4, #4]
 8002158:	6861      	ldr	r1, [r4, #4]
 800215a:	085b      	lsrs	r3, r3, #1
 800215c:	1818      	adds	r0, r3, r0
 800215e:	f7fd ffdd 	bl	800011c <__udivsi3>
 8002162:	0403      	lsls	r3, r0, #16
 8002164:	0c1a      	lsrs	r2, r3, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002166:	492c      	ldr	r1, [pc, #176]	; (8002218 <HAL_UART_Init+0x200>)
 8002168:	3a10      	subs	r2, #16
 800216a:	428a      	cmp	r2, r1
 800216c:	d900      	bls.n	8002170 <HAL_UART_Init+0x158>
 800216e:	e783      	b.n	8002078 <HAL_UART_Init+0x60>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002170:	4a2a      	ldr	r2, [pc, #168]	; (800221c <HAL_UART_Init+0x204>)
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002172:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002174:	4010      	ands	r0, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002176:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 8002178:	4318      	orrs	r0, r3
  huart->RxISR = NULL;
 800217a:	2300      	movs	r3, #0
        huart->Instance->BRR = brrtemp;
 800217c:	6822      	ldr	r2, [r4, #0]
 800217e:	60d0      	str	r0, [r2, #12]
  huart->RxISR = NULL;
 8002180:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8002182:	66a3      	str	r3, [r4, #104]	; 0x68
  return ret;
 8002184:	e790      	b.n	80020a8 <HAL_UART_Init+0x90>
    switch (clocksource)
 8002186:	2b08      	cmp	r3, #8
 8002188:	d0c7      	beq.n	800211a <HAL_UART_Init+0x102>
 800218a:	e775      	b.n	8002078 <HAL_UART_Init+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800218c:	2180      	movs	r1, #128	; 0x80
 800218e:	4b24      	ldr	r3, [pc, #144]	; (8002220 <HAL_UART_Init+0x208>)
 8002190:	2200      	movs	r2, #0
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	0389      	lsls	r1, r1, #14
 8002196:	0003      	movs	r3, r0
 8002198:	0020      	movs	r0, r4
 800219a:	f7ff fec5 	bl	8001f28 <UART_WaitOnFlagUntilTimeout>
 800219e:	2800      	cmp	r0, #0
 80021a0:	d10e      	bne.n	80021c0 <HAL_UART_Init+0x1a8>
 80021a2:	6823      	ldr	r3, [r4, #0]
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	075b      	lsls	r3, r3, #29
 80021a8:	d59b      	bpl.n	80020e2 <HAL_UART_Init+0xca>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80021aa:	2180      	movs	r1, #128	; 0x80
 80021ac:	4b1c      	ldr	r3, [pc, #112]	; (8002220 <HAL_UART_Init+0x208>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	0020      	movs	r0, r4
 80021b4:	0033      	movs	r3, r6
 80021b6:	03c9      	lsls	r1, r1, #15
 80021b8:	f7ff feb6 	bl	8001f28 <UART_WaitOnFlagUntilTimeout>
 80021bc:	2800      	cmp	r0, #0
 80021be:	d090      	beq.n	80020e2 <HAL_UART_Init+0xca>
      return HAL_TIMEOUT;
 80021c0:	2003      	movs	r0, #3
 80021c2:	e75d      	b.n	8002080 <HAL_UART_Init+0x68>
    return HAL_ERROR;
 80021c4:	2001      	movs	r0, #1
 80021c6:	e75b      	b.n	8002080 <HAL_UART_Init+0x68>
        pclk = HAL_RCC_GetSysClockFreq();
 80021c8:	f7ff f926 	bl	8001418 <HAL_RCC_GetSysClockFreq>
        break;
 80021cc:	e767      	b.n	800209e <HAL_UART_Init+0x86>
    switch (clocksource)
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d007      	beq.n	80021e2 <HAL_UART_Init+0x1ca>
 80021d2:	d809      	bhi.n	80021e8 <HAL_UART_Init+0x1d0>
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0b9      	beq.n	800214c <HAL_UART_Init+0x134>
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d000      	beq.n	80021de <HAL_UART_Init+0x1c6>
 80021dc:	e74c      	b.n	8002078 <HAL_UART_Init+0x60>
 80021de:	4811      	ldr	r0, [pc, #68]	; (8002224 <HAL_UART_Init+0x20c>)
 80021e0:	e7b9      	b.n	8002156 <HAL_UART_Init+0x13e>
        pclk = HAL_RCC_GetSysClockFreq();
 80021e2:	f7ff f919 	bl	8001418 <HAL_RCC_GetSysClockFreq>
        break;
 80021e6:	e7b3      	b.n	8002150 <HAL_UART_Init+0x138>
    switch (clocksource)
 80021e8:	2080      	movs	r0, #128	; 0x80
 80021ea:	0240      	lsls	r0, r0, #9
 80021ec:	2b08      	cmp	r3, #8
 80021ee:	d0b2      	beq.n	8002156 <HAL_UART_Init+0x13e>
 80021f0:	e742      	b.n	8002078 <HAL_UART_Init+0x60>
 80021f2:	46c0      	nop			; (mov r8, r8)
 80021f4:	efff69f3 	.word	0xefff69f3
 80021f8:	ffffcfff 	.word	0xffffcfff
 80021fc:	fffff4ff 	.word	0xfffff4ff
 8002200:	40013800 	.word	0x40013800
 8002204:	40004400 	.word	0x40004400
 8002208:	40021000 	.word	0x40021000
 800220c:	fffff7ff 	.word	0xfffff7ff
 8002210:	080033d8 	.word	0x080033d8
 8002214:	007a1200 	.word	0x007a1200
 8002218:	0000ffef 	.word	0x0000ffef
 800221c:	0000fff0 	.word	0x0000fff0
 8002220:	01ffffff 	.word	0x01ffffff
 8002224:	00f42400 	.word	0x00f42400

08002228 <__assert_func>:
 8002228:	b530      	push	{r4, r5, lr}
 800222a:	0014      	movs	r4, r2
 800222c:	001a      	movs	r2, r3
 800222e:	4b09      	ldr	r3, [pc, #36]	; (8002254 <__assert_func+0x2c>)
 8002230:	0005      	movs	r5, r0
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	b085      	sub	sp, #20
 8002236:	68d8      	ldr	r0, [r3, #12]
 8002238:	4b07      	ldr	r3, [pc, #28]	; (8002258 <__assert_func+0x30>)
 800223a:	2c00      	cmp	r4, #0
 800223c:	d101      	bne.n	8002242 <__assert_func+0x1a>
 800223e:	4b07      	ldr	r3, [pc, #28]	; (800225c <__assert_func+0x34>)
 8002240:	001c      	movs	r4, r3
 8002242:	9301      	str	r3, [sp, #4]
 8002244:	9100      	str	r1, [sp, #0]
 8002246:	002b      	movs	r3, r5
 8002248:	4905      	ldr	r1, [pc, #20]	; (8002260 <__assert_func+0x38>)
 800224a:	9402      	str	r4, [sp, #8]
 800224c:	f000 f810 	bl	8002270 <fiprintf>
 8002250:	f000 fcc0 	bl	8002bd4 <abort>
 8002254:	20000020 	.word	0x20000020
 8002258:	080033db 	.word	0x080033db
 800225c:	08003416 	.word	0x08003416
 8002260:	080033e8 	.word	0x080033e8

08002264 <__errno>:
 8002264:	4b01      	ldr	r3, [pc, #4]	; (800226c <__errno+0x8>)
 8002266:	6818      	ldr	r0, [r3, #0]
 8002268:	4770      	bx	lr
 800226a:	46c0      	nop			; (mov r8, r8)
 800226c:	20000020 	.word	0x20000020

08002270 <fiprintf>:
 8002270:	b40e      	push	{r1, r2, r3}
 8002272:	b503      	push	{r0, r1, lr}
 8002274:	0001      	movs	r1, r0
 8002276:	ab03      	add	r3, sp, #12
 8002278:	4804      	ldr	r0, [pc, #16]	; (800228c <fiprintf+0x1c>)
 800227a:	cb04      	ldmia	r3!, {r2}
 800227c:	6800      	ldr	r0, [r0, #0]
 800227e:	9301      	str	r3, [sp, #4]
 8002280:	f000 f90c 	bl	800249c <_vfiprintf_r>
 8002284:	b002      	add	sp, #8
 8002286:	bc08      	pop	{r3}
 8002288:	b003      	add	sp, #12
 800228a:	4718      	bx	r3
 800228c:	20000020 	.word	0x20000020

08002290 <__libc_init_array>:
 8002290:	b570      	push	{r4, r5, r6, lr}
 8002292:	2600      	movs	r6, #0
 8002294:	4d0c      	ldr	r5, [pc, #48]	; (80022c8 <__libc_init_array+0x38>)
 8002296:	4c0d      	ldr	r4, [pc, #52]	; (80022cc <__libc_init_array+0x3c>)
 8002298:	1b64      	subs	r4, r4, r5
 800229a:	10a4      	asrs	r4, r4, #2
 800229c:	42a6      	cmp	r6, r4
 800229e:	d109      	bne.n	80022b4 <__libc_init_array+0x24>
 80022a0:	2600      	movs	r6, #0
 80022a2:	f001 f801 	bl	80032a8 <_init>
 80022a6:	4d0a      	ldr	r5, [pc, #40]	; (80022d0 <__libc_init_array+0x40>)
 80022a8:	4c0a      	ldr	r4, [pc, #40]	; (80022d4 <__libc_init_array+0x44>)
 80022aa:	1b64      	subs	r4, r4, r5
 80022ac:	10a4      	asrs	r4, r4, #2
 80022ae:	42a6      	cmp	r6, r4
 80022b0:	d105      	bne.n	80022be <__libc_init_array+0x2e>
 80022b2:	bd70      	pop	{r4, r5, r6, pc}
 80022b4:	00b3      	lsls	r3, r6, #2
 80022b6:	58eb      	ldr	r3, [r5, r3]
 80022b8:	4798      	blx	r3
 80022ba:	3601      	adds	r6, #1
 80022bc:	e7ee      	b.n	800229c <__libc_init_array+0xc>
 80022be:	00b3      	lsls	r3, r6, #2
 80022c0:	58eb      	ldr	r3, [r5, r3]
 80022c2:	4798      	blx	r3
 80022c4:	3601      	adds	r6, #1
 80022c6:	e7f2      	b.n	80022ae <__libc_init_array+0x1e>
 80022c8:	080034b0 	.word	0x080034b0
 80022cc:	080034b0 	.word	0x080034b0
 80022d0:	080034b0 	.word	0x080034b0
 80022d4:	080034b4 	.word	0x080034b4

080022d8 <malloc>:
 80022d8:	b510      	push	{r4, lr}
 80022da:	4b03      	ldr	r3, [pc, #12]	; (80022e8 <malloc+0x10>)
 80022dc:	0001      	movs	r1, r0
 80022de:	6818      	ldr	r0, [r3, #0]
 80022e0:	f000 f856 	bl	8002390 <_malloc_r>
 80022e4:	bd10      	pop	{r4, pc}
 80022e6:	46c0      	nop			; (mov r8, r8)
 80022e8:	20000020 	.word	0x20000020

080022ec <memset>:
 80022ec:	0003      	movs	r3, r0
 80022ee:	1882      	adds	r2, r0, r2
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d100      	bne.n	80022f6 <memset+0xa>
 80022f4:	4770      	bx	lr
 80022f6:	7019      	strb	r1, [r3, #0]
 80022f8:	3301      	adds	r3, #1
 80022fa:	e7f9      	b.n	80022f0 <memset+0x4>

080022fc <_free_r>:
 80022fc:	b570      	push	{r4, r5, r6, lr}
 80022fe:	0005      	movs	r5, r0
 8002300:	2900      	cmp	r1, #0
 8002302:	d010      	beq.n	8002326 <_free_r+0x2a>
 8002304:	1f0c      	subs	r4, r1, #4
 8002306:	6823      	ldr	r3, [r4, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	da00      	bge.n	800230e <_free_r+0x12>
 800230c:	18e4      	adds	r4, r4, r3
 800230e:	0028      	movs	r0, r5
 8002310:	f000 feb2 	bl	8003078 <__malloc_lock>
 8002314:	4a1d      	ldr	r2, [pc, #116]	; (800238c <_free_r+0x90>)
 8002316:	6813      	ldr	r3, [r2, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d105      	bne.n	8002328 <_free_r+0x2c>
 800231c:	6063      	str	r3, [r4, #4]
 800231e:	6014      	str	r4, [r2, #0]
 8002320:	0028      	movs	r0, r5
 8002322:	f000 feb1 	bl	8003088 <__malloc_unlock>
 8002326:	bd70      	pop	{r4, r5, r6, pc}
 8002328:	42a3      	cmp	r3, r4
 800232a:	d908      	bls.n	800233e <_free_r+0x42>
 800232c:	6821      	ldr	r1, [r4, #0]
 800232e:	1860      	adds	r0, r4, r1
 8002330:	4283      	cmp	r3, r0
 8002332:	d1f3      	bne.n	800231c <_free_r+0x20>
 8002334:	6818      	ldr	r0, [r3, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	1841      	adds	r1, r0, r1
 800233a:	6021      	str	r1, [r4, #0]
 800233c:	e7ee      	b.n	800231c <_free_r+0x20>
 800233e:	001a      	movs	r2, r3
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <_free_r+0x4e>
 8002346:	42a3      	cmp	r3, r4
 8002348:	d9f9      	bls.n	800233e <_free_r+0x42>
 800234a:	6811      	ldr	r1, [r2, #0]
 800234c:	1850      	adds	r0, r2, r1
 800234e:	42a0      	cmp	r0, r4
 8002350:	d10b      	bne.n	800236a <_free_r+0x6e>
 8002352:	6820      	ldr	r0, [r4, #0]
 8002354:	1809      	adds	r1, r1, r0
 8002356:	1850      	adds	r0, r2, r1
 8002358:	6011      	str	r1, [r2, #0]
 800235a:	4283      	cmp	r3, r0
 800235c:	d1e0      	bne.n	8002320 <_free_r+0x24>
 800235e:	6818      	ldr	r0, [r3, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	1841      	adds	r1, r0, r1
 8002364:	6011      	str	r1, [r2, #0]
 8002366:	6053      	str	r3, [r2, #4]
 8002368:	e7da      	b.n	8002320 <_free_r+0x24>
 800236a:	42a0      	cmp	r0, r4
 800236c:	d902      	bls.n	8002374 <_free_r+0x78>
 800236e:	230c      	movs	r3, #12
 8002370:	602b      	str	r3, [r5, #0]
 8002372:	e7d5      	b.n	8002320 <_free_r+0x24>
 8002374:	6821      	ldr	r1, [r4, #0]
 8002376:	1860      	adds	r0, r4, r1
 8002378:	4283      	cmp	r3, r0
 800237a:	d103      	bne.n	8002384 <_free_r+0x88>
 800237c:	6818      	ldr	r0, [r3, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	1841      	adds	r1, r0, r1
 8002382:	6021      	str	r1, [r4, #0]
 8002384:	6063      	str	r3, [r4, #4]
 8002386:	6054      	str	r4, [r2, #4]
 8002388:	e7ca      	b.n	8002320 <_free_r+0x24>
 800238a:	46c0      	nop			; (mov r8, r8)
 800238c:	2000013c 	.word	0x2000013c

08002390 <_malloc_r>:
 8002390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002392:	2303      	movs	r3, #3
 8002394:	1ccd      	adds	r5, r1, #3
 8002396:	439d      	bics	r5, r3
 8002398:	3508      	adds	r5, #8
 800239a:	0006      	movs	r6, r0
 800239c:	2d0c      	cmp	r5, #12
 800239e:	d21f      	bcs.n	80023e0 <_malloc_r+0x50>
 80023a0:	250c      	movs	r5, #12
 80023a2:	42a9      	cmp	r1, r5
 80023a4:	d81e      	bhi.n	80023e4 <_malloc_r+0x54>
 80023a6:	0030      	movs	r0, r6
 80023a8:	f000 fe66 	bl	8003078 <__malloc_lock>
 80023ac:	4925      	ldr	r1, [pc, #148]	; (8002444 <_malloc_r+0xb4>)
 80023ae:	680a      	ldr	r2, [r1, #0]
 80023b0:	0014      	movs	r4, r2
 80023b2:	2c00      	cmp	r4, #0
 80023b4:	d11a      	bne.n	80023ec <_malloc_r+0x5c>
 80023b6:	4f24      	ldr	r7, [pc, #144]	; (8002448 <_malloc_r+0xb8>)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d104      	bne.n	80023c8 <_malloc_r+0x38>
 80023be:	0021      	movs	r1, r4
 80023c0:	0030      	movs	r0, r6
 80023c2:	f000 fb27 	bl	8002a14 <_sbrk_r>
 80023c6:	6038      	str	r0, [r7, #0]
 80023c8:	0029      	movs	r1, r5
 80023ca:	0030      	movs	r0, r6
 80023cc:	f000 fb22 	bl	8002a14 <_sbrk_r>
 80023d0:	1c43      	adds	r3, r0, #1
 80023d2:	d12b      	bne.n	800242c <_malloc_r+0x9c>
 80023d4:	230c      	movs	r3, #12
 80023d6:	0030      	movs	r0, r6
 80023d8:	6033      	str	r3, [r6, #0]
 80023da:	f000 fe55 	bl	8003088 <__malloc_unlock>
 80023de:	e003      	b.n	80023e8 <_malloc_r+0x58>
 80023e0:	2d00      	cmp	r5, #0
 80023e2:	dade      	bge.n	80023a2 <_malloc_r+0x12>
 80023e4:	230c      	movs	r3, #12
 80023e6:	6033      	str	r3, [r6, #0]
 80023e8:	2000      	movs	r0, #0
 80023ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023ec:	6823      	ldr	r3, [r4, #0]
 80023ee:	1b5b      	subs	r3, r3, r5
 80023f0:	d419      	bmi.n	8002426 <_malloc_r+0x96>
 80023f2:	2b0b      	cmp	r3, #11
 80023f4:	d903      	bls.n	80023fe <_malloc_r+0x6e>
 80023f6:	6023      	str	r3, [r4, #0]
 80023f8:	18e4      	adds	r4, r4, r3
 80023fa:	6025      	str	r5, [r4, #0]
 80023fc:	e003      	b.n	8002406 <_malloc_r+0x76>
 80023fe:	6863      	ldr	r3, [r4, #4]
 8002400:	42a2      	cmp	r2, r4
 8002402:	d10e      	bne.n	8002422 <_malloc_r+0x92>
 8002404:	600b      	str	r3, [r1, #0]
 8002406:	0030      	movs	r0, r6
 8002408:	f000 fe3e 	bl	8003088 <__malloc_unlock>
 800240c:	0020      	movs	r0, r4
 800240e:	2207      	movs	r2, #7
 8002410:	300b      	adds	r0, #11
 8002412:	1d23      	adds	r3, r4, #4
 8002414:	4390      	bics	r0, r2
 8002416:	1ac2      	subs	r2, r0, r3
 8002418:	4298      	cmp	r0, r3
 800241a:	d0e6      	beq.n	80023ea <_malloc_r+0x5a>
 800241c:	1a1b      	subs	r3, r3, r0
 800241e:	50a3      	str	r3, [r4, r2]
 8002420:	e7e3      	b.n	80023ea <_malloc_r+0x5a>
 8002422:	6053      	str	r3, [r2, #4]
 8002424:	e7ef      	b.n	8002406 <_malloc_r+0x76>
 8002426:	0022      	movs	r2, r4
 8002428:	6864      	ldr	r4, [r4, #4]
 800242a:	e7c2      	b.n	80023b2 <_malloc_r+0x22>
 800242c:	2303      	movs	r3, #3
 800242e:	1cc4      	adds	r4, r0, #3
 8002430:	439c      	bics	r4, r3
 8002432:	42a0      	cmp	r0, r4
 8002434:	d0e1      	beq.n	80023fa <_malloc_r+0x6a>
 8002436:	1a21      	subs	r1, r4, r0
 8002438:	0030      	movs	r0, r6
 800243a:	f000 faeb 	bl	8002a14 <_sbrk_r>
 800243e:	1c43      	adds	r3, r0, #1
 8002440:	d1db      	bne.n	80023fa <_malloc_r+0x6a>
 8002442:	e7c7      	b.n	80023d4 <_malloc_r+0x44>
 8002444:	2000013c 	.word	0x2000013c
 8002448:	20000140 	.word	0x20000140

0800244c <__sfputc_r>:
 800244c:	6893      	ldr	r3, [r2, #8]
 800244e:	b510      	push	{r4, lr}
 8002450:	3b01      	subs	r3, #1
 8002452:	6093      	str	r3, [r2, #8]
 8002454:	2b00      	cmp	r3, #0
 8002456:	da04      	bge.n	8002462 <__sfputc_r+0x16>
 8002458:	6994      	ldr	r4, [r2, #24]
 800245a:	42a3      	cmp	r3, r4
 800245c:	db07      	blt.n	800246e <__sfputc_r+0x22>
 800245e:	290a      	cmp	r1, #10
 8002460:	d005      	beq.n	800246e <__sfputc_r+0x22>
 8002462:	6813      	ldr	r3, [r2, #0]
 8002464:	1c58      	adds	r0, r3, #1
 8002466:	6010      	str	r0, [r2, #0]
 8002468:	7019      	strb	r1, [r3, #0]
 800246a:	0008      	movs	r0, r1
 800246c:	bd10      	pop	{r4, pc}
 800246e:	f000 fae3 	bl	8002a38 <__swbuf_r>
 8002472:	0001      	movs	r1, r0
 8002474:	e7f9      	b.n	800246a <__sfputc_r+0x1e>

08002476 <__sfputs_r>:
 8002476:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002478:	0006      	movs	r6, r0
 800247a:	000f      	movs	r7, r1
 800247c:	0014      	movs	r4, r2
 800247e:	18d5      	adds	r5, r2, r3
 8002480:	42ac      	cmp	r4, r5
 8002482:	d101      	bne.n	8002488 <__sfputs_r+0x12>
 8002484:	2000      	movs	r0, #0
 8002486:	e007      	b.n	8002498 <__sfputs_r+0x22>
 8002488:	7821      	ldrb	r1, [r4, #0]
 800248a:	003a      	movs	r2, r7
 800248c:	0030      	movs	r0, r6
 800248e:	f7ff ffdd 	bl	800244c <__sfputc_r>
 8002492:	3401      	adds	r4, #1
 8002494:	1c43      	adds	r3, r0, #1
 8002496:	d1f3      	bne.n	8002480 <__sfputs_r+0xa>
 8002498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800249c <_vfiprintf_r>:
 800249c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800249e:	b0a1      	sub	sp, #132	; 0x84
 80024a0:	0006      	movs	r6, r0
 80024a2:	000c      	movs	r4, r1
 80024a4:	001f      	movs	r7, r3
 80024a6:	9203      	str	r2, [sp, #12]
 80024a8:	2800      	cmp	r0, #0
 80024aa:	d004      	beq.n	80024b6 <_vfiprintf_r+0x1a>
 80024ac:	6983      	ldr	r3, [r0, #24]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <_vfiprintf_r+0x1a>
 80024b2:	f000 fcc5 	bl	8002e40 <__sinit>
 80024b6:	4b8e      	ldr	r3, [pc, #568]	; (80026f0 <_vfiprintf_r+0x254>)
 80024b8:	429c      	cmp	r4, r3
 80024ba:	d11c      	bne.n	80024f6 <_vfiprintf_r+0x5a>
 80024bc:	6874      	ldr	r4, [r6, #4]
 80024be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80024c0:	07db      	lsls	r3, r3, #31
 80024c2:	d405      	bmi.n	80024d0 <_vfiprintf_r+0x34>
 80024c4:	89a3      	ldrh	r3, [r4, #12]
 80024c6:	059b      	lsls	r3, r3, #22
 80024c8:	d402      	bmi.n	80024d0 <_vfiprintf_r+0x34>
 80024ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80024cc:	f000 fd59 	bl	8002f82 <__retarget_lock_acquire_recursive>
 80024d0:	89a3      	ldrh	r3, [r4, #12]
 80024d2:	071b      	lsls	r3, r3, #28
 80024d4:	d502      	bpl.n	80024dc <_vfiprintf_r+0x40>
 80024d6:	6923      	ldr	r3, [r4, #16]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d11d      	bne.n	8002518 <_vfiprintf_r+0x7c>
 80024dc:	0021      	movs	r1, r4
 80024de:	0030      	movs	r0, r6
 80024e0:	f000 fb00 	bl	8002ae4 <__swsetup_r>
 80024e4:	2800      	cmp	r0, #0
 80024e6:	d017      	beq.n	8002518 <_vfiprintf_r+0x7c>
 80024e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80024ea:	07db      	lsls	r3, r3, #31
 80024ec:	d50d      	bpl.n	800250a <_vfiprintf_r+0x6e>
 80024ee:	2001      	movs	r0, #1
 80024f0:	4240      	negs	r0, r0
 80024f2:	b021      	add	sp, #132	; 0x84
 80024f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024f6:	4b7f      	ldr	r3, [pc, #508]	; (80026f4 <_vfiprintf_r+0x258>)
 80024f8:	429c      	cmp	r4, r3
 80024fa:	d101      	bne.n	8002500 <_vfiprintf_r+0x64>
 80024fc:	68b4      	ldr	r4, [r6, #8]
 80024fe:	e7de      	b.n	80024be <_vfiprintf_r+0x22>
 8002500:	4b7d      	ldr	r3, [pc, #500]	; (80026f8 <_vfiprintf_r+0x25c>)
 8002502:	429c      	cmp	r4, r3
 8002504:	d1db      	bne.n	80024be <_vfiprintf_r+0x22>
 8002506:	68f4      	ldr	r4, [r6, #12]
 8002508:	e7d9      	b.n	80024be <_vfiprintf_r+0x22>
 800250a:	89a3      	ldrh	r3, [r4, #12]
 800250c:	059b      	lsls	r3, r3, #22
 800250e:	d4ee      	bmi.n	80024ee <_vfiprintf_r+0x52>
 8002510:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002512:	f000 fd37 	bl	8002f84 <__retarget_lock_release_recursive>
 8002516:	e7ea      	b.n	80024ee <_vfiprintf_r+0x52>
 8002518:	2300      	movs	r3, #0
 800251a:	ad08      	add	r5, sp, #32
 800251c:	616b      	str	r3, [r5, #20]
 800251e:	3320      	adds	r3, #32
 8002520:	766b      	strb	r3, [r5, #25]
 8002522:	3310      	adds	r3, #16
 8002524:	76ab      	strb	r3, [r5, #26]
 8002526:	9707      	str	r7, [sp, #28]
 8002528:	9f03      	ldr	r7, [sp, #12]
 800252a:	783b      	ldrb	r3, [r7, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <_vfiprintf_r+0x98>
 8002530:	2b25      	cmp	r3, #37	; 0x25
 8002532:	d14e      	bne.n	80025d2 <_vfiprintf_r+0x136>
 8002534:	9b03      	ldr	r3, [sp, #12]
 8002536:	1afb      	subs	r3, r7, r3
 8002538:	9305      	str	r3, [sp, #20]
 800253a:	9b03      	ldr	r3, [sp, #12]
 800253c:	429f      	cmp	r7, r3
 800253e:	d00d      	beq.n	800255c <_vfiprintf_r+0xc0>
 8002540:	9b05      	ldr	r3, [sp, #20]
 8002542:	0021      	movs	r1, r4
 8002544:	0030      	movs	r0, r6
 8002546:	9a03      	ldr	r2, [sp, #12]
 8002548:	f7ff ff95 	bl	8002476 <__sfputs_r>
 800254c:	1c43      	adds	r3, r0, #1
 800254e:	d100      	bne.n	8002552 <_vfiprintf_r+0xb6>
 8002550:	e0b5      	b.n	80026be <_vfiprintf_r+0x222>
 8002552:	696a      	ldr	r2, [r5, #20]
 8002554:	9b05      	ldr	r3, [sp, #20]
 8002556:	4694      	mov	ip, r2
 8002558:	4463      	add	r3, ip
 800255a:	616b      	str	r3, [r5, #20]
 800255c:	783b      	ldrb	r3, [r7, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d100      	bne.n	8002564 <_vfiprintf_r+0xc8>
 8002562:	e0ac      	b.n	80026be <_vfiprintf_r+0x222>
 8002564:	2201      	movs	r2, #1
 8002566:	1c7b      	adds	r3, r7, #1
 8002568:	9303      	str	r3, [sp, #12]
 800256a:	2300      	movs	r3, #0
 800256c:	4252      	negs	r2, r2
 800256e:	606a      	str	r2, [r5, #4]
 8002570:	a904      	add	r1, sp, #16
 8002572:	3254      	adds	r2, #84	; 0x54
 8002574:	1852      	adds	r2, r2, r1
 8002576:	602b      	str	r3, [r5, #0]
 8002578:	60eb      	str	r3, [r5, #12]
 800257a:	60ab      	str	r3, [r5, #8]
 800257c:	7013      	strb	r3, [r2, #0]
 800257e:	65ab      	str	r3, [r5, #88]	; 0x58
 8002580:	9b03      	ldr	r3, [sp, #12]
 8002582:	2205      	movs	r2, #5
 8002584:	7819      	ldrb	r1, [r3, #0]
 8002586:	485d      	ldr	r0, [pc, #372]	; (80026fc <_vfiprintf_r+0x260>)
 8002588:	f000 fd6a 	bl	8003060 <memchr>
 800258c:	9b03      	ldr	r3, [sp, #12]
 800258e:	1c5f      	adds	r7, r3, #1
 8002590:	2800      	cmp	r0, #0
 8002592:	d120      	bne.n	80025d6 <_vfiprintf_r+0x13a>
 8002594:	682a      	ldr	r2, [r5, #0]
 8002596:	06d3      	lsls	r3, r2, #27
 8002598:	d504      	bpl.n	80025a4 <_vfiprintf_r+0x108>
 800259a:	2353      	movs	r3, #83	; 0x53
 800259c:	a904      	add	r1, sp, #16
 800259e:	185b      	adds	r3, r3, r1
 80025a0:	2120      	movs	r1, #32
 80025a2:	7019      	strb	r1, [r3, #0]
 80025a4:	0713      	lsls	r3, r2, #28
 80025a6:	d504      	bpl.n	80025b2 <_vfiprintf_r+0x116>
 80025a8:	2353      	movs	r3, #83	; 0x53
 80025aa:	a904      	add	r1, sp, #16
 80025ac:	185b      	adds	r3, r3, r1
 80025ae:	212b      	movs	r1, #43	; 0x2b
 80025b0:	7019      	strb	r1, [r3, #0]
 80025b2:	9b03      	ldr	r3, [sp, #12]
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	2b2a      	cmp	r3, #42	; 0x2a
 80025b8:	d016      	beq.n	80025e8 <_vfiprintf_r+0x14c>
 80025ba:	2100      	movs	r1, #0
 80025bc:	68eb      	ldr	r3, [r5, #12]
 80025be:	9f03      	ldr	r7, [sp, #12]
 80025c0:	783a      	ldrb	r2, [r7, #0]
 80025c2:	1c78      	adds	r0, r7, #1
 80025c4:	3a30      	subs	r2, #48	; 0x30
 80025c6:	4684      	mov	ip, r0
 80025c8:	2a09      	cmp	r2, #9
 80025ca:	d94f      	bls.n	800266c <_vfiprintf_r+0x1d0>
 80025cc:	2900      	cmp	r1, #0
 80025ce:	d111      	bne.n	80025f4 <_vfiprintf_r+0x158>
 80025d0:	e017      	b.n	8002602 <_vfiprintf_r+0x166>
 80025d2:	3701      	adds	r7, #1
 80025d4:	e7a9      	b.n	800252a <_vfiprintf_r+0x8e>
 80025d6:	4b49      	ldr	r3, [pc, #292]	; (80026fc <_vfiprintf_r+0x260>)
 80025d8:	682a      	ldr	r2, [r5, #0]
 80025da:	1ac0      	subs	r0, r0, r3
 80025dc:	2301      	movs	r3, #1
 80025de:	4083      	lsls	r3, r0
 80025e0:	4313      	orrs	r3, r2
 80025e2:	602b      	str	r3, [r5, #0]
 80025e4:	9703      	str	r7, [sp, #12]
 80025e6:	e7cb      	b.n	8002580 <_vfiprintf_r+0xe4>
 80025e8:	9b07      	ldr	r3, [sp, #28]
 80025ea:	1d19      	adds	r1, r3, #4
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	9107      	str	r1, [sp, #28]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	db01      	blt.n	80025f8 <_vfiprintf_r+0x15c>
 80025f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80025f6:	e004      	b.n	8002602 <_vfiprintf_r+0x166>
 80025f8:	425b      	negs	r3, r3
 80025fa:	60eb      	str	r3, [r5, #12]
 80025fc:	2302      	movs	r3, #2
 80025fe:	4313      	orrs	r3, r2
 8002600:	602b      	str	r3, [r5, #0]
 8002602:	783b      	ldrb	r3, [r7, #0]
 8002604:	2b2e      	cmp	r3, #46	; 0x2e
 8002606:	d10a      	bne.n	800261e <_vfiprintf_r+0x182>
 8002608:	787b      	ldrb	r3, [r7, #1]
 800260a:	2b2a      	cmp	r3, #42	; 0x2a
 800260c:	d137      	bne.n	800267e <_vfiprintf_r+0x1e2>
 800260e:	9b07      	ldr	r3, [sp, #28]
 8002610:	3702      	adds	r7, #2
 8002612:	1d1a      	adds	r2, r3, #4
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	9207      	str	r2, [sp, #28]
 8002618:	2b00      	cmp	r3, #0
 800261a:	db2d      	blt.n	8002678 <_vfiprintf_r+0x1dc>
 800261c:	9309      	str	r3, [sp, #36]	; 0x24
 800261e:	2203      	movs	r2, #3
 8002620:	7839      	ldrb	r1, [r7, #0]
 8002622:	4837      	ldr	r0, [pc, #220]	; (8002700 <_vfiprintf_r+0x264>)
 8002624:	f000 fd1c 	bl	8003060 <memchr>
 8002628:	2800      	cmp	r0, #0
 800262a:	d007      	beq.n	800263c <_vfiprintf_r+0x1a0>
 800262c:	4b34      	ldr	r3, [pc, #208]	; (8002700 <_vfiprintf_r+0x264>)
 800262e:	682a      	ldr	r2, [r5, #0]
 8002630:	1ac0      	subs	r0, r0, r3
 8002632:	2340      	movs	r3, #64	; 0x40
 8002634:	4083      	lsls	r3, r0
 8002636:	4313      	orrs	r3, r2
 8002638:	3701      	adds	r7, #1
 800263a:	602b      	str	r3, [r5, #0]
 800263c:	7839      	ldrb	r1, [r7, #0]
 800263e:	1c7b      	adds	r3, r7, #1
 8002640:	2206      	movs	r2, #6
 8002642:	4830      	ldr	r0, [pc, #192]	; (8002704 <_vfiprintf_r+0x268>)
 8002644:	9303      	str	r3, [sp, #12]
 8002646:	7629      	strb	r1, [r5, #24]
 8002648:	f000 fd0a 	bl	8003060 <memchr>
 800264c:	2800      	cmp	r0, #0
 800264e:	d045      	beq.n	80026dc <_vfiprintf_r+0x240>
 8002650:	4b2d      	ldr	r3, [pc, #180]	; (8002708 <_vfiprintf_r+0x26c>)
 8002652:	2b00      	cmp	r3, #0
 8002654:	d127      	bne.n	80026a6 <_vfiprintf_r+0x20a>
 8002656:	2207      	movs	r2, #7
 8002658:	9b07      	ldr	r3, [sp, #28]
 800265a:	3307      	adds	r3, #7
 800265c:	4393      	bics	r3, r2
 800265e:	3308      	adds	r3, #8
 8002660:	9307      	str	r3, [sp, #28]
 8002662:	696b      	ldr	r3, [r5, #20]
 8002664:	9a04      	ldr	r2, [sp, #16]
 8002666:	189b      	adds	r3, r3, r2
 8002668:	616b      	str	r3, [r5, #20]
 800266a:	e75d      	b.n	8002528 <_vfiprintf_r+0x8c>
 800266c:	210a      	movs	r1, #10
 800266e:	434b      	muls	r3, r1
 8002670:	4667      	mov	r7, ip
 8002672:	189b      	adds	r3, r3, r2
 8002674:	3909      	subs	r1, #9
 8002676:	e7a3      	b.n	80025c0 <_vfiprintf_r+0x124>
 8002678:	2301      	movs	r3, #1
 800267a:	425b      	negs	r3, r3
 800267c:	e7ce      	b.n	800261c <_vfiprintf_r+0x180>
 800267e:	2300      	movs	r3, #0
 8002680:	001a      	movs	r2, r3
 8002682:	3701      	adds	r7, #1
 8002684:	606b      	str	r3, [r5, #4]
 8002686:	7839      	ldrb	r1, [r7, #0]
 8002688:	1c78      	adds	r0, r7, #1
 800268a:	3930      	subs	r1, #48	; 0x30
 800268c:	4684      	mov	ip, r0
 800268e:	2909      	cmp	r1, #9
 8002690:	d903      	bls.n	800269a <_vfiprintf_r+0x1fe>
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0c3      	beq.n	800261e <_vfiprintf_r+0x182>
 8002696:	9209      	str	r2, [sp, #36]	; 0x24
 8002698:	e7c1      	b.n	800261e <_vfiprintf_r+0x182>
 800269a:	230a      	movs	r3, #10
 800269c:	435a      	muls	r2, r3
 800269e:	4667      	mov	r7, ip
 80026a0:	1852      	adds	r2, r2, r1
 80026a2:	3b09      	subs	r3, #9
 80026a4:	e7ef      	b.n	8002686 <_vfiprintf_r+0x1ea>
 80026a6:	ab07      	add	r3, sp, #28
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	0022      	movs	r2, r4
 80026ac:	0029      	movs	r1, r5
 80026ae:	0030      	movs	r0, r6
 80026b0:	4b16      	ldr	r3, [pc, #88]	; (800270c <_vfiprintf_r+0x270>)
 80026b2:	e000      	b.n	80026b6 <_vfiprintf_r+0x21a>
 80026b4:	bf00      	nop
 80026b6:	9004      	str	r0, [sp, #16]
 80026b8:	9b04      	ldr	r3, [sp, #16]
 80026ba:	3301      	adds	r3, #1
 80026bc:	d1d1      	bne.n	8002662 <_vfiprintf_r+0x1c6>
 80026be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80026c0:	07db      	lsls	r3, r3, #31
 80026c2:	d405      	bmi.n	80026d0 <_vfiprintf_r+0x234>
 80026c4:	89a3      	ldrh	r3, [r4, #12]
 80026c6:	059b      	lsls	r3, r3, #22
 80026c8:	d402      	bmi.n	80026d0 <_vfiprintf_r+0x234>
 80026ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80026cc:	f000 fc5a 	bl	8002f84 <__retarget_lock_release_recursive>
 80026d0:	89a3      	ldrh	r3, [r4, #12]
 80026d2:	065b      	lsls	r3, r3, #25
 80026d4:	d500      	bpl.n	80026d8 <_vfiprintf_r+0x23c>
 80026d6:	e70a      	b.n	80024ee <_vfiprintf_r+0x52>
 80026d8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80026da:	e70a      	b.n	80024f2 <_vfiprintf_r+0x56>
 80026dc:	ab07      	add	r3, sp, #28
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	0022      	movs	r2, r4
 80026e2:	0029      	movs	r1, r5
 80026e4:	0030      	movs	r0, r6
 80026e6:	4b09      	ldr	r3, [pc, #36]	; (800270c <_vfiprintf_r+0x270>)
 80026e8:	f000 f882 	bl	80027f0 <_printf_i>
 80026ec:	e7e3      	b.n	80026b6 <_vfiprintf_r+0x21a>
 80026ee:	46c0      	nop			; (mov r8, r8)
 80026f0:	08003470 	.word	0x08003470
 80026f4:	08003490 	.word	0x08003490
 80026f8:	08003450 	.word	0x08003450
 80026fc:	0800341c 	.word	0x0800341c
 8002700:	08003422 	.word	0x08003422
 8002704:	08003426 	.word	0x08003426
 8002708:	00000000 	.word	0x00000000
 800270c:	08002477 	.word	0x08002477

08002710 <_printf_common>:
 8002710:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002712:	0015      	movs	r5, r2
 8002714:	9301      	str	r3, [sp, #4]
 8002716:	688a      	ldr	r2, [r1, #8]
 8002718:	690b      	ldr	r3, [r1, #16]
 800271a:	000c      	movs	r4, r1
 800271c:	9000      	str	r0, [sp, #0]
 800271e:	4293      	cmp	r3, r2
 8002720:	da00      	bge.n	8002724 <_printf_common+0x14>
 8002722:	0013      	movs	r3, r2
 8002724:	0022      	movs	r2, r4
 8002726:	602b      	str	r3, [r5, #0]
 8002728:	3243      	adds	r2, #67	; 0x43
 800272a:	7812      	ldrb	r2, [r2, #0]
 800272c:	2a00      	cmp	r2, #0
 800272e:	d001      	beq.n	8002734 <_printf_common+0x24>
 8002730:	3301      	adds	r3, #1
 8002732:	602b      	str	r3, [r5, #0]
 8002734:	6823      	ldr	r3, [r4, #0]
 8002736:	069b      	lsls	r3, r3, #26
 8002738:	d502      	bpl.n	8002740 <_printf_common+0x30>
 800273a:	682b      	ldr	r3, [r5, #0]
 800273c:	3302      	adds	r3, #2
 800273e:	602b      	str	r3, [r5, #0]
 8002740:	6822      	ldr	r2, [r4, #0]
 8002742:	2306      	movs	r3, #6
 8002744:	0017      	movs	r7, r2
 8002746:	401f      	ands	r7, r3
 8002748:	421a      	tst	r2, r3
 800274a:	d027      	beq.n	800279c <_printf_common+0x8c>
 800274c:	0023      	movs	r3, r4
 800274e:	3343      	adds	r3, #67	; 0x43
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	1e5a      	subs	r2, r3, #1
 8002754:	4193      	sbcs	r3, r2
 8002756:	6822      	ldr	r2, [r4, #0]
 8002758:	0692      	lsls	r2, r2, #26
 800275a:	d430      	bmi.n	80027be <_printf_common+0xae>
 800275c:	0022      	movs	r2, r4
 800275e:	9901      	ldr	r1, [sp, #4]
 8002760:	9800      	ldr	r0, [sp, #0]
 8002762:	9e08      	ldr	r6, [sp, #32]
 8002764:	3243      	adds	r2, #67	; 0x43
 8002766:	47b0      	blx	r6
 8002768:	1c43      	adds	r3, r0, #1
 800276a:	d025      	beq.n	80027b8 <_printf_common+0xa8>
 800276c:	2306      	movs	r3, #6
 800276e:	6820      	ldr	r0, [r4, #0]
 8002770:	682a      	ldr	r2, [r5, #0]
 8002772:	68e1      	ldr	r1, [r4, #12]
 8002774:	2500      	movs	r5, #0
 8002776:	4003      	ands	r3, r0
 8002778:	2b04      	cmp	r3, #4
 800277a:	d103      	bne.n	8002784 <_printf_common+0x74>
 800277c:	1a8d      	subs	r5, r1, r2
 800277e:	43eb      	mvns	r3, r5
 8002780:	17db      	asrs	r3, r3, #31
 8002782:	401d      	ands	r5, r3
 8002784:	68a3      	ldr	r3, [r4, #8]
 8002786:	6922      	ldr	r2, [r4, #16]
 8002788:	4293      	cmp	r3, r2
 800278a:	dd01      	ble.n	8002790 <_printf_common+0x80>
 800278c:	1a9b      	subs	r3, r3, r2
 800278e:	18ed      	adds	r5, r5, r3
 8002790:	2700      	movs	r7, #0
 8002792:	42bd      	cmp	r5, r7
 8002794:	d120      	bne.n	80027d8 <_printf_common+0xc8>
 8002796:	2000      	movs	r0, #0
 8002798:	e010      	b.n	80027bc <_printf_common+0xac>
 800279a:	3701      	adds	r7, #1
 800279c:	68e3      	ldr	r3, [r4, #12]
 800279e:	682a      	ldr	r2, [r5, #0]
 80027a0:	1a9b      	subs	r3, r3, r2
 80027a2:	42bb      	cmp	r3, r7
 80027a4:	ddd2      	ble.n	800274c <_printf_common+0x3c>
 80027a6:	0022      	movs	r2, r4
 80027a8:	2301      	movs	r3, #1
 80027aa:	9901      	ldr	r1, [sp, #4]
 80027ac:	9800      	ldr	r0, [sp, #0]
 80027ae:	9e08      	ldr	r6, [sp, #32]
 80027b0:	3219      	adds	r2, #25
 80027b2:	47b0      	blx	r6
 80027b4:	1c43      	adds	r3, r0, #1
 80027b6:	d1f0      	bne.n	800279a <_printf_common+0x8a>
 80027b8:	2001      	movs	r0, #1
 80027ba:	4240      	negs	r0, r0
 80027bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80027be:	2030      	movs	r0, #48	; 0x30
 80027c0:	18e1      	adds	r1, r4, r3
 80027c2:	3143      	adds	r1, #67	; 0x43
 80027c4:	7008      	strb	r0, [r1, #0]
 80027c6:	0021      	movs	r1, r4
 80027c8:	1c5a      	adds	r2, r3, #1
 80027ca:	3145      	adds	r1, #69	; 0x45
 80027cc:	7809      	ldrb	r1, [r1, #0]
 80027ce:	18a2      	adds	r2, r4, r2
 80027d0:	3243      	adds	r2, #67	; 0x43
 80027d2:	3302      	adds	r3, #2
 80027d4:	7011      	strb	r1, [r2, #0]
 80027d6:	e7c1      	b.n	800275c <_printf_common+0x4c>
 80027d8:	0022      	movs	r2, r4
 80027da:	2301      	movs	r3, #1
 80027dc:	9901      	ldr	r1, [sp, #4]
 80027de:	9800      	ldr	r0, [sp, #0]
 80027e0:	9e08      	ldr	r6, [sp, #32]
 80027e2:	321a      	adds	r2, #26
 80027e4:	47b0      	blx	r6
 80027e6:	1c43      	adds	r3, r0, #1
 80027e8:	d0e6      	beq.n	80027b8 <_printf_common+0xa8>
 80027ea:	3701      	adds	r7, #1
 80027ec:	e7d1      	b.n	8002792 <_printf_common+0x82>
	...

080027f0 <_printf_i>:
 80027f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027f2:	b08b      	sub	sp, #44	; 0x2c
 80027f4:	9206      	str	r2, [sp, #24]
 80027f6:	000a      	movs	r2, r1
 80027f8:	3243      	adds	r2, #67	; 0x43
 80027fa:	9307      	str	r3, [sp, #28]
 80027fc:	9005      	str	r0, [sp, #20]
 80027fe:	9204      	str	r2, [sp, #16]
 8002800:	7e0a      	ldrb	r2, [r1, #24]
 8002802:	000c      	movs	r4, r1
 8002804:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002806:	2a78      	cmp	r2, #120	; 0x78
 8002808:	d806      	bhi.n	8002818 <_printf_i+0x28>
 800280a:	2a62      	cmp	r2, #98	; 0x62
 800280c:	d808      	bhi.n	8002820 <_printf_i+0x30>
 800280e:	2a00      	cmp	r2, #0
 8002810:	d100      	bne.n	8002814 <_printf_i+0x24>
 8002812:	e0c0      	b.n	8002996 <_printf_i+0x1a6>
 8002814:	2a58      	cmp	r2, #88	; 0x58
 8002816:	d052      	beq.n	80028be <_printf_i+0xce>
 8002818:	0026      	movs	r6, r4
 800281a:	3642      	adds	r6, #66	; 0x42
 800281c:	7032      	strb	r2, [r6, #0]
 800281e:	e022      	b.n	8002866 <_printf_i+0x76>
 8002820:	0010      	movs	r0, r2
 8002822:	3863      	subs	r0, #99	; 0x63
 8002824:	2815      	cmp	r0, #21
 8002826:	d8f7      	bhi.n	8002818 <_printf_i+0x28>
 8002828:	f7fd fc6e 	bl	8000108 <__gnu_thumb1_case_shi>
 800282c:	001f0016 	.word	0x001f0016
 8002830:	fff6fff6 	.word	0xfff6fff6
 8002834:	fff6fff6 	.word	0xfff6fff6
 8002838:	fff6001f 	.word	0xfff6001f
 800283c:	fff6fff6 	.word	0xfff6fff6
 8002840:	00a8fff6 	.word	0x00a8fff6
 8002844:	009a0036 	.word	0x009a0036
 8002848:	fff6fff6 	.word	0xfff6fff6
 800284c:	fff600b9 	.word	0xfff600b9
 8002850:	fff60036 	.word	0xfff60036
 8002854:	009efff6 	.word	0x009efff6
 8002858:	0026      	movs	r6, r4
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	3642      	adds	r6, #66	; 0x42
 800285e:	1d11      	adds	r1, r2, #4
 8002860:	6019      	str	r1, [r3, #0]
 8002862:	6813      	ldr	r3, [r2, #0]
 8002864:	7033      	strb	r3, [r6, #0]
 8002866:	2301      	movs	r3, #1
 8002868:	e0a7      	b.n	80029ba <_printf_i+0x1ca>
 800286a:	6808      	ldr	r0, [r1, #0]
 800286c:	6819      	ldr	r1, [r3, #0]
 800286e:	1d0a      	adds	r2, r1, #4
 8002870:	0605      	lsls	r5, r0, #24
 8002872:	d50b      	bpl.n	800288c <_printf_i+0x9c>
 8002874:	680d      	ldr	r5, [r1, #0]
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	2d00      	cmp	r5, #0
 800287a:	da03      	bge.n	8002884 <_printf_i+0x94>
 800287c:	232d      	movs	r3, #45	; 0x2d
 800287e:	9a04      	ldr	r2, [sp, #16]
 8002880:	426d      	negs	r5, r5
 8002882:	7013      	strb	r3, [r2, #0]
 8002884:	4b61      	ldr	r3, [pc, #388]	; (8002a0c <_printf_i+0x21c>)
 8002886:	270a      	movs	r7, #10
 8002888:	9303      	str	r3, [sp, #12]
 800288a:	e032      	b.n	80028f2 <_printf_i+0x102>
 800288c:	680d      	ldr	r5, [r1, #0]
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	0641      	lsls	r1, r0, #25
 8002892:	d5f1      	bpl.n	8002878 <_printf_i+0x88>
 8002894:	b22d      	sxth	r5, r5
 8002896:	e7ef      	b.n	8002878 <_printf_i+0x88>
 8002898:	680d      	ldr	r5, [r1, #0]
 800289a:	6819      	ldr	r1, [r3, #0]
 800289c:	1d08      	adds	r0, r1, #4
 800289e:	6018      	str	r0, [r3, #0]
 80028a0:	062e      	lsls	r6, r5, #24
 80028a2:	d501      	bpl.n	80028a8 <_printf_i+0xb8>
 80028a4:	680d      	ldr	r5, [r1, #0]
 80028a6:	e003      	b.n	80028b0 <_printf_i+0xc0>
 80028a8:	066d      	lsls	r5, r5, #25
 80028aa:	d5fb      	bpl.n	80028a4 <_printf_i+0xb4>
 80028ac:	680d      	ldr	r5, [r1, #0]
 80028ae:	b2ad      	uxth	r5, r5
 80028b0:	4b56      	ldr	r3, [pc, #344]	; (8002a0c <_printf_i+0x21c>)
 80028b2:	270a      	movs	r7, #10
 80028b4:	9303      	str	r3, [sp, #12]
 80028b6:	2a6f      	cmp	r2, #111	; 0x6f
 80028b8:	d117      	bne.n	80028ea <_printf_i+0xfa>
 80028ba:	2708      	movs	r7, #8
 80028bc:	e015      	b.n	80028ea <_printf_i+0xfa>
 80028be:	3145      	adds	r1, #69	; 0x45
 80028c0:	700a      	strb	r2, [r1, #0]
 80028c2:	4a52      	ldr	r2, [pc, #328]	; (8002a0c <_printf_i+0x21c>)
 80028c4:	9203      	str	r2, [sp, #12]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	6821      	ldr	r1, [r4, #0]
 80028ca:	ca20      	ldmia	r2!, {r5}
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	0608      	lsls	r0, r1, #24
 80028d0:	d550      	bpl.n	8002974 <_printf_i+0x184>
 80028d2:	07cb      	lsls	r3, r1, #31
 80028d4:	d502      	bpl.n	80028dc <_printf_i+0xec>
 80028d6:	2320      	movs	r3, #32
 80028d8:	4319      	orrs	r1, r3
 80028da:	6021      	str	r1, [r4, #0]
 80028dc:	2710      	movs	r7, #16
 80028de:	2d00      	cmp	r5, #0
 80028e0:	d103      	bne.n	80028ea <_printf_i+0xfa>
 80028e2:	2320      	movs	r3, #32
 80028e4:	6822      	ldr	r2, [r4, #0]
 80028e6:	439a      	bics	r2, r3
 80028e8:	6022      	str	r2, [r4, #0]
 80028ea:	0023      	movs	r3, r4
 80028ec:	2200      	movs	r2, #0
 80028ee:	3343      	adds	r3, #67	; 0x43
 80028f0:	701a      	strb	r2, [r3, #0]
 80028f2:	6863      	ldr	r3, [r4, #4]
 80028f4:	60a3      	str	r3, [r4, #8]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	db03      	blt.n	8002902 <_printf_i+0x112>
 80028fa:	2204      	movs	r2, #4
 80028fc:	6821      	ldr	r1, [r4, #0]
 80028fe:	4391      	bics	r1, r2
 8002900:	6021      	str	r1, [r4, #0]
 8002902:	2d00      	cmp	r5, #0
 8002904:	d102      	bne.n	800290c <_printf_i+0x11c>
 8002906:	9e04      	ldr	r6, [sp, #16]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00c      	beq.n	8002926 <_printf_i+0x136>
 800290c:	9e04      	ldr	r6, [sp, #16]
 800290e:	0028      	movs	r0, r5
 8002910:	0039      	movs	r1, r7
 8002912:	f7fd fc89 	bl	8000228 <__aeabi_uidivmod>
 8002916:	9b03      	ldr	r3, [sp, #12]
 8002918:	3e01      	subs	r6, #1
 800291a:	5c5b      	ldrb	r3, [r3, r1]
 800291c:	7033      	strb	r3, [r6, #0]
 800291e:	002b      	movs	r3, r5
 8002920:	0005      	movs	r5, r0
 8002922:	429f      	cmp	r7, r3
 8002924:	d9f3      	bls.n	800290e <_printf_i+0x11e>
 8002926:	2f08      	cmp	r7, #8
 8002928:	d109      	bne.n	800293e <_printf_i+0x14e>
 800292a:	6823      	ldr	r3, [r4, #0]
 800292c:	07db      	lsls	r3, r3, #31
 800292e:	d506      	bpl.n	800293e <_printf_i+0x14e>
 8002930:	6863      	ldr	r3, [r4, #4]
 8002932:	6922      	ldr	r2, [r4, #16]
 8002934:	4293      	cmp	r3, r2
 8002936:	dc02      	bgt.n	800293e <_printf_i+0x14e>
 8002938:	2330      	movs	r3, #48	; 0x30
 800293a:	3e01      	subs	r6, #1
 800293c:	7033      	strb	r3, [r6, #0]
 800293e:	9b04      	ldr	r3, [sp, #16]
 8002940:	1b9b      	subs	r3, r3, r6
 8002942:	6123      	str	r3, [r4, #16]
 8002944:	9b07      	ldr	r3, [sp, #28]
 8002946:	0021      	movs	r1, r4
 8002948:	9300      	str	r3, [sp, #0]
 800294a:	9805      	ldr	r0, [sp, #20]
 800294c:	9b06      	ldr	r3, [sp, #24]
 800294e:	aa09      	add	r2, sp, #36	; 0x24
 8002950:	f7ff fede 	bl	8002710 <_printf_common>
 8002954:	1c43      	adds	r3, r0, #1
 8002956:	d135      	bne.n	80029c4 <_printf_i+0x1d4>
 8002958:	2001      	movs	r0, #1
 800295a:	4240      	negs	r0, r0
 800295c:	b00b      	add	sp, #44	; 0x2c
 800295e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002960:	2220      	movs	r2, #32
 8002962:	6809      	ldr	r1, [r1, #0]
 8002964:	430a      	orrs	r2, r1
 8002966:	6022      	str	r2, [r4, #0]
 8002968:	0022      	movs	r2, r4
 800296a:	2178      	movs	r1, #120	; 0x78
 800296c:	3245      	adds	r2, #69	; 0x45
 800296e:	7011      	strb	r1, [r2, #0]
 8002970:	4a27      	ldr	r2, [pc, #156]	; (8002a10 <_printf_i+0x220>)
 8002972:	e7a7      	b.n	80028c4 <_printf_i+0xd4>
 8002974:	0648      	lsls	r0, r1, #25
 8002976:	d5ac      	bpl.n	80028d2 <_printf_i+0xe2>
 8002978:	b2ad      	uxth	r5, r5
 800297a:	e7aa      	b.n	80028d2 <_printf_i+0xe2>
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	680d      	ldr	r5, [r1, #0]
 8002980:	1d10      	adds	r0, r2, #4
 8002982:	6949      	ldr	r1, [r1, #20]
 8002984:	6018      	str	r0, [r3, #0]
 8002986:	6813      	ldr	r3, [r2, #0]
 8002988:	062e      	lsls	r6, r5, #24
 800298a:	d501      	bpl.n	8002990 <_printf_i+0x1a0>
 800298c:	6019      	str	r1, [r3, #0]
 800298e:	e002      	b.n	8002996 <_printf_i+0x1a6>
 8002990:	066d      	lsls	r5, r5, #25
 8002992:	d5fb      	bpl.n	800298c <_printf_i+0x19c>
 8002994:	8019      	strh	r1, [r3, #0]
 8002996:	2300      	movs	r3, #0
 8002998:	9e04      	ldr	r6, [sp, #16]
 800299a:	6123      	str	r3, [r4, #16]
 800299c:	e7d2      	b.n	8002944 <_printf_i+0x154>
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	1d11      	adds	r1, r2, #4
 80029a2:	6019      	str	r1, [r3, #0]
 80029a4:	6816      	ldr	r6, [r2, #0]
 80029a6:	2100      	movs	r1, #0
 80029a8:	0030      	movs	r0, r6
 80029aa:	6862      	ldr	r2, [r4, #4]
 80029ac:	f000 fb58 	bl	8003060 <memchr>
 80029b0:	2800      	cmp	r0, #0
 80029b2:	d001      	beq.n	80029b8 <_printf_i+0x1c8>
 80029b4:	1b80      	subs	r0, r0, r6
 80029b6:	6060      	str	r0, [r4, #4]
 80029b8:	6863      	ldr	r3, [r4, #4]
 80029ba:	6123      	str	r3, [r4, #16]
 80029bc:	2300      	movs	r3, #0
 80029be:	9a04      	ldr	r2, [sp, #16]
 80029c0:	7013      	strb	r3, [r2, #0]
 80029c2:	e7bf      	b.n	8002944 <_printf_i+0x154>
 80029c4:	6923      	ldr	r3, [r4, #16]
 80029c6:	0032      	movs	r2, r6
 80029c8:	9906      	ldr	r1, [sp, #24]
 80029ca:	9805      	ldr	r0, [sp, #20]
 80029cc:	9d07      	ldr	r5, [sp, #28]
 80029ce:	47a8      	blx	r5
 80029d0:	1c43      	adds	r3, r0, #1
 80029d2:	d0c1      	beq.n	8002958 <_printf_i+0x168>
 80029d4:	6823      	ldr	r3, [r4, #0]
 80029d6:	079b      	lsls	r3, r3, #30
 80029d8:	d415      	bmi.n	8002a06 <_printf_i+0x216>
 80029da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029dc:	68e0      	ldr	r0, [r4, #12]
 80029de:	4298      	cmp	r0, r3
 80029e0:	dabc      	bge.n	800295c <_printf_i+0x16c>
 80029e2:	0018      	movs	r0, r3
 80029e4:	e7ba      	b.n	800295c <_printf_i+0x16c>
 80029e6:	0022      	movs	r2, r4
 80029e8:	2301      	movs	r3, #1
 80029ea:	9906      	ldr	r1, [sp, #24]
 80029ec:	9805      	ldr	r0, [sp, #20]
 80029ee:	9e07      	ldr	r6, [sp, #28]
 80029f0:	3219      	adds	r2, #25
 80029f2:	47b0      	blx	r6
 80029f4:	1c43      	adds	r3, r0, #1
 80029f6:	d0af      	beq.n	8002958 <_printf_i+0x168>
 80029f8:	3501      	adds	r5, #1
 80029fa:	68e3      	ldr	r3, [r4, #12]
 80029fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80029fe:	1a9b      	subs	r3, r3, r2
 8002a00:	42ab      	cmp	r3, r5
 8002a02:	dcf0      	bgt.n	80029e6 <_printf_i+0x1f6>
 8002a04:	e7e9      	b.n	80029da <_printf_i+0x1ea>
 8002a06:	2500      	movs	r5, #0
 8002a08:	e7f7      	b.n	80029fa <_printf_i+0x20a>
 8002a0a:	46c0      	nop			; (mov r8, r8)
 8002a0c:	0800342d 	.word	0x0800342d
 8002a10:	0800343e 	.word	0x0800343e

08002a14 <_sbrk_r>:
 8002a14:	2300      	movs	r3, #0
 8002a16:	b570      	push	{r4, r5, r6, lr}
 8002a18:	4d06      	ldr	r5, [pc, #24]	; (8002a34 <_sbrk_r+0x20>)
 8002a1a:	0004      	movs	r4, r0
 8002a1c:	0008      	movs	r0, r1
 8002a1e:	602b      	str	r3, [r5, #0]
 8002a20:	f7fd ff0e 	bl	8000840 <_sbrk>
 8002a24:	1c43      	adds	r3, r0, #1
 8002a26:	d103      	bne.n	8002a30 <_sbrk_r+0x1c>
 8002a28:	682b      	ldr	r3, [r5, #0]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d000      	beq.n	8002a30 <_sbrk_r+0x1c>
 8002a2e:	6023      	str	r3, [r4, #0]
 8002a30:	bd70      	pop	{r4, r5, r6, pc}
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	20000a8c 	.word	0x20000a8c

08002a38 <__swbuf_r>:
 8002a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a3a:	0005      	movs	r5, r0
 8002a3c:	000e      	movs	r6, r1
 8002a3e:	0014      	movs	r4, r2
 8002a40:	2800      	cmp	r0, #0
 8002a42:	d004      	beq.n	8002a4e <__swbuf_r+0x16>
 8002a44:	6983      	ldr	r3, [r0, #24]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <__swbuf_r+0x16>
 8002a4a:	f000 f9f9 	bl	8002e40 <__sinit>
 8002a4e:	4b22      	ldr	r3, [pc, #136]	; (8002ad8 <__swbuf_r+0xa0>)
 8002a50:	429c      	cmp	r4, r3
 8002a52:	d12e      	bne.n	8002ab2 <__swbuf_r+0x7a>
 8002a54:	686c      	ldr	r4, [r5, #4]
 8002a56:	69a3      	ldr	r3, [r4, #24]
 8002a58:	60a3      	str	r3, [r4, #8]
 8002a5a:	89a3      	ldrh	r3, [r4, #12]
 8002a5c:	071b      	lsls	r3, r3, #28
 8002a5e:	d532      	bpl.n	8002ac6 <__swbuf_r+0x8e>
 8002a60:	6923      	ldr	r3, [r4, #16]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d02f      	beq.n	8002ac6 <__swbuf_r+0x8e>
 8002a66:	6823      	ldr	r3, [r4, #0]
 8002a68:	6922      	ldr	r2, [r4, #16]
 8002a6a:	b2f7      	uxtb	r7, r6
 8002a6c:	1a98      	subs	r0, r3, r2
 8002a6e:	6963      	ldr	r3, [r4, #20]
 8002a70:	b2f6      	uxtb	r6, r6
 8002a72:	4283      	cmp	r3, r0
 8002a74:	dc05      	bgt.n	8002a82 <__swbuf_r+0x4a>
 8002a76:	0021      	movs	r1, r4
 8002a78:	0028      	movs	r0, r5
 8002a7a:	f000 f93f 	bl	8002cfc <_fflush_r>
 8002a7e:	2800      	cmp	r0, #0
 8002a80:	d127      	bne.n	8002ad2 <__swbuf_r+0x9a>
 8002a82:	68a3      	ldr	r3, [r4, #8]
 8002a84:	3001      	adds	r0, #1
 8002a86:	3b01      	subs	r3, #1
 8002a88:	60a3      	str	r3, [r4, #8]
 8002a8a:	6823      	ldr	r3, [r4, #0]
 8002a8c:	1c5a      	adds	r2, r3, #1
 8002a8e:	6022      	str	r2, [r4, #0]
 8002a90:	701f      	strb	r7, [r3, #0]
 8002a92:	6963      	ldr	r3, [r4, #20]
 8002a94:	4283      	cmp	r3, r0
 8002a96:	d004      	beq.n	8002aa2 <__swbuf_r+0x6a>
 8002a98:	89a3      	ldrh	r3, [r4, #12]
 8002a9a:	07db      	lsls	r3, r3, #31
 8002a9c:	d507      	bpl.n	8002aae <__swbuf_r+0x76>
 8002a9e:	2e0a      	cmp	r6, #10
 8002aa0:	d105      	bne.n	8002aae <__swbuf_r+0x76>
 8002aa2:	0021      	movs	r1, r4
 8002aa4:	0028      	movs	r0, r5
 8002aa6:	f000 f929 	bl	8002cfc <_fflush_r>
 8002aaa:	2800      	cmp	r0, #0
 8002aac:	d111      	bne.n	8002ad2 <__swbuf_r+0x9a>
 8002aae:	0030      	movs	r0, r6
 8002ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ab2:	4b0a      	ldr	r3, [pc, #40]	; (8002adc <__swbuf_r+0xa4>)
 8002ab4:	429c      	cmp	r4, r3
 8002ab6:	d101      	bne.n	8002abc <__swbuf_r+0x84>
 8002ab8:	68ac      	ldr	r4, [r5, #8]
 8002aba:	e7cc      	b.n	8002a56 <__swbuf_r+0x1e>
 8002abc:	4b08      	ldr	r3, [pc, #32]	; (8002ae0 <__swbuf_r+0xa8>)
 8002abe:	429c      	cmp	r4, r3
 8002ac0:	d1c9      	bne.n	8002a56 <__swbuf_r+0x1e>
 8002ac2:	68ec      	ldr	r4, [r5, #12]
 8002ac4:	e7c7      	b.n	8002a56 <__swbuf_r+0x1e>
 8002ac6:	0021      	movs	r1, r4
 8002ac8:	0028      	movs	r0, r5
 8002aca:	f000 f80b 	bl	8002ae4 <__swsetup_r>
 8002ace:	2800      	cmp	r0, #0
 8002ad0:	d0c9      	beq.n	8002a66 <__swbuf_r+0x2e>
 8002ad2:	2601      	movs	r6, #1
 8002ad4:	4276      	negs	r6, r6
 8002ad6:	e7ea      	b.n	8002aae <__swbuf_r+0x76>
 8002ad8:	08003470 	.word	0x08003470
 8002adc:	08003490 	.word	0x08003490
 8002ae0:	08003450 	.word	0x08003450

08002ae4 <__swsetup_r>:
 8002ae4:	4b37      	ldr	r3, [pc, #220]	; (8002bc4 <__swsetup_r+0xe0>)
 8002ae6:	b570      	push	{r4, r5, r6, lr}
 8002ae8:	681d      	ldr	r5, [r3, #0]
 8002aea:	0006      	movs	r6, r0
 8002aec:	000c      	movs	r4, r1
 8002aee:	2d00      	cmp	r5, #0
 8002af0:	d005      	beq.n	8002afe <__swsetup_r+0x1a>
 8002af2:	69ab      	ldr	r3, [r5, #24]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d102      	bne.n	8002afe <__swsetup_r+0x1a>
 8002af8:	0028      	movs	r0, r5
 8002afa:	f000 f9a1 	bl	8002e40 <__sinit>
 8002afe:	4b32      	ldr	r3, [pc, #200]	; (8002bc8 <__swsetup_r+0xe4>)
 8002b00:	429c      	cmp	r4, r3
 8002b02:	d10f      	bne.n	8002b24 <__swsetup_r+0x40>
 8002b04:	686c      	ldr	r4, [r5, #4]
 8002b06:	230c      	movs	r3, #12
 8002b08:	5ee2      	ldrsh	r2, [r4, r3]
 8002b0a:	b293      	uxth	r3, r2
 8002b0c:	0711      	lsls	r1, r2, #28
 8002b0e:	d42d      	bmi.n	8002b6c <__swsetup_r+0x88>
 8002b10:	06d9      	lsls	r1, r3, #27
 8002b12:	d411      	bmi.n	8002b38 <__swsetup_r+0x54>
 8002b14:	2309      	movs	r3, #9
 8002b16:	2001      	movs	r0, #1
 8002b18:	6033      	str	r3, [r6, #0]
 8002b1a:	3337      	adds	r3, #55	; 0x37
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	81a3      	strh	r3, [r4, #12]
 8002b20:	4240      	negs	r0, r0
 8002b22:	bd70      	pop	{r4, r5, r6, pc}
 8002b24:	4b29      	ldr	r3, [pc, #164]	; (8002bcc <__swsetup_r+0xe8>)
 8002b26:	429c      	cmp	r4, r3
 8002b28:	d101      	bne.n	8002b2e <__swsetup_r+0x4a>
 8002b2a:	68ac      	ldr	r4, [r5, #8]
 8002b2c:	e7eb      	b.n	8002b06 <__swsetup_r+0x22>
 8002b2e:	4b28      	ldr	r3, [pc, #160]	; (8002bd0 <__swsetup_r+0xec>)
 8002b30:	429c      	cmp	r4, r3
 8002b32:	d1e8      	bne.n	8002b06 <__swsetup_r+0x22>
 8002b34:	68ec      	ldr	r4, [r5, #12]
 8002b36:	e7e6      	b.n	8002b06 <__swsetup_r+0x22>
 8002b38:	075b      	lsls	r3, r3, #29
 8002b3a:	d513      	bpl.n	8002b64 <__swsetup_r+0x80>
 8002b3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b3e:	2900      	cmp	r1, #0
 8002b40:	d008      	beq.n	8002b54 <__swsetup_r+0x70>
 8002b42:	0023      	movs	r3, r4
 8002b44:	3344      	adds	r3, #68	; 0x44
 8002b46:	4299      	cmp	r1, r3
 8002b48:	d002      	beq.n	8002b50 <__swsetup_r+0x6c>
 8002b4a:	0030      	movs	r0, r6
 8002b4c:	f7ff fbd6 	bl	80022fc <_free_r>
 8002b50:	2300      	movs	r3, #0
 8002b52:	6363      	str	r3, [r4, #52]	; 0x34
 8002b54:	2224      	movs	r2, #36	; 0x24
 8002b56:	89a3      	ldrh	r3, [r4, #12]
 8002b58:	4393      	bics	r3, r2
 8002b5a:	81a3      	strh	r3, [r4, #12]
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	6063      	str	r3, [r4, #4]
 8002b60:	6923      	ldr	r3, [r4, #16]
 8002b62:	6023      	str	r3, [r4, #0]
 8002b64:	2308      	movs	r3, #8
 8002b66:	89a2      	ldrh	r2, [r4, #12]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	81a3      	strh	r3, [r4, #12]
 8002b6c:	6923      	ldr	r3, [r4, #16]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10b      	bne.n	8002b8a <__swsetup_r+0xa6>
 8002b72:	21a0      	movs	r1, #160	; 0xa0
 8002b74:	2280      	movs	r2, #128	; 0x80
 8002b76:	89a3      	ldrh	r3, [r4, #12]
 8002b78:	0089      	lsls	r1, r1, #2
 8002b7a:	0092      	lsls	r2, r2, #2
 8002b7c:	400b      	ands	r3, r1
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d003      	beq.n	8002b8a <__swsetup_r+0xa6>
 8002b82:	0021      	movs	r1, r4
 8002b84:	0030      	movs	r0, r6
 8002b86:	f000 fa27 	bl	8002fd8 <__smakebuf_r>
 8002b8a:	220c      	movs	r2, #12
 8002b8c:	5ea3      	ldrsh	r3, [r4, r2]
 8002b8e:	2001      	movs	r0, #1
 8002b90:	001a      	movs	r2, r3
 8002b92:	b299      	uxth	r1, r3
 8002b94:	4002      	ands	r2, r0
 8002b96:	4203      	tst	r3, r0
 8002b98:	d00f      	beq.n	8002bba <__swsetup_r+0xd6>
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	60a2      	str	r2, [r4, #8]
 8002b9e:	6962      	ldr	r2, [r4, #20]
 8002ba0:	4252      	negs	r2, r2
 8002ba2:	61a2      	str	r2, [r4, #24]
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	6922      	ldr	r2, [r4, #16]
 8002ba8:	4282      	cmp	r2, r0
 8002baa:	d1ba      	bne.n	8002b22 <__swsetup_r+0x3e>
 8002bac:	060a      	lsls	r2, r1, #24
 8002bae:	d5b8      	bpl.n	8002b22 <__swsetup_r+0x3e>
 8002bb0:	2240      	movs	r2, #64	; 0x40
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	81a3      	strh	r3, [r4, #12]
 8002bb6:	3801      	subs	r0, #1
 8002bb8:	e7b3      	b.n	8002b22 <__swsetup_r+0x3e>
 8002bba:	0788      	lsls	r0, r1, #30
 8002bbc:	d400      	bmi.n	8002bc0 <__swsetup_r+0xdc>
 8002bbe:	6962      	ldr	r2, [r4, #20]
 8002bc0:	60a2      	str	r2, [r4, #8]
 8002bc2:	e7ef      	b.n	8002ba4 <__swsetup_r+0xc0>
 8002bc4:	20000020 	.word	0x20000020
 8002bc8:	08003470 	.word	0x08003470
 8002bcc:	08003490 	.word	0x08003490
 8002bd0:	08003450 	.word	0x08003450

08002bd4 <abort>:
 8002bd4:	2006      	movs	r0, #6
 8002bd6:	b510      	push	{r4, lr}
 8002bd8:	f000 fa88 	bl	80030ec <raise>
 8002bdc:	2001      	movs	r0, #1
 8002bde:	f7fd fdff 	bl	80007e0 <_exit>
	...

08002be4 <__sflush_r>:
 8002be4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002be6:	898b      	ldrh	r3, [r1, #12]
 8002be8:	0005      	movs	r5, r0
 8002bea:	000c      	movs	r4, r1
 8002bec:	071a      	lsls	r2, r3, #28
 8002bee:	d45f      	bmi.n	8002cb0 <__sflush_r+0xcc>
 8002bf0:	684a      	ldr	r2, [r1, #4]
 8002bf2:	2a00      	cmp	r2, #0
 8002bf4:	dc04      	bgt.n	8002c00 <__sflush_r+0x1c>
 8002bf6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8002bf8:	2a00      	cmp	r2, #0
 8002bfa:	dc01      	bgt.n	8002c00 <__sflush_r+0x1c>
 8002bfc:	2000      	movs	r0, #0
 8002bfe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002c00:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002c02:	2f00      	cmp	r7, #0
 8002c04:	d0fa      	beq.n	8002bfc <__sflush_r+0x18>
 8002c06:	2200      	movs	r2, #0
 8002c08:	2180      	movs	r1, #128	; 0x80
 8002c0a:	682e      	ldr	r6, [r5, #0]
 8002c0c:	602a      	str	r2, [r5, #0]
 8002c0e:	001a      	movs	r2, r3
 8002c10:	0149      	lsls	r1, r1, #5
 8002c12:	400a      	ands	r2, r1
 8002c14:	420b      	tst	r3, r1
 8002c16:	d034      	beq.n	8002c82 <__sflush_r+0x9e>
 8002c18:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002c1a:	89a3      	ldrh	r3, [r4, #12]
 8002c1c:	075b      	lsls	r3, r3, #29
 8002c1e:	d506      	bpl.n	8002c2e <__sflush_r+0x4a>
 8002c20:	6863      	ldr	r3, [r4, #4]
 8002c22:	1ac0      	subs	r0, r0, r3
 8002c24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <__sflush_r+0x4a>
 8002c2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002c2c:	1ac0      	subs	r0, r0, r3
 8002c2e:	0002      	movs	r2, r0
 8002c30:	6a21      	ldr	r1, [r4, #32]
 8002c32:	2300      	movs	r3, #0
 8002c34:	0028      	movs	r0, r5
 8002c36:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002c38:	47b8      	blx	r7
 8002c3a:	89a1      	ldrh	r1, [r4, #12]
 8002c3c:	1c43      	adds	r3, r0, #1
 8002c3e:	d106      	bne.n	8002c4e <__sflush_r+0x6a>
 8002c40:	682b      	ldr	r3, [r5, #0]
 8002c42:	2b1d      	cmp	r3, #29
 8002c44:	d831      	bhi.n	8002caa <__sflush_r+0xc6>
 8002c46:	4a2c      	ldr	r2, [pc, #176]	; (8002cf8 <__sflush_r+0x114>)
 8002c48:	40da      	lsrs	r2, r3
 8002c4a:	07d3      	lsls	r3, r2, #31
 8002c4c:	d52d      	bpl.n	8002caa <__sflush_r+0xc6>
 8002c4e:	2300      	movs	r3, #0
 8002c50:	6063      	str	r3, [r4, #4]
 8002c52:	6923      	ldr	r3, [r4, #16]
 8002c54:	6023      	str	r3, [r4, #0]
 8002c56:	04cb      	lsls	r3, r1, #19
 8002c58:	d505      	bpl.n	8002c66 <__sflush_r+0x82>
 8002c5a:	1c43      	adds	r3, r0, #1
 8002c5c:	d102      	bne.n	8002c64 <__sflush_r+0x80>
 8002c5e:	682b      	ldr	r3, [r5, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d100      	bne.n	8002c66 <__sflush_r+0x82>
 8002c64:	6560      	str	r0, [r4, #84]	; 0x54
 8002c66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c68:	602e      	str	r6, [r5, #0]
 8002c6a:	2900      	cmp	r1, #0
 8002c6c:	d0c6      	beq.n	8002bfc <__sflush_r+0x18>
 8002c6e:	0023      	movs	r3, r4
 8002c70:	3344      	adds	r3, #68	; 0x44
 8002c72:	4299      	cmp	r1, r3
 8002c74:	d002      	beq.n	8002c7c <__sflush_r+0x98>
 8002c76:	0028      	movs	r0, r5
 8002c78:	f7ff fb40 	bl	80022fc <_free_r>
 8002c7c:	2000      	movs	r0, #0
 8002c7e:	6360      	str	r0, [r4, #52]	; 0x34
 8002c80:	e7bd      	b.n	8002bfe <__sflush_r+0x1a>
 8002c82:	2301      	movs	r3, #1
 8002c84:	0028      	movs	r0, r5
 8002c86:	6a21      	ldr	r1, [r4, #32]
 8002c88:	47b8      	blx	r7
 8002c8a:	1c43      	adds	r3, r0, #1
 8002c8c:	d1c5      	bne.n	8002c1a <__sflush_r+0x36>
 8002c8e:	682b      	ldr	r3, [r5, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0c2      	beq.n	8002c1a <__sflush_r+0x36>
 8002c94:	2b1d      	cmp	r3, #29
 8002c96:	d001      	beq.n	8002c9c <__sflush_r+0xb8>
 8002c98:	2b16      	cmp	r3, #22
 8002c9a:	d101      	bne.n	8002ca0 <__sflush_r+0xbc>
 8002c9c:	602e      	str	r6, [r5, #0]
 8002c9e:	e7ad      	b.n	8002bfc <__sflush_r+0x18>
 8002ca0:	2340      	movs	r3, #64	; 0x40
 8002ca2:	89a2      	ldrh	r2, [r4, #12]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	81a3      	strh	r3, [r4, #12]
 8002ca8:	e7a9      	b.n	8002bfe <__sflush_r+0x1a>
 8002caa:	2340      	movs	r3, #64	; 0x40
 8002cac:	430b      	orrs	r3, r1
 8002cae:	e7fa      	b.n	8002ca6 <__sflush_r+0xc2>
 8002cb0:	690f      	ldr	r7, [r1, #16]
 8002cb2:	2f00      	cmp	r7, #0
 8002cb4:	d0a2      	beq.n	8002bfc <__sflush_r+0x18>
 8002cb6:	680a      	ldr	r2, [r1, #0]
 8002cb8:	600f      	str	r7, [r1, #0]
 8002cba:	1bd2      	subs	r2, r2, r7
 8002cbc:	9201      	str	r2, [sp, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	079b      	lsls	r3, r3, #30
 8002cc2:	d100      	bne.n	8002cc6 <__sflush_r+0xe2>
 8002cc4:	694a      	ldr	r2, [r1, #20]
 8002cc6:	60a2      	str	r2, [r4, #8]
 8002cc8:	9b01      	ldr	r3, [sp, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	dc00      	bgt.n	8002cd0 <__sflush_r+0xec>
 8002cce:	e795      	b.n	8002bfc <__sflush_r+0x18>
 8002cd0:	003a      	movs	r2, r7
 8002cd2:	0028      	movs	r0, r5
 8002cd4:	9b01      	ldr	r3, [sp, #4]
 8002cd6:	6a21      	ldr	r1, [r4, #32]
 8002cd8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002cda:	47b0      	blx	r6
 8002cdc:	2800      	cmp	r0, #0
 8002cde:	dc06      	bgt.n	8002cee <__sflush_r+0x10a>
 8002ce0:	2340      	movs	r3, #64	; 0x40
 8002ce2:	2001      	movs	r0, #1
 8002ce4:	89a2      	ldrh	r2, [r4, #12]
 8002ce6:	4240      	negs	r0, r0
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	81a3      	strh	r3, [r4, #12]
 8002cec:	e787      	b.n	8002bfe <__sflush_r+0x1a>
 8002cee:	9b01      	ldr	r3, [sp, #4]
 8002cf0:	183f      	adds	r7, r7, r0
 8002cf2:	1a1b      	subs	r3, r3, r0
 8002cf4:	9301      	str	r3, [sp, #4]
 8002cf6:	e7e7      	b.n	8002cc8 <__sflush_r+0xe4>
 8002cf8:	20400001 	.word	0x20400001

08002cfc <_fflush_r>:
 8002cfc:	690b      	ldr	r3, [r1, #16]
 8002cfe:	b570      	push	{r4, r5, r6, lr}
 8002d00:	0005      	movs	r5, r0
 8002d02:	000c      	movs	r4, r1
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d102      	bne.n	8002d0e <_fflush_r+0x12>
 8002d08:	2500      	movs	r5, #0
 8002d0a:	0028      	movs	r0, r5
 8002d0c:	bd70      	pop	{r4, r5, r6, pc}
 8002d0e:	2800      	cmp	r0, #0
 8002d10:	d004      	beq.n	8002d1c <_fflush_r+0x20>
 8002d12:	6983      	ldr	r3, [r0, #24]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d101      	bne.n	8002d1c <_fflush_r+0x20>
 8002d18:	f000 f892 	bl	8002e40 <__sinit>
 8002d1c:	4b14      	ldr	r3, [pc, #80]	; (8002d70 <_fflush_r+0x74>)
 8002d1e:	429c      	cmp	r4, r3
 8002d20:	d11b      	bne.n	8002d5a <_fflush_r+0x5e>
 8002d22:	686c      	ldr	r4, [r5, #4]
 8002d24:	220c      	movs	r2, #12
 8002d26:	5ea3      	ldrsh	r3, [r4, r2]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d0ed      	beq.n	8002d08 <_fflush_r+0xc>
 8002d2c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002d2e:	07d2      	lsls	r2, r2, #31
 8002d30:	d404      	bmi.n	8002d3c <_fflush_r+0x40>
 8002d32:	059b      	lsls	r3, r3, #22
 8002d34:	d402      	bmi.n	8002d3c <_fflush_r+0x40>
 8002d36:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d38:	f000 f923 	bl	8002f82 <__retarget_lock_acquire_recursive>
 8002d3c:	0028      	movs	r0, r5
 8002d3e:	0021      	movs	r1, r4
 8002d40:	f7ff ff50 	bl	8002be4 <__sflush_r>
 8002d44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d46:	0005      	movs	r5, r0
 8002d48:	07db      	lsls	r3, r3, #31
 8002d4a:	d4de      	bmi.n	8002d0a <_fflush_r+0xe>
 8002d4c:	89a3      	ldrh	r3, [r4, #12]
 8002d4e:	059b      	lsls	r3, r3, #22
 8002d50:	d4db      	bmi.n	8002d0a <_fflush_r+0xe>
 8002d52:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d54:	f000 f916 	bl	8002f84 <__retarget_lock_release_recursive>
 8002d58:	e7d7      	b.n	8002d0a <_fflush_r+0xe>
 8002d5a:	4b06      	ldr	r3, [pc, #24]	; (8002d74 <_fflush_r+0x78>)
 8002d5c:	429c      	cmp	r4, r3
 8002d5e:	d101      	bne.n	8002d64 <_fflush_r+0x68>
 8002d60:	68ac      	ldr	r4, [r5, #8]
 8002d62:	e7df      	b.n	8002d24 <_fflush_r+0x28>
 8002d64:	4b04      	ldr	r3, [pc, #16]	; (8002d78 <_fflush_r+0x7c>)
 8002d66:	429c      	cmp	r4, r3
 8002d68:	d1dc      	bne.n	8002d24 <_fflush_r+0x28>
 8002d6a:	68ec      	ldr	r4, [r5, #12]
 8002d6c:	e7da      	b.n	8002d24 <_fflush_r+0x28>
 8002d6e:	46c0      	nop			; (mov r8, r8)
 8002d70:	08003470 	.word	0x08003470
 8002d74:	08003490 	.word	0x08003490
 8002d78:	08003450 	.word	0x08003450

08002d7c <std>:
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	b510      	push	{r4, lr}
 8002d80:	0004      	movs	r4, r0
 8002d82:	6003      	str	r3, [r0, #0]
 8002d84:	6043      	str	r3, [r0, #4]
 8002d86:	6083      	str	r3, [r0, #8]
 8002d88:	8181      	strh	r1, [r0, #12]
 8002d8a:	6643      	str	r3, [r0, #100]	; 0x64
 8002d8c:	0019      	movs	r1, r3
 8002d8e:	81c2      	strh	r2, [r0, #14]
 8002d90:	6103      	str	r3, [r0, #16]
 8002d92:	6143      	str	r3, [r0, #20]
 8002d94:	6183      	str	r3, [r0, #24]
 8002d96:	2208      	movs	r2, #8
 8002d98:	305c      	adds	r0, #92	; 0x5c
 8002d9a:	f7ff faa7 	bl	80022ec <memset>
 8002d9e:	4b05      	ldr	r3, [pc, #20]	; (8002db4 <std+0x38>)
 8002da0:	6263      	str	r3, [r4, #36]	; 0x24
 8002da2:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <std+0x3c>)
 8002da4:	6224      	str	r4, [r4, #32]
 8002da6:	62a3      	str	r3, [r4, #40]	; 0x28
 8002da8:	4b04      	ldr	r3, [pc, #16]	; (8002dbc <std+0x40>)
 8002daa:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002dac:	4b04      	ldr	r3, [pc, #16]	; (8002dc0 <std+0x44>)
 8002dae:	6323      	str	r3, [r4, #48]	; 0x30
 8002db0:	bd10      	pop	{r4, pc}
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	0800312d 	.word	0x0800312d
 8002db8:	08003155 	.word	0x08003155
 8002dbc:	0800318d 	.word	0x0800318d
 8002dc0:	080031b9 	.word	0x080031b9

08002dc4 <_cleanup_r>:
 8002dc4:	b510      	push	{r4, lr}
 8002dc6:	4902      	ldr	r1, [pc, #8]	; (8002dd0 <_cleanup_r+0xc>)
 8002dc8:	f000 f8ba 	bl	8002f40 <_fwalk_reent>
 8002dcc:	bd10      	pop	{r4, pc}
 8002dce:	46c0      	nop			; (mov r8, r8)
 8002dd0:	08002cfd 	.word	0x08002cfd

08002dd4 <__sfmoreglue>:
 8002dd4:	b570      	push	{r4, r5, r6, lr}
 8002dd6:	2568      	movs	r5, #104	; 0x68
 8002dd8:	1e4a      	subs	r2, r1, #1
 8002dda:	4355      	muls	r5, r2
 8002ddc:	000e      	movs	r6, r1
 8002dde:	0029      	movs	r1, r5
 8002de0:	3174      	adds	r1, #116	; 0x74
 8002de2:	f7ff fad5 	bl	8002390 <_malloc_r>
 8002de6:	1e04      	subs	r4, r0, #0
 8002de8:	d008      	beq.n	8002dfc <__sfmoreglue+0x28>
 8002dea:	2100      	movs	r1, #0
 8002dec:	002a      	movs	r2, r5
 8002dee:	6001      	str	r1, [r0, #0]
 8002df0:	6046      	str	r6, [r0, #4]
 8002df2:	300c      	adds	r0, #12
 8002df4:	60a0      	str	r0, [r4, #8]
 8002df6:	3268      	adds	r2, #104	; 0x68
 8002df8:	f7ff fa78 	bl	80022ec <memset>
 8002dfc:	0020      	movs	r0, r4
 8002dfe:	bd70      	pop	{r4, r5, r6, pc}

08002e00 <__sfp_lock_acquire>:
 8002e00:	b510      	push	{r4, lr}
 8002e02:	4802      	ldr	r0, [pc, #8]	; (8002e0c <__sfp_lock_acquire+0xc>)
 8002e04:	f000 f8bd 	bl	8002f82 <__retarget_lock_acquire_recursive>
 8002e08:	bd10      	pop	{r4, pc}
 8002e0a:	46c0      	nop			; (mov r8, r8)
 8002e0c:	20000a88 	.word	0x20000a88

08002e10 <__sfp_lock_release>:
 8002e10:	b510      	push	{r4, lr}
 8002e12:	4802      	ldr	r0, [pc, #8]	; (8002e1c <__sfp_lock_release+0xc>)
 8002e14:	f000 f8b6 	bl	8002f84 <__retarget_lock_release_recursive>
 8002e18:	bd10      	pop	{r4, pc}
 8002e1a:	46c0      	nop			; (mov r8, r8)
 8002e1c:	20000a88 	.word	0x20000a88

08002e20 <__sinit_lock_acquire>:
 8002e20:	b510      	push	{r4, lr}
 8002e22:	4802      	ldr	r0, [pc, #8]	; (8002e2c <__sinit_lock_acquire+0xc>)
 8002e24:	f000 f8ad 	bl	8002f82 <__retarget_lock_acquire_recursive>
 8002e28:	bd10      	pop	{r4, pc}
 8002e2a:	46c0      	nop			; (mov r8, r8)
 8002e2c:	20000a83 	.word	0x20000a83

08002e30 <__sinit_lock_release>:
 8002e30:	b510      	push	{r4, lr}
 8002e32:	4802      	ldr	r0, [pc, #8]	; (8002e3c <__sinit_lock_release+0xc>)
 8002e34:	f000 f8a6 	bl	8002f84 <__retarget_lock_release_recursive>
 8002e38:	bd10      	pop	{r4, pc}
 8002e3a:	46c0      	nop			; (mov r8, r8)
 8002e3c:	20000a83 	.word	0x20000a83

08002e40 <__sinit>:
 8002e40:	b513      	push	{r0, r1, r4, lr}
 8002e42:	0004      	movs	r4, r0
 8002e44:	f7ff ffec 	bl	8002e20 <__sinit_lock_acquire>
 8002e48:	69a3      	ldr	r3, [r4, #24]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d002      	beq.n	8002e54 <__sinit+0x14>
 8002e4e:	f7ff ffef 	bl	8002e30 <__sinit_lock_release>
 8002e52:	bd13      	pop	{r0, r1, r4, pc}
 8002e54:	64a3      	str	r3, [r4, #72]	; 0x48
 8002e56:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002e58:	6523      	str	r3, [r4, #80]	; 0x50
 8002e5a:	4b13      	ldr	r3, [pc, #76]	; (8002ea8 <__sinit+0x68>)
 8002e5c:	4a13      	ldr	r2, [pc, #76]	; (8002eac <__sinit+0x6c>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	62a2      	str	r2, [r4, #40]	; 0x28
 8002e62:	9301      	str	r3, [sp, #4]
 8002e64:	42a3      	cmp	r3, r4
 8002e66:	d101      	bne.n	8002e6c <__sinit+0x2c>
 8002e68:	2301      	movs	r3, #1
 8002e6a:	61a3      	str	r3, [r4, #24]
 8002e6c:	0020      	movs	r0, r4
 8002e6e:	f000 f81f 	bl	8002eb0 <__sfp>
 8002e72:	6060      	str	r0, [r4, #4]
 8002e74:	0020      	movs	r0, r4
 8002e76:	f000 f81b 	bl	8002eb0 <__sfp>
 8002e7a:	60a0      	str	r0, [r4, #8]
 8002e7c:	0020      	movs	r0, r4
 8002e7e:	f000 f817 	bl	8002eb0 <__sfp>
 8002e82:	2200      	movs	r2, #0
 8002e84:	2104      	movs	r1, #4
 8002e86:	60e0      	str	r0, [r4, #12]
 8002e88:	6860      	ldr	r0, [r4, #4]
 8002e8a:	f7ff ff77 	bl	8002d7c <std>
 8002e8e:	2201      	movs	r2, #1
 8002e90:	2109      	movs	r1, #9
 8002e92:	68a0      	ldr	r0, [r4, #8]
 8002e94:	f7ff ff72 	bl	8002d7c <std>
 8002e98:	2202      	movs	r2, #2
 8002e9a:	2112      	movs	r1, #18
 8002e9c:	68e0      	ldr	r0, [r4, #12]
 8002e9e:	f7ff ff6d 	bl	8002d7c <std>
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	61a3      	str	r3, [r4, #24]
 8002ea6:	e7d2      	b.n	8002e4e <__sinit+0xe>
 8002ea8:	08003418 	.word	0x08003418
 8002eac:	08002dc5 	.word	0x08002dc5

08002eb0 <__sfp>:
 8002eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eb2:	0007      	movs	r7, r0
 8002eb4:	f7ff ffa4 	bl	8002e00 <__sfp_lock_acquire>
 8002eb8:	4b1f      	ldr	r3, [pc, #124]	; (8002f38 <__sfp+0x88>)
 8002eba:	681e      	ldr	r6, [r3, #0]
 8002ebc:	69b3      	ldr	r3, [r6, #24]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d102      	bne.n	8002ec8 <__sfp+0x18>
 8002ec2:	0030      	movs	r0, r6
 8002ec4:	f7ff ffbc 	bl	8002e40 <__sinit>
 8002ec8:	3648      	adds	r6, #72	; 0x48
 8002eca:	68b4      	ldr	r4, [r6, #8]
 8002ecc:	6873      	ldr	r3, [r6, #4]
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	d504      	bpl.n	8002edc <__sfp+0x2c>
 8002ed2:	6833      	ldr	r3, [r6, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d022      	beq.n	8002f1e <__sfp+0x6e>
 8002ed8:	6836      	ldr	r6, [r6, #0]
 8002eda:	e7f6      	b.n	8002eca <__sfp+0x1a>
 8002edc:	220c      	movs	r2, #12
 8002ede:	5ea5      	ldrsh	r5, [r4, r2]
 8002ee0:	2d00      	cmp	r5, #0
 8002ee2:	d11a      	bne.n	8002f1a <__sfp+0x6a>
 8002ee4:	0020      	movs	r0, r4
 8002ee6:	4b15      	ldr	r3, [pc, #84]	; (8002f3c <__sfp+0x8c>)
 8002ee8:	3058      	adds	r0, #88	; 0x58
 8002eea:	60e3      	str	r3, [r4, #12]
 8002eec:	6665      	str	r5, [r4, #100]	; 0x64
 8002eee:	f000 f847 	bl	8002f80 <__retarget_lock_init_recursive>
 8002ef2:	f7ff ff8d 	bl	8002e10 <__sfp_lock_release>
 8002ef6:	0020      	movs	r0, r4
 8002ef8:	2208      	movs	r2, #8
 8002efa:	0029      	movs	r1, r5
 8002efc:	6025      	str	r5, [r4, #0]
 8002efe:	60a5      	str	r5, [r4, #8]
 8002f00:	6065      	str	r5, [r4, #4]
 8002f02:	6125      	str	r5, [r4, #16]
 8002f04:	6165      	str	r5, [r4, #20]
 8002f06:	61a5      	str	r5, [r4, #24]
 8002f08:	305c      	adds	r0, #92	; 0x5c
 8002f0a:	f7ff f9ef 	bl	80022ec <memset>
 8002f0e:	6365      	str	r5, [r4, #52]	; 0x34
 8002f10:	63a5      	str	r5, [r4, #56]	; 0x38
 8002f12:	64a5      	str	r5, [r4, #72]	; 0x48
 8002f14:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002f16:	0020      	movs	r0, r4
 8002f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f1a:	3468      	adds	r4, #104	; 0x68
 8002f1c:	e7d7      	b.n	8002ece <__sfp+0x1e>
 8002f1e:	2104      	movs	r1, #4
 8002f20:	0038      	movs	r0, r7
 8002f22:	f7ff ff57 	bl	8002dd4 <__sfmoreglue>
 8002f26:	1e04      	subs	r4, r0, #0
 8002f28:	6030      	str	r0, [r6, #0]
 8002f2a:	d1d5      	bne.n	8002ed8 <__sfp+0x28>
 8002f2c:	f7ff ff70 	bl	8002e10 <__sfp_lock_release>
 8002f30:	230c      	movs	r3, #12
 8002f32:	603b      	str	r3, [r7, #0]
 8002f34:	e7ef      	b.n	8002f16 <__sfp+0x66>
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	08003418 	.word	0x08003418
 8002f3c:	ffff0001 	.word	0xffff0001

08002f40 <_fwalk_reent>:
 8002f40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f42:	0004      	movs	r4, r0
 8002f44:	0006      	movs	r6, r0
 8002f46:	2700      	movs	r7, #0
 8002f48:	9101      	str	r1, [sp, #4]
 8002f4a:	3448      	adds	r4, #72	; 0x48
 8002f4c:	6863      	ldr	r3, [r4, #4]
 8002f4e:	68a5      	ldr	r5, [r4, #8]
 8002f50:	9300      	str	r3, [sp, #0]
 8002f52:	9b00      	ldr	r3, [sp, #0]
 8002f54:	3b01      	subs	r3, #1
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	d504      	bpl.n	8002f64 <_fwalk_reent+0x24>
 8002f5a:	6824      	ldr	r4, [r4, #0]
 8002f5c:	2c00      	cmp	r4, #0
 8002f5e:	d1f5      	bne.n	8002f4c <_fwalk_reent+0xc>
 8002f60:	0038      	movs	r0, r7
 8002f62:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002f64:	89ab      	ldrh	r3, [r5, #12]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d908      	bls.n	8002f7c <_fwalk_reent+0x3c>
 8002f6a:	220e      	movs	r2, #14
 8002f6c:	5eab      	ldrsh	r3, [r5, r2]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	d004      	beq.n	8002f7c <_fwalk_reent+0x3c>
 8002f72:	0029      	movs	r1, r5
 8002f74:	0030      	movs	r0, r6
 8002f76:	9b01      	ldr	r3, [sp, #4]
 8002f78:	4798      	blx	r3
 8002f7a:	4307      	orrs	r7, r0
 8002f7c:	3568      	adds	r5, #104	; 0x68
 8002f7e:	e7e8      	b.n	8002f52 <_fwalk_reent+0x12>

08002f80 <__retarget_lock_init_recursive>:
 8002f80:	4770      	bx	lr

08002f82 <__retarget_lock_acquire_recursive>:
 8002f82:	4770      	bx	lr

08002f84 <__retarget_lock_release_recursive>:
 8002f84:	4770      	bx	lr
	...

08002f88 <__swhatbuf_r>:
 8002f88:	b570      	push	{r4, r5, r6, lr}
 8002f8a:	000e      	movs	r6, r1
 8002f8c:	001d      	movs	r5, r3
 8002f8e:	230e      	movs	r3, #14
 8002f90:	5ec9      	ldrsh	r1, [r1, r3]
 8002f92:	0014      	movs	r4, r2
 8002f94:	b096      	sub	sp, #88	; 0x58
 8002f96:	2900      	cmp	r1, #0
 8002f98:	da07      	bge.n	8002faa <__swhatbuf_r+0x22>
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	602b      	str	r3, [r5, #0]
 8002f9e:	89b3      	ldrh	r3, [r6, #12]
 8002fa0:	061b      	lsls	r3, r3, #24
 8002fa2:	d411      	bmi.n	8002fc8 <__swhatbuf_r+0x40>
 8002fa4:	2380      	movs	r3, #128	; 0x80
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	e00f      	b.n	8002fca <__swhatbuf_r+0x42>
 8002faa:	466a      	mov	r2, sp
 8002fac:	f000 f930 	bl	8003210 <_fstat_r>
 8002fb0:	2800      	cmp	r0, #0
 8002fb2:	dbf2      	blt.n	8002f9a <__swhatbuf_r+0x12>
 8002fb4:	23f0      	movs	r3, #240	; 0xf0
 8002fb6:	9901      	ldr	r1, [sp, #4]
 8002fb8:	021b      	lsls	r3, r3, #8
 8002fba:	4019      	ands	r1, r3
 8002fbc:	4b05      	ldr	r3, [pc, #20]	; (8002fd4 <__swhatbuf_r+0x4c>)
 8002fbe:	18c9      	adds	r1, r1, r3
 8002fc0:	424b      	negs	r3, r1
 8002fc2:	4159      	adcs	r1, r3
 8002fc4:	6029      	str	r1, [r5, #0]
 8002fc6:	e7ed      	b.n	8002fa4 <__swhatbuf_r+0x1c>
 8002fc8:	2340      	movs	r3, #64	; 0x40
 8002fca:	2000      	movs	r0, #0
 8002fcc:	6023      	str	r3, [r4, #0]
 8002fce:	b016      	add	sp, #88	; 0x58
 8002fd0:	bd70      	pop	{r4, r5, r6, pc}
 8002fd2:	46c0      	nop			; (mov r8, r8)
 8002fd4:	ffffe000 	.word	0xffffe000

08002fd8 <__smakebuf_r>:
 8002fd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002fda:	2602      	movs	r6, #2
 8002fdc:	898b      	ldrh	r3, [r1, #12]
 8002fde:	0005      	movs	r5, r0
 8002fe0:	000c      	movs	r4, r1
 8002fe2:	4233      	tst	r3, r6
 8002fe4:	d006      	beq.n	8002ff4 <__smakebuf_r+0x1c>
 8002fe6:	0023      	movs	r3, r4
 8002fe8:	3347      	adds	r3, #71	; 0x47
 8002fea:	6023      	str	r3, [r4, #0]
 8002fec:	6123      	str	r3, [r4, #16]
 8002fee:	2301      	movs	r3, #1
 8002ff0:	6163      	str	r3, [r4, #20]
 8002ff2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002ff4:	466a      	mov	r2, sp
 8002ff6:	ab01      	add	r3, sp, #4
 8002ff8:	f7ff ffc6 	bl	8002f88 <__swhatbuf_r>
 8002ffc:	9900      	ldr	r1, [sp, #0]
 8002ffe:	0007      	movs	r7, r0
 8003000:	0028      	movs	r0, r5
 8003002:	f7ff f9c5 	bl	8002390 <_malloc_r>
 8003006:	2800      	cmp	r0, #0
 8003008:	d108      	bne.n	800301c <__smakebuf_r+0x44>
 800300a:	220c      	movs	r2, #12
 800300c:	5ea3      	ldrsh	r3, [r4, r2]
 800300e:	059a      	lsls	r2, r3, #22
 8003010:	d4ef      	bmi.n	8002ff2 <__smakebuf_r+0x1a>
 8003012:	2203      	movs	r2, #3
 8003014:	4393      	bics	r3, r2
 8003016:	431e      	orrs	r6, r3
 8003018:	81a6      	strh	r6, [r4, #12]
 800301a:	e7e4      	b.n	8002fe6 <__smakebuf_r+0xe>
 800301c:	4b0f      	ldr	r3, [pc, #60]	; (800305c <__smakebuf_r+0x84>)
 800301e:	62ab      	str	r3, [r5, #40]	; 0x28
 8003020:	2380      	movs	r3, #128	; 0x80
 8003022:	89a2      	ldrh	r2, [r4, #12]
 8003024:	6020      	str	r0, [r4, #0]
 8003026:	4313      	orrs	r3, r2
 8003028:	81a3      	strh	r3, [r4, #12]
 800302a:	9b00      	ldr	r3, [sp, #0]
 800302c:	6120      	str	r0, [r4, #16]
 800302e:	6163      	str	r3, [r4, #20]
 8003030:	9b01      	ldr	r3, [sp, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00d      	beq.n	8003052 <__smakebuf_r+0x7a>
 8003036:	0028      	movs	r0, r5
 8003038:	230e      	movs	r3, #14
 800303a:	5ee1      	ldrsh	r1, [r4, r3]
 800303c:	f000 f8fa 	bl	8003234 <_isatty_r>
 8003040:	2800      	cmp	r0, #0
 8003042:	d006      	beq.n	8003052 <__smakebuf_r+0x7a>
 8003044:	2203      	movs	r2, #3
 8003046:	89a3      	ldrh	r3, [r4, #12]
 8003048:	4393      	bics	r3, r2
 800304a:	001a      	movs	r2, r3
 800304c:	2301      	movs	r3, #1
 800304e:	4313      	orrs	r3, r2
 8003050:	81a3      	strh	r3, [r4, #12]
 8003052:	89a0      	ldrh	r0, [r4, #12]
 8003054:	4307      	orrs	r7, r0
 8003056:	81a7      	strh	r7, [r4, #12]
 8003058:	e7cb      	b.n	8002ff2 <__smakebuf_r+0x1a>
 800305a:	46c0      	nop			; (mov r8, r8)
 800305c:	08002dc5 	.word	0x08002dc5

08003060 <memchr>:
 8003060:	b2c9      	uxtb	r1, r1
 8003062:	1882      	adds	r2, r0, r2
 8003064:	4290      	cmp	r0, r2
 8003066:	d101      	bne.n	800306c <memchr+0xc>
 8003068:	2000      	movs	r0, #0
 800306a:	4770      	bx	lr
 800306c:	7803      	ldrb	r3, [r0, #0]
 800306e:	428b      	cmp	r3, r1
 8003070:	d0fb      	beq.n	800306a <memchr+0xa>
 8003072:	3001      	adds	r0, #1
 8003074:	e7f6      	b.n	8003064 <memchr+0x4>
	...

08003078 <__malloc_lock>:
 8003078:	b510      	push	{r4, lr}
 800307a:	4802      	ldr	r0, [pc, #8]	; (8003084 <__malloc_lock+0xc>)
 800307c:	f7ff ff81 	bl	8002f82 <__retarget_lock_acquire_recursive>
 8003080:	bd10      	pop	{r4, pc}
 8003082:	46c0      	nop			; (mov r8, r8)
 8003084:	20000a84 	.word	0x20000a84

08003088 <__malloc_unlock>:
 8003088:	b510      	push	{r4, lr}
 800308a:	4802      	ldr	r0, [pc, #8]	; (8003094 <__malloc_unlock+0xc>)
 800308c:	f7ff ff7a 	bl	8002f84 <__retarget_lock_release_recursive>
 8003090:	bd10      	pop	{r4, pc}
 8003092:	46c0      	nop			; (mov r8, r8)
 8003094:	20000a84 	.word	0x20000a84

08003098 <_raise_r>:
 8003098:	b570      	push	{r4, r5, r6, lr}
 800309a:	0004      	movs	r4, r0
 800309c:	000d      	movs	r5, r1
 800309e:	291f      	cmp	r1, #31
 80030a0:	d904      	bls.n	80030ac <_raise_r+0x14>
 80030a2:	2316      	movs	r3, #22
 80030a4:	6003      	str	r3, [r0, #0]
 80030a6:	2001      	movs	r0, #1
 80030a8:	4240      	negs	r0, r0
 80030aa:	bd70      	pop	{r4, r5, r6, pc}
 80030ac:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d004      	beq.n	80030bc <_raise_r+0x24>
 80030b2:	008a      	lsls	r2, r1, #2
 80030b4:	189b      	adds	r3, r3, r2
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	2a00      	cmp	r2, #0
 80030ba:	d108      	bne.n	80030ce <_raise_r+0x36>
 80030bc:	0020      	movs	r0, r4
 80030be:	f000 f831 	bl	8003124 <_getpid_r>
 80030c2:	002a      	movs	r2, r5
 80030c4:	0001      	movs	r1, r0
 80030c6:	0020      	movs	r0, r4
 80030c8:	f000 f81a 	bl	8003100 <_kill_r>
 80030cc:	e7ed      	b.n	80030aa <_raise_r+0x12>
 80030ce:	2000      	movs	r0, #0
 80030d0:	2a01      	cmp	r2, #1
 80030d2:	d0ea      	beq.n	80030aa <_raise_r+0x12>
 80030d4:	1c51      	adds	r1, r2, #1
 80030d6:	d103      	bne.n	80030e0 <_raise_r+0x48>
 80030d8:	2316      	movs	r3, #22
 80030da:	3001      	adds	r0, #1
 80030dc:	6023      	str	r3, [r4, #0]
 80030de:	e7e4      	b.n	80030aa <_raise_r+0x12>
 80030e0:	2400      	movs	r4, #0
 80030e2:	0028      	movs	r0, r5
 80030e4:	601c      	str	r4, [r3, #0]
 80030e6:	4790      	blx	r2
 80030e8:	0020      	movs	r0, r4
 80030ea:	e7de      	b.n	80030aa <_raise_r+0x12>

080030ec <raise>:
 80030ec:	b510      	push	{r4, lr}
 80030ee:	4b03      	ldr	r3, [pc, #12]	; (80030fc <raise+0x10>)
 80030f0:	0001      	movs	r1, r0
 80030f2:	6818      	ldr	r0, [r3, #0]
 80030f4:	f7ff ffd0 	bl	8003098 <_raise_r>
 80030f8:	bd10      	pop	{r4, pc}
 80030fa:	46c0      	nop			; (mov r8, r8)
 80030fc:	20000020 	.word	0x20000020

08003100 <_kill_r>:
 8003100:	2300      	movs	r3, #0
 8003102:	b570      	push	{r4, r5, r6, lr}
 8003104:	4d06      	ldr	r5, [pc, #24]	; (8003120 <_kill_r+0x20>)
 8003106:	0004      	movs	r4, r0
 8003108:	0008      	movs	r0, r1
 800310a:	0011      	movs	r1, r2
 800310c:	602b      	str	r3, [r5, #0]
 800310e:	f7fd fb5f 	bl	80007d0 <_kill>
 8003112:	1c43      	adds	r3, r0, #1
 8003114:	d103      	bne.n	800311e <_kill_r+0x1e>
 8003116:	682b      	ldr	r3, [r5, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d000      	beq.n	800311e <_kill_r+0x1e>
 800311c:	6023      	str	r3, [r4, #0]
 800311e:	bd70      	pop	{r4, r5, r6, pc}
 8003120:	20000a8c 	.word	0x20000a8c

08003124 <_getpid_r>:
 8003124:	b510      	push	{r4, lr}
 8003126:	f7fd fb51 	bl	80007cc <_getpid>
 800312a:	bd10      	pop	{r4, pc}

0800312c <__sread>:
 800312c:	b570      	push	{r4, r5, r6, lr}
 800312e:	000c      	movs	r4, r1
 8003130:	250e      	movs	r5, #14
 8003132:	5f49      	ldrsh	r1, [r1, r5]
 8003134:	f000 f8a4 	bl	8003280 <_read_r>
 8003138:	2800      	cmp	r0, #0
 800313a:	db03      	blt.n	8003144 <__sread+0x18>
 800313c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800313e:	181b      	adds	r3, r3, r0
 8003140:	6563      	str	r3, [r4, #84]	; 0x54
 8003142:	bd70      	pop	{r4, r5, r6, pc}
 8003144:	89a3      	ldrh	r3, [r4, #12]
 8003146:	4a02      	ldr	r2, [pc, #8]	; (8003150 <__sread+0x24>)
 8003148:	4013      	ands	r3, r2
 800314a:	81a3      	strh	r3, [r4, #12]
 800314c:	e7f9      	b.n	8003142 <__sread+0x16>
 800314e:	46c0      	nop			; (mov r8, r8)
 8003150:	ffffefff 	.word	0xffffefff

08003154 <__swrite>:
 8003154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003156:	001f      	movs	r7, r3
 8003158:	898b      	ldrh	r3, [r1, #12]
 800315a:	0005      	movs	r5, r0
 800315c:	000c      	movs	r4, r1
 800315e:	0016      	movs	r6, r2
 8003160:	05db      	lsls	r3, r3, #23
 8003162:	d505      	bpl.n	8003170 <__swrite+0x1c>
 8003164:	230e      	movs	r3, #14
 8003166:	5ec9      	ldrsh	r1, [r1, r3]
 8003168:	2200      	movs	r2, #0
 800316a:	2302      	movs	r3, #2
 800316c:	f000 f874 	bl	8003258 <_lseek_r>
 8003170:	89a3      	ldrh	r3, [r4, #12]
 8003172:	4a05      	ldr	r2, [pc, #20]	; (8003188 <__swrite+0x34>)
 8003174:	0028      	movs	r0, r5
 8003176:	4013      	ands	r3, r2
 8003178:	81a3      	strh	r3, [r4, #12]
 800317a:	0032      	movs	r2, r6
 800317c:	230e      	movs	r3, #14
 800317e:	5ee1      	ldrsh	r1, [r4, r3]
 8003180:	003b      	movs	r3, r7
 8003182:	f000 f81f 	bl	80031c4 <_write_r>
 8003186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003188:	ffffefff 	.word	0xffffefff

0800318c <__sseek>:
 800318c:	b570      	push	{r4, r5, r6, lr}
 800318e:	000c      	movs	r4, r1
 8003190:	250e      	movs	r5, #14
 8003192:	5f49      	ldrsh	r1, [r1, r5]
 8003194:	f000 f860 	bl	8003258 <_lseek_r>
 8003198:	89a3      	ldrh	r3, [r4, #12]
 800319a:	1c42      	adds	r2, r0, #1
 800319c:	d103      	bne.n	80031a6 <__sseek+0x1a>
 800319e:	4a05      	ldr	r2, [pc, #20]	; (80031b4 <__sseek+0x28>)
 80031a0:	4013      	ands	r3, r2
 80031a2:	81a3      	strh	r3, [r4, #12]
 80031a4:	bd70      	pop	{r4, r5, r6, pc}
 80031a6:	2280      	movs	r2, #128	; 0x80
 80031a8:	0152      	lsls	r2, r2, #5
 80031aa:	4313      	orrs	r3, r2
 80031ac:	81a3      	strh	r3, [r4, #12]
 80031ae:	6560      	str	r0, [r4, #84]	; 0x54
 80031b0:	e7f8      	b.n	80031a4 <__sseek+0x18>
 80031b2:	46c0      	nop			; (mov r8, r8)
 80031b4:	ffffefff 	.word	0xffffefff

080031b8 <__sclose>:
 80031b8:	b510      	push	{r4, lr}
 80031ba:	230e      	movs	r3, #14
 80031bc:	5ec9      	ldrsh	r1, [r1, r3]
 80031be:	f000 f815 	bl	80031ec <_close_r>
 80031c2:	bd10      	pop	{r4, pc}

080031c4 <_write_r>:
 80031c4:	b570      	push	{r4, r5, r6, lr}
 80031c6:	0004      	movs	r4, r0
 80031c8:	0008      	movs	r0, r1
 80031ca:	0011      	movs	r1, r2
 80031cc:	001a      	movs	r2, r3
 80031ce:	2300      	movs	r3, #0
 80031d0:	4d05      	ldr	r5, [pc, #20]	; (80031e8 <_write_r+0x24>)
 80031d2:	602b      	str	r3, [r5, #0]
 80031d4:	f7fd fb18 	bl	8000808 <_write>
 80031d8:	1c43      	adds	r3, r0, #1
 80031da:	d103      	bne.n	80031e4 <_write_r+0x20>
 80031dc:	682b      	ldr	r3, [r5, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d000      	beq.n	80031e4 <_write_r+0x20>
 80031e2:	6023      	str	r3, [r4, #0]
 80031e4:	bd70      	pop	{r4, r5, r6, pc}
 80031e6:	46c0      	nop			; (mov r8, r8)
 80031e8:	20000a8c 	.word	0x20000a8c

080031ec <_close_r>:
 80031ec:	2300      	movs	r3, #0
 80031ee:	b570      	push	{r4, r5, r6, lr}
 80031f0:	4d06      	ldr	r5, [pc, #24]	; (800320c <_close_r+0x20>)
 80031f2:	0004      	movs	r4, r0
 80031f4:	0008      	movs	r0, r1
 80031f6:	602b      	str	r3, [r5, #0]
 80031f8:	f7fd fb14 	bl	8000824 <_close>
 80031fc:	1c43      	adds	r3, r0, #1
 80031fe:	d103      	bne.n	8003208 <_close_r+0x1c>
 8003200:	682b      	ldr	r3, [r5, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d000      	beq.n	8003208 <_close_r+0x1c>
 8003206:	6023      	str	r3, [r4, #0]
 8003208:	bd70      	pop	{r4, r5, r6, pc}
 800320a:	46c0      	nop			; (mov r8, r8)
 800320c:	20000a8c 	.word	0x20000a8c

08003210 <_fstat_r>:
 8003210:	2300      	movs	r3, #0
 8003212:	b570      	push	{r4, r5, r6, lr}
 8003214:	4d06      	ldr	r5, [pc, #24]	; (8003230 <_fstat_r+0x20>)
 8003216:	0004      	movs	r4, r0
 8003218:	0008      	movs	r0, r1
 800321a:	0011      	movs	r1, r2
 800321c:	602b      	str	r3, [r5, #0]
 800321e:	f7fd fb05 	bl	800082c <_fstat>
 8003222:	1c43      	adds	r3, r0, #1
 8003224:	d103      	bne.n	800322e <_fstat_r+0x1e>
 8003226:	682b      	ldr	r3, [r5, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d000      	beq.n	800322e <_fstat_r+0x1e>
 800322c:	6023      	str	r3, [r4, #0]
 800322e:	bd70      	pop	{r4, r5, r6, pc}
 8003230:	20000a8c 	.word	0x20000a8c

08003234 <_isatty_r>:
 8003234:	2300      	movs	r3, #0
 8003236:	b570      	push	{r4, r5, r6, lr}
 8003238:	4d06      	ldr	r5, [pc, #24]	; (8003254 <_isatty_r+0x20>)
 800323a:	0004      	movs	r4, r0
 800323c:	0008      	movs	r0, r1
 800323e:	602b      	str	r3, [r5, #0]
 8003240:	f7fd fafa 	bl	8000838 <_isatty>
 8003244:	1c43      	adds	r3, r0, #1
 8003246:	d103      	bne.n	8003250 <_isatty_r+0x1c>
 8003248:	682b      	ldr	r3, [r5, #0]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d000      	beq.n	8003250 <_isatty_r+0x1c>
 800324e:	6023      	str	r3, [r4, #0]
 8003250:	bd70      	pop	{r4, r5, r6, pc}
 8003252:	46c0      	nop			; (mov r8, r8)
 8003254:	20000a8c 	.word	0x20000a8c

08003258 <_lseek_r>:
 8003258:	b570      	push	{r4, r5, r6, lr}
 800325a:	0004      	movs	r4, r0
 800325c:	0008      	movs	r0, r1
 800325e:	0011      	movs	r1, r2
 8003260:	001a      	movs	r2, r3
 8003262:	2300      	movs	r3, #0
 8003264:	4d05      	ldr	r5, [pc, #20]	; (800327c <_lseek_r+0x24>)
 8003266:	602b      	str	r3, [r5, #0]
 8003268:	f7fd fae8 	bl	800083c <_lseek>
 800326c:	1c43      	adds	r3, r0, #1
 800326e:	d103      	bne.n	8003278 <_lseek_r+0x20>
 8003270:	682b      	ldr	r3, [r5, #0]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d000      	beq.n	8003278 <_lseek_r+0x20>
 8003276:	6023      	str	r3, [r4, #0]
 8003278:	bd70      	pop	{r4, r5, r6, pc}
 800327a:	46c0      	nop			; (mov r8, r8)
 800327c:	20000a8c 	.word	0x20000a8c

08003280 <_read_r>:
 8003280:	b570      	push	{r4, r5, r6, lr}
 8003282:	0004      	movs	r4, r0
 8003284:	0008      	movs	r0, r1
 8003286:	0011      	movs	r1, r2
 8003288:	001a      	movs	r2, r3
 800328a:	2300      	movs	r3, #0
 800328c:	4d05      	ldr	r5, [pc, #20]	; (80032a4 <_read_r+0x24>)
 800328e:	602b      	str	r3, [r5, #0]
 8003290:	f7fd faac 	bl	80007ec <_read>
 8003294:	1c43      	adds	r3, r0, #1
 8003296:	d103      	bne.n	80032a0 <_read_r+0x20>
 8003298:	682b      	ldr	r3, [r5, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d000      	beq.n	80032a0 <_read_r+0x20>
 800329e:	6023      	str	r3, [r4, #0]
 80032a0:	bd70      	pop	{r4, r5, r6, pc}
 80032a2:	46c0      	nop			; (mov r8, r8)
 80032a4:	20000a8c 	.word	0x20000a8c

080032a8 <_init>:
 80032a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032aa:	46c0      	nop			; (mov r8, r8)
 80032ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ae:	bc08      	pop	{r3}
 80032b0:	469e      	mov	lr, r3
 80032b2:	4770      	bx	lr

080032b4 <_fini>:
 80032b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032b6:	46c0      	nop			; (mov r8, r8)
 80032b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ba:	bc08      	pop	{r3}
 80032bc:	469e      	mov	lr, r3
 80032be:	4770      	bx	lr
