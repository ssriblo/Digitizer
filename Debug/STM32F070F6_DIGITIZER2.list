
STM32F070F6_DIGITIZER2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003234  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  080032f4  080032f4  000132f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034e4  080034e4  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  080034e4  080034e4  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034e4  080034e4  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034e4  080034e4  000134e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034e8  080034e8  000134e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080034ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a14  20000084  08003570  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a98  08003570  00020a98  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bd47  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032d0  00000000  00000000  0003bdf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00014955  00000000  00000000  0003f0c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c20  00000000  00000000  00053a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000021d8  00000000  00000000  00054638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001278b  00000000  00000000  00056810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001aaf0  00000000  00000000  00068f9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006a238  00000000  00000000  00083a8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000edcc3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003000  00000000  00000000  000edd18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000084 	.word	0x20000084
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080032dc 	.word	0x080032dc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000088 	.word	0x20000088
 8000104:	080032dc 	.word	0x080032dc

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <circular_buf_init>:
	}
}


cbuf_handle_t circular_buf_init(uint16_t* buffer, size_t size)
{
 8000234:	b570      	push	{r4, r5, r6, lr}
 8000236:	0004      	movs	r4, r0
 8000238:	000d      	movs	r5, r1
	assert(buffer && size > 1);
 800023a:	2800      	cmp	r0, #0
 800023c:	d00c      	beq.n	8000258 <circular_buf_init+0x24>
 800023e:	2901      	cmp	r1, #1
 8000240:	d90a      	bls.n	8000258 <circular_buf_init+0x24>

	cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
 8000242:	2010      	movs	r0, #16
 8000244:	f002 f862 	bl	800230c <malloc>
	assert(cbuf);
 8000248:	2800      	cmp	r0, #0
 800024a:	d00b      	beq.n	8000264 <circular_buf_init+0x30>

void circular_buf_reset(cbuf_handle_t cbuf)
{
    assert(cbuf);

    cbuf->head = 0;
 800024c:	2300      	movs	r3, #0
	cbuf->max = size;
 800024e:	60c5      	str	r5, [r0, #12]
	cbuf->buffer = buffer;
 8000250:	6004      	str	r4, [r0, #0]
    cbuf->head = 0;
 8000252:	6043      	str	r3, [r0, #4]
    cbuf->tail = 0;
 8000254:	6083      	str	r3, [r0, #8]
}
 8000256:	bd70      	pop	{r4, r5, r6, pc}
	assert(buffer && size > 1);
 8000258:	2132      	movs	r1, #50	; 0x32
 800025a:	4b05      	ldr	r3, [pc, #20]	; (8000270 <circular_buf_init+0x3c>)
 800025c:	4a05      	ldr	r2, [pc, #20]	; (8000274 <circular_buf_init+0x40>)
 800025e:	4806      	ldr	r0, [pc, #24]	; (8000278 <circular_buf_init+0x44>)
 8000260:	f001 fffc 	bl	800225c <__assert_func>
	assert(cbuf);
 8000264:	2135      	movs	r1, #53	; 0x35
 8000266:	4b05      	ldr	r3, [pc, #20]	; (800027c <circular_buf_init+0x48>)
 8000268:	4a02      	ldr	r2, [pc, #8]	; (8000274 <circular_buf_init+0x40>)
 800026a:	4803      	ldr	r0, [pc, #12]	; (8000278 <circular_buf_init+0x44>)
 800026c:	f001 fff6 	bl	800225c <__assert_func>
 8000270:	08003330 	.word	0x08003330
 8000274:	0800337c 	.word	0x0800337c
 8000278:	080032fc 	.word	0x080032fc
 800027c:	080032f4 	.word	0x080032f4

08000280 <circular_buf_size>:
}

size_t circular_buf_size(cbuf_handle_t cbuf)
{
 8000280:	0003      	movs	r3, r0
 8000282:	b570      	push	{r4, r5, r6, lr}
	assert(cbuf);
 8000284:	2800      	cmp	r0, #0
 8000286:	d011      	beq.n	80002ac <circular_buf_size+0x2c>
}

bool circular_buf_full(circular_buf_t* cbuf)
{
	// We need to handle the wraparound case
	size_t head = cbuf->head + 1;
 8000288:	685c      	ldr	r4, [r3, #4]
	size_t size = cbuf->max;
 800028a:	68c0      	ldr	r0, [r0, #12]
	size_t head = cbuf->head + 1;
 800028c:	1c61      	adds	r1, r4, #1
	if(head == cbuf->max)
	{
		head = 0;
 800028e:	1a42      	subs	r2, r0, r1
 8000290:	1e55      	subs	r5, r2, #1
 8000292:	41aa      	sbcs	r2, r5
	}

	return head == cbuf->tail;
 8000294:	689b      	ldr	r3, [r3, #8]
		head = 0;
 8000296:	4252      	negs	r2, r2
 8000298:	4011      	ands	r1, r2
	if(!circular_buf_full(cbuf))
 800029a:	428b      	cmp	r3, r1
 800029c:	d002      	beq.n	80002a4 <circular_buf_size+0x24>
		if(cbuf->head >= cbuf->tail)
 800029e:	429c      	cmp	r4, r3
 80002a0:	d301      	bcc.n	80002a6 <circular_buf_size+0x26>
			size = (cbuf->head - cbuf->tail);
 80002a2:	1ae0      	subs	r0, r4, r3
}
 80002a4:	bd70      	pop	{r4, r5, r6, pc}
			size = (cbuf->max + cbuf->head - cbuf->tail);
 80002a6:	1900      	adds	r0, r0, r4
 80002a8:	1ac0      	subs	r0, r0, r3
	return size;
 80002aa:	e7fb      	b.n	80002a4 <circular_buf_size+0x24>
	assert(cbuf);
 80002ac:	2150      	movs	r1, #80	; 0x50
 80002ae:	4b02      	ldr	r3, [pc, #8]	; (80002b8 <circular_buf_size+0x38>)
 80002b0:	4a02      	ldr	r2, [pc, #8]	; (80002bc <circular_buf_size+0x3c>)
 80002b2:	4803      	ldr	r0, [pc, #12]	; (80002c0 <circular_buf_size+0x40>)
 80002b4:	f001 ffd2 	bl	800225c <__assert_func>
 80002b8:	080032f4 	.word	0x080032f4
 80002bc:	08003390 	.word	0x08003390
 80002c0:	080032fc 	.word	0x080032fc

080002c4 <circular_buf_put>:
{
 80002c4:	b510      	push	{r4, lr}
	assert(cbuf && cbuf->buffer);
 80002c6:	2800      	cmp	r0, #0
 80002c8:	d022      	beq.n	8000310 <circular_buf_put+0x4c>
 80002ca:	6802      	ldr	r2, [r0, #0]
 80002cc:	2a00      	cmp	r2, #0
 80002ce:	d01f      	beq.n	8000310 <circular_buf_put+0x4c>
    cbuf->buffer[cbuf->head] = data;
 80002d0:	6843      	ldr	r3, [r0, #4]
 80002d2:	005c      	lsls	r4, r3, #1
 80002d4:	52a1      	strh	r1, [r4, r2]
	if(head == cbuf->max)
 80002d6:	68c2      	ldr	r2, [r0, #12]
	size_t head = cbuf->head + 1;
 80002d8:	3301      	adds	r3, #1
	if(head == cbuf->max)
 80002da:	4293      	cmp	r3, r2
 80002dc:	d00b      	beq.n	80002f6 <circular_buf_put+0x32>
	if(circular_buf_full(cbuf))
 80002de:	6881      	ldr	r1, [r0, #8]
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d001      	beq.n	80002e8 <circular_buf_put+0x24>
    if(++(cbuf->head) == cbuf->max)
 80002e4:	6043      	str	r3, [r0, #4]
}
 80002e6:	bd10      	pop	{r4, pc}
    	if(++(cbuf->tail) == cbuf->max)
 80002e8:	1c59      	adds	r1, r3, #1
 80002ea:	6081      	str	r1, [r0, #8]
 80002ec:	428a      	cmp	r2, r1
 80002ee:	d1f9      	bne.n	80002e4 <circular_buf_put+0x20>
    		cbuf->tail = 0;
 80002f0:	2200      	movs	r2, #0
 80002f2:	6082      	str	r2, [r0, #8]
 80002f4:	e7f6      	b.n	80002e4 <circular_buf_put+0x20>
	if(circular_buf_full(cbuf))
 80002f6:	6882      	ldr	r2, [r0, #8]
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	d002      	beq.n	8000302 <circular_buf_put+0x3e>
		cbuf->head = 0;
 80002fc:	2300      	movs	r3, #0
 80002fe:	6043      	str	r3, [r0, #4]
}
 8000300:	e7f1      	b.n	80002e6 <circular_buf_put+0x22>
    	if(++(cbuf->tail) == cbuf->max)
 8000302:	2101      	movs	r1, #1
 8000304:	6081      	str	r1, [r0, #8]
 8000306:	2b01      	cmp	r3, #1
 8000308:	d1f8      	bne.n	80002fc <circular_buf_put+0x38>
    		cbuf->tail = 0;
 800030a:	6082      	str	r2, [r0, #8]
    if(++(cbuf->head) == cbuf->max)
 800030c:	6043      	str	r3, [r0, #4]
 800030e:	e7f5      	b.n	80002fc <circular_buf_put+0x38>
	assert(cbuf && cbuf->buffer);
 8000310:	216d      	movs	r1, #109	; 0x6d
 8000312:	4b02      	ldr	r3, [pc, #8]	; (800031c <circular_buf_put+0x58>)
 8000314:	4a02      	ldr	r2, [pc, #8]	; (8000320 <circular_buf_put+0x5c>)
 8000316:	4803      	ldr	r0, [pc, #12]	; (8000324 <circular_buf_put+0x60>)
 8000318:	f001 ffa0 	bl	800225c <__assert_func>
 800031c:	08003344 	.word	0x08003344
 8000320:	080033a4 	.word	0x080033a4
 8000324:	080032fc 	.word	0x080032fc

08000328 <circular_buf_get>:
{
 8000328:	0003      	movs	r3, r0
 800032a:	b510      	push	{r4, lr}
    assert(cbuf && data && cbuf->buffer);
 800032c:	2800      	cmp	r0, #0
 800032e:	d016      	beq.n	800035e <circular_buf_get+0x36>
 8000330:	2900      	cmp	r1, #0
 8000332:	d014      	beq.n	800035e <circular_buf_get+0x36>
 8000334:	6800      	ldr	r0, [r0, #0]
 8000336:	2800      	cmp	r0, #0
 8000338:	d011      	beq.n	800035e <circular_buf_get+0x36>
    return cbuf->head == cbuf->tail;
 800033a:	689a      	ldr	r2, [r3, #8]
    if(!circular_buf_empty(cbuf))
 800033c:	685c      	ldr	r4, [r3, #4]
 800033e:	4294      	cmp	r4, r2
 8000340:	d00a      	beq.n	8000358 <circular_buf_get+0x30>
        *data = cbuf->buffer[cbuf->tail];
 8000342:	0054      	lsls	r4, r2, #1
 8000344:	5a20      	ldrh	r0, [r4, r0]
	if(++(cbuf->tail) == cbuf->max)
 8000346:	3201      	adds	r2, #1
        *data = cbuf->buffer[cbuf->tail];
 8000348:	8008      	strh	r0, [r1, #0]
	if(++(cbuf->tail) == cbuf->max)
 800034a:	68d9      	ldr	r1, [r3, #12]
        r = 0;
 800034c:	2000      	movs	r0, #0
	if(++(cbuf->tail) == cbuf->max)
 800034e:	609a      	str	r2, [r3, #8]
 8000350:	428a      	cmp	r2, r1
 8000352:	d100      	bne.n	8000356 <circular_buf_get+0x2e>
		cbuf->tail = 0;
 8000354:	6098      	str	r0, [r3, #8]
}
 8000356:	bd10      	pop	{r4, pc}
    int r = -1;
 8000358:	2001      	movs	r0, #1
 800035a:	4240      	negs	r0, r0
 800035c:	e7fb      	b.n	8000356 <circular_buf_get+0x2e>
    assert(cbuf && data && cbuf->buffer);
 800035e:	2186      	movs	r1, #134	; 0x86
 8000360:	4b02      	ldr	r3, [pc, #8]	; (800036c <circular_buf_get+0x44>)
 8000362:	4a03      	ldr	r2, [pc, #12]	; (8000370 <circular_buf_get+0x48>)
 8000364:	4803      	ldr	r0, [pc, #12]	; (8000374 <circular_buf_get+0x4c>)
 8000366:	f001 ff79 	bl	800225c <__assert_func>
 800036a:	46c0      	nop			; (mov r8, r8)
 800036c:	0800335c 	.word	0x0800335c
 8000370:	080033b8 	.word	0x080033b8
 8000374:	080032fc 	.word	0x080032fc

08000378 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000378:	b500      	push	{lr}
 800037a:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800037c:	2218      	movs	r2, #24
 800037e:	2100      	movs	r1, #0
 8000380:	a80c      	add	r0, sp, #48	; 0x30
 8000382:	f001 ffcd 	bl	8002320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000386:	2210      	movs	r2, #16
 8000388:	2100      	movs	r1, #0
 800038a:	4668      	mov	r0, sp
 800038c:	f001 ffc8 	bl	8002320 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000390:	2214      	movs	r2, #20
 8000392:	2100      	movs	r1, #0
 8000394:	a805      	add	r0, sp, #20
 8000396:	f001 ffc3 	bl	8002320 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800039a:	2201      	movs	r2, #1
 800039c:	2301      	movs	r3, #1
 800039e:	920a      	str	r2, [sp, #40]	; 0x28
 80003a0:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003a2:	2380      	movs	r3, #128	; 0x80
 80003a4:	2202      	movs	r2, #2
 80003a6:	025b      	lsls	r3, r3, #9
 80003a8:	9212      	str	r2, [sp, #72]	; 0x48
 80003aa:	9313      	str	r3, [sp, #76]	; 0x4c
 80003ac:	2280      	movs	r2, #128	; 0x80
 80003ae:	2300      	movs	r3, #0
 80003b0:	0312      	lsls	r2, r2, #12
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b2:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003b4:	9214      	str	r2, [sp, #80]	; 0x50
 80003b6:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b8:	f000 fd1c 	bl	8000df4 <HAL_RCC_OscConfig>
 80003bc:	2800      	cmp	r0, #0
 80003be:	d001      	beq.n	80003c4 <SystemClock_Config+0x4c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003c0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003c2:	e7fe      	b.n	80003c2 <SystemClock_Config+0x4a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c4:	2207      	movs	r2, #7
 80003c6:	2302      	movs	r3, #2
 80003c8:	9200      	str	r2, [sp, #0]
 80003ca:	9301      	str	r3, [sp, #4]
 80003cc:	2200      	movs	r2, #0
 80003ce:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003d0:	2101      	movs	r1, #1
 80003d2:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d4:	9202      	str	r2, [sp, #8]
 80003d6:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003d8:	f000 ff72 	bl	80012c0 <HAL_RCC_ClockConfig>
 80003dc:	2800      	cmp	r0, #0
 80003de:	d001      	beq.n	80003e4 <SystemClock_Config+0x6c>
 80003e0:	b672      	cpsid	i
  while (1)
 80003e2:	e7fe      	b.n	80003e2 <SystemClock_Config+0x6a>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80003e4:	2301      	movs	r3, #1
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80003e6:	9007      	str	r0, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003e8:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80003ea:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003ec:	f001 f87e 	bl	80014ec <HAL_RCCEx_PeriphCLKConfig>
 80003f0:	2800      	cmp	r0, #0
 80003f2:	d001      	beq.n	80003f8 <SystemClock_Config+0x80>
 80003f4:	b672      	cpsid	i
  while (1)
 80003f6:	e7fe      	b.n	80003f6 <SystemClock_Config+0x7e>
}
 80003f8:	b017      	add	sp, #92	; 0x5c
 80003fa:	bd00      	pop	{pc}

080003fc <main>:
{
 80003fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003fe:	46d6      	mov	lr, sl
 8000400:	4646      	mov	r6, r8
 8000402:	464f      	mov	r7, r9
 8000404:	b5c0      	push	{r6, r7, lr}
 8000406:	b088      	sub	sp, #32
  HAL_Init();
 8000408:	f000 fb3c 	bl	8000a84 <HAL_Init>
  SystemClock_Config();
 800040c:	f7ff ffb4 	bl	8000378 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000410:	2214      	movs	r2, #20
 8000412:	2100      	movs	r1, #0
 8000414:	a802      	add	r0, sp, #8
 8000416:	f001 ff83 	bl	8002320 <memset>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800041a:	2080      	movs	r0, #128	; 0x80
 800041c:	4b5f      	ldr	r3, [pc, #380]	; (800059c <main+0x1a0>)
 800041e:	03c0      	lsls	r0, r0, #15
 8000420:	6959      	ldr	r1, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000422:	2680      	movs	r6, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000424:	4301      	orrs	r1, r0
 8000426:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000428:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800042a:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800042c:	0289      	lsls	r1, r1, #10
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800042e:	4002      	ands	r2, r0
  HAL_GPIO_WritePin(GPIOA, RS485_DERE__Pin|CNVST_Pin|TEST_PA4_Pin, GPIO_PIN_RESET);
 8000430:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000432:	9200      	str	r2, [sp, #0]
 8000434:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000436:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, RS485_DERE__Pin|CNVST_Pin|TEST_PA4_Pin, GPIO_PIN_RESET);
 8000438:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800043a:	430a      	orrs	r2, r1
 800043c:	615a      	str	r2, [r3, #20]
 800043e:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, RS485_DERE__Pin|CNVST_Pin|TEST_PA4_Pin, GPIO_PIN_RESET);
 8000440:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000442:	400b      	ands	r3, r1
 8000444:	9301      	str	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, RS485_DERE__Pin|CNVST_Pin|TEST_PA4_Pin, GPIO_PIN_RESET);
 8000446:	2119      	movs	r1, #25
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000448:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, RS485_DERE__Pin|CNVST_Pin|TEST_PA4_Pin, GPIO_PIN_RESET);
 800044a:	f000 fccd 	bl	8000de8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = RS485_DERE__Pin|CNVST_Pin|TEST_PA4_Pin;
 800044e:	2219      	movs	r2, #25
 8000450:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000452:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = RS485_DERE__Pin|CNVST_Pin|TEST_PA4_Pin;
 8000454:	9202      	str	r2, [sp, #8]
 8000456:	9303      	str	r3, [sp, #12]
 8000458:	2200      	movs	r2, #0
 800045a:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800045c:	05c0      	lsls	r0, r0, #23
 800045e:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = RS485_DERE__Pin|CNVST_Pin|TEST_PA4_Pin;
 8000460:	9204      	str	r2, [sp, #16]
 8000462:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000464:	f000 fbcc 	bl	8000c00 <HAL_GPIO_Init>
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT; // SPI_DATASIZE_16BIT
 8000468:	22e0      	movs	r2, #224	; 0xe0
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800046a:	2382      	movs	r3, #130	; 0x82
  hspi1.Instance = SPI1;
 800046c:	484c      	ldr	r0, [pc, #304]	; (80005a0 <main+0x1a4>)
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT; // SPI_DATASIZE_16BIT
 800046e:	00d2      	lsls	r2, r2, #3
 8000470:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE; // Must be SPI_PHASE_2EDGE
 8000472:	2201      	movs	r2, #1
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000474:	005b      	lsls	r3, r3, #1
 8000476:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000478:	2300      	movs	r3, #0
  hspi1.Instance = SPI1;
 800047a:	4d4a      	ldr	r5, [pc, #296]	; (80005a4 <main+0x1a8>)
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE; // Must be SPI_PHASE_2EDGE
 800047c:	6142      	str	r2, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800047e:	321f      	adds	r2, #31
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000480:	00b6      	lsls	r6, r6, #2
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000482:	61c2      	str	r2, [r0, #28]
  hspi1.Init.CRCPolynomial = 7;
 8000484:	3a19      	subs	r2, #25
  hspi1.Instance = SPI1;
 8000486:	6005      	str	r5, [r0, #0]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000488:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW; // Must be SPI_POLARITY_LOW
 800048a:	6103      	str	r3, [r0, #16]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800048c:	6186      	str	r6, [r0, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800048e:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000490:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000492:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000494:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000496:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000498:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800049a:	f001 f8c7 	bl	800162c <HAL_SPI_Init>
 800049e:	2800      	cmp	r0, #0
 80004a0:	d001      	beq.n	80004a6 <main+0xaa>
 80004a2:	b672      	cpsid	i
  while (1)
 80004a4:	e7fe      	b.n	80004a4 <main+0xa8>
  htim14.Instance = TIM14;
 80004a6:	4f40      	ldr	r7, [pc, #256]	; (80005a8 <main+0x1ac>)
 80004a8:	4b40      	ldr	r3, [pc, #256]	; (80005ac <main+0x1b0>)
  htim14.Init.Prescaler = 0;
 80004aa:	6078      	str	r0, [r7, #4]
  htim14.Instance = TIM14;
 80004ac:	603b      	str	r3, [r7, #0]
  htim14.Init.Period = 48*TIM14_US;
 80004ae:	23f0      	movs	r3, #240	; 0xf0
 80004b0:	011b      	lsls	r3, r3, #4
 80004b2:	60fb      	str	r3, [r7, #12]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80004b4:	2380      	movs	r3, #128	; 0x80
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004b6:	60b8      	str	r0, [r7, #8]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004b8:	6138      	str	r0, [r7, #16]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80004ba:	0038      	movs	r0, r7
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80004bc:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80004be:	f001 f955 	bl	800176c <HAL_TIM_Base_Init>
 80004c2:	1e03      	subs	r3, r0, #0
 80004c4:	d001      	beq.n	80004ca <main+0xce>
 80004c6:	b672      	cpsid	i
  while (1)
 80004c8:	e7fe      	b.n	80004c8 <main+0xcc>
  huart1.Instance = USART1;
 80004ca:	4839      	ldr	r0, [pc, #228]	; (80005b0 <main+0x1b4>)
 80004cc:	4a39      	ldr	r2, [pc, #228]	; (80005b4 <main+0x1b8>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004ce:	6083      	str	r3, [r0, #8]
  huart1.Instance = USART1;
 80004d0:	6002      	str	r2, [r0, #0]
  huart1.Init.BaudRate = BAUDRATE*4;
 80004d2:	22e1      	movs	r2, #225	; 0xe1
 80004d4:	02d2      	lsls	r2, r2, #11
 80004d6:	6042      	str	r2, [r0, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004d8:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004da:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004dc:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004de:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004e0:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004e2:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004e4:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004e6:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004e8:	f001 fdb0 	bl	800204c <HAL_UART_Init>
 80004ec:	4681      	mov	r9, r0
 80004ee:	2800      	cmp	r0, #0
 80004f0:	d145      	bne.n	800057e <main+0x182>
  cbuf = circular_buf_init(buffer, RING_BUFFER_SIZE);
 80004f2:	2180      	movs	r1, #128	; 0x80
 80004f4:	4b30      	ldr	r3, [pc, #192]	; (80005b8 <main+0x1bc>)
 80004f6:	0049      	lsls	r1, r1, #1
 80004f8:	0018      	movs	r0, r3
 80004fa:	4698      	mov	r8, r3
 80004fc:	f7ff fe9a 	bl	8000234 <circular_buf_init>
 8000500:	4c2e      	ldr	r4, [pc, #184]	; (80005bc <main+0x1c0>)
  memset(buffer, 0xFF, sizeof(uint16_t)*RING_BUFFER_SIZE); // for debugging
 8000502:	0032      	movs	r2, r6
 8000504:	21ff      	movs	r1, #255	; 0xff
  cbuf = circular_buf_init(buffer, RING_BUFFER_SIZE);
 8000506:	6020      	str	r0, [r4, #0]
  memset(buffer, 0xFF, sizeof(uint16_t)*RING_BUFFER_SIZE); // for debugging
 8000508:	4640      	mov	r0, r8
 800050a:	f001 ff09 	bl	8002320 <memset>
  cbuf4Test = circular_buf_init(buffer4Test, RING_BUFFER_SIZE);
 800050e:	2180      	movs	r1, #128	; 0x80
 8000510:	4b2b      	ldr	r3, [pc, #172]	; (80005c0 <main+0x1c4>)
 8000512:	0049      	lsls	r1, r1, #1
 8000514:	0018      	movs	r0, r3
 8000516:	469a      	mov	sl, r3
 8000518:	f7ff fe8c 	bl	8000234 <circular_buf_init>
 800051c:	4b29      	ldr	r3, [pc, #164]	; (80005c4 <main+0x1c8>)
  memset(buffer4Test, 0xFF, sizeof(uint16_t)*RING_BUFFER_SIZE); // for debugging
 800051e:	0032      	movs	r2, r6
  cbuf4Test = circular_buf_init(buffer4Test, RING_BUFFER_SIZE);
 8000520:	6018      	str	r0, [r3, #0]
  memset(buffer4Test, 0xFF, sizeof(uint16_t)*RING_BUFFER_SIZE); // for debugging
 8000522:	21ff      	movs	r1, #255	; 0xff
 8000524:	4650      	mov	r0, sl
  cbuf4Test = circular_buf_init(buffer4Test, RING_BUFFER_SIZE);
 8000526:	4698      	mov	r8, r3
  memset(buffer4Test, 0xFF, sizeof(uint16_t)*RING_BUFFER_SIZE); // for debugging
 8000528:	f001 fefa 	bl	8002320 <memset>
  SPI1->CR1 |= 1<<SPI_CR1_SPE_Pos; //Turn On SPI
 800052c:	2340      	movs	r3, #64	; 0x40
 800052e:	682a      	ldr	r2, [r5, #0]
  HAL_TIM_Base_Start_IT(&htim14);
 8000530:	0038      	movs	r0, r7
  SPI1->CR1 |= 1<<SPI_CR1_SPE_Pos; //Turn On SPI
 8000532:	4313      	orrs	r3, r2
 8000534:	602b      	str	r3, [r5, #0]
  HAL_TIM_Base_Start_IT(&htim14);
 8000536:	f001 f987 	bl	8001848 <HAL_TIM_Base_Start_IT>
 800053a:	4f23      	ldr	r7, [pc, #140]	; (80005c8 <main+0x1cc>)
 800053c:	4d23      	ldr	r5, [pc, #140]	; (80005cc <main+0x1d0>)
 800053e:	4e24      	ldr	r6, [pc, #144]	; (80005d0 <main+0x1d4>)
  	if(0 == circular_buf_get(cbuf, &data)){
 8000540:	6820      	ldr	r0, [r4, #0]
 8000542:	a902      	add	r1, sp, #8
 8000544:	f7ff fef0 	bl	8000328 <circular_buf_get>
 8000548:	2800      	cmp	r0, #0
 800054a:	d1f9      	bne.n	8000540 <main+0x144>
  	    circular_buf_put(cbuf4Test, data); //
 800054c:	466b      	mov	r3, sp
 800054e:	8919      	ldrh	r1, [r3, #8]
 8000550:	4643      	mov	r3, r8
 8000552:	6818      	ldr	r0, [r3, #0]
 8000554:	f7ff feb6 	bl	80002c4 <circular_buf_put>
  		temp = circular_buf_size(cbuf);
 8000558:	6820      	ldr	r0, [r4, #0]
 800055a:	f7ff fe91 	bl	8000280 <circular_buf_size>
  		if(temp > ring_buff_size){
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	4298      	cmp	r0, r3
 8000562:	d900      	bls.n	8000566 <main+0x16a>
  			ring_buff_size = temp;
 8000564:	6038      	str	r0, [r7, #0]
			if(avr_counter++ < (AVERAGE_WINDOW_SIZE-1)){
 8000566:	682b      	ldr	r3, [r5, #0]
 8000568:	1c5a      	adds	r2, r3, #1
 800056a:	602a      	str	r2, [r5, #0]
 800056c:	2b06      	cmp	r3, #6
 800056e:	d808      	bhi.n	8000582 <main+0x186>
				sum = sum + data;
 8000570:	6832      	ldr	r2, [r6, #0]
 8000572:	466b      	mov	r3, sp
 8000574:	4694      	mov	ip, r2
 8000576:	891b      	ldrh	r3, [r3, #8]
 8000578:	4463      	add	r3, ip
 800057a:	6033      	str	r3, [r6, #0]
 800057c:	e7e0      	b.n	8000540 <main+0x144>
 800057e:	b672      	cpsid	i
  while (1)
 8000580:	e7fe      	b.n	8000580 <main+0x184>
				avrg_data = sum + data;
 8000582:	466b      	mov	r3, sp
 8000584:	8918      	ldrh	r0, [r3, #8]
 8000586:	6833      	ldr	r3, [r6, #0]
 8000588:	469c      	mov	ip, r3
				sum = 0;
 800058a:	464b      	mov	r3, r9
				avrg_data = sum + data;
 800058c:	4460      	add	r0, ip
				avrg_data = avrg_data >> SHIFT_AVRG_DATA; // If AVERAGE_WINDOW_SIZE=8, then let shift 3 bits right
 800058e:	08c0      	lsrs	r0, r0, #3
				cobs_doing((uint16_t)avrg_data);
 8000590:	b280      	uxth	r0, r0
				sum = 0;
 8000592:	6033      	str	r3, [r6, #0]
				avr_counter = 0;
 8000594:	602b      	str	r3, [r5, #0]
				cobs_doing((uint16_t)avrg_data);
 8000596:	f000 f991 	bl	80008bc <cobs_doing>
 800059a:	e7d1      	b.n	8000540 <main+0x144>
 800059c:	40021000 	.word	0x40021000
 80005a0:	200009d8 	.word	0x200009d8
 80005a4:	40013000 	.word	0x40013000
 80005a8:	20000a3c 	.word	0x20000a3c
 80005ac:	40002000 	.word	0x40002000
 80005b0:	2000014c 	.word	0x2000014c
 80005b4:	40013800 	.word	0x40013800
 80005b8:	200001d0 	.word	0x200001d0
 80005bc:	200009d4 	.word	0x200009d4
 80005c0:	200005d0 	.word	0x200005d0
 80005c4:	200009d0 	.word	0x200009d0
 80005c8:	200000a4 	.word	0x200000a4
 80005cc:	200000a0 	.word	0x200000a0
 80005d0:	200000a8 	.word	0x200000a8

080005d4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005d4:	2201      	movs	r2, #1
 80005d6:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <HAL_MspInit+0x2c>)
{
 80005d8:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005da:	6999      	ldr	r1, [r3, #24]
 80005dc:	4311      	orrs	r1, r2
 80005de:	6199      	str	r1, [r3, #24]
 80005e0:	6999      	ldr	r1, [r3, #24]
 80005e2:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e4:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005e6:	9200      	str	r2, [sp, #0]
 80005e8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ea:	69da      	ldr	r2, [r3, #28]
 80005ec:	0549      	lsls	r1, r1, #21
 80005ee:	430a      	orrs	r2, r1
 80005f0:	61da      	str	r2, [r3, #28]
 80005f2:	69db      	ldr	r3, [r3, #28]
 80005f4:	400b      	ands	r3, r1
 80005f6:	9301      	str	r3, [sp, #4]
 80005f8:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005fa:	b002      	add	sp, #8
 80005fc:	4770      	bx	lr
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	40021000 	.word	0x40021000

08000604 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000604:	b510      	push	{r4, lr}
 8000606:	0004      	movs	r4, r0
 8000608:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060a:	2214      	movs	r2, #20
 800060c:	2100      	movs	r1, #0
 800060e:	a802      	add	r0, sp, #8
 8000610:	f001 fe86 	bl	8002320 <memset>
  if(hspi->Instance==SPI1)
 8000614:	4b14      	ldr	r3, [pc, #80]	; (8000668 <HAL_SPI_MspInit+0x64>)
 8000616:	6822      	ldr	r2, [r4, #0]
 8000618:	429a      	cmp	r2, r3
 800061a:	d001      	beq.n	8000620 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800061c:	b008      	add	sp, #32
 800061e:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000620:	2080      	movs	r0, #128	; 0x80
 8000622:	4b12      	ldr	r3, [pc, #72]	; (800066c <HAL_SPI_MspInit+0x68>)
 8000624:	0140      	lsls	r0, r0, #5
 8000626:	6999      	ldr	r1, [r3, #24]
 8000628:	4301      	orrs	r1, r0
 800062a:	6199      	str	r1, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800062c:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_SPI1_CLK_ENABLE();
 800062e:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000630:	0289      	lsls	r1, r1, #10
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000632:	4002      	ands	r2, r0
 8000634:	9200      	str	r2, [sp, #0]
 8000636:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000638:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063a:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800063c:	430a      	orrs	r2, r1
 800063e:	615a      	str	r2, [r3, #20]
 8000640:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000642:	22e0      	movs	r2, #224	; 0xe0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000644:	400b      	ands	r3, r1
 8000646:	9301      	str	r3, [sp, #4]
 8000648:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800064a:	2302      	movs	r3, #2
 800064c:	9202      	str	r2, [sp, #8]
 800064e:	9303      	str	r3, [sp, #12]
 8000650:	2200      	movs	r2, #0
 8000652:	2303      	movs	r3, #3
 8000654:	9204      	str	r2, [sp, #16]
 8000656:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000658:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065a:	a902      	add	r1, sp, #8
 800065c:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800065e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000660:	f000 face 	bl	8000c00 <HAL_GPIO_Init>
}
 8000664:	e7da      	b.n	800061c <HAL_SPI_MspInit+0x18>
 8000666:	46c0      	nop			; (mov r8, r8)
 8000668:	40013000 	.word	0x40013000
 800066c:	40021000 	.word	0x40021000

08000670 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000670:	b500      	push	{lr}
  if(htim_base->Instance==TIM14)
 8000672:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <HAL_TIM_Base_MspInit+0x38>)
 8000674:	6802      	ldr	r2, [r0, #0]
{
 8000676:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM14)
 8000678:	429a      	cmp	r2, r3
 800067a:	d001      	beq.n	8000680 <HAL_TIM_Base_MspInit+0x10>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800067c:	b003      	add	sp, #12
 800067e:	bd00      	pop	{pc}
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000680:	2080      	movs	r0, #128	; 0x80
 8000682:	4a0a      	ldr	r2, [pc, #40]	; (80006ac <HAL_TIM_Base_MspInit+0x3c>)
 8000684:	0040      	lsls	r0, r0, #1
 8000686:	69d1      	ldr	r1, [r2, #28]
 8000688:	4301      	orrs	r1, r0
 800068a:	61d1      	str	r1, [r2, #28]
 800068c:	69d3      	ldr	r3, [r2, #28]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 800068e:	2100      	movs	r1, #0
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000690:	4003      	ands	r3, r0
 8000692:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000694:	2200      	movs	r2, #0
 8000696:	38ed      	subs	r0, #237	; 0xed
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000698:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 800069a:	f000 fa15 	bl	8000ac8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 800069e:	2013      	movs	r0, #19
 80006a0:	f000 fa44 	bl	8000b2c <HAL_NVIC_EnableIRQ>
}
 80006a4:	e7ea      	b.n	800067c <HAL_TIM_Base_MspInit+0xc>
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	40002000 	.word	0x40002000
 80006ac:	40021000 	.word	0x40021000

080006b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006b0:	b510      	push	{r4, lr}
 80006b2:	0004      	movs	r4, r0
 80006b4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b6:	2214      	movs	r2, #20
 80006b8:	2100      	movs	r1, #0
 80006ba:	a802      	add	r0, sp, #8
 80006bc:	f001 fe30 	bl	8002320 <memset>
  if(huart->Instance==USART1)
 80006c0:	4b18      	ldr	r3, [pc, #96]	; (8000724 <HAL_UART_MspInit+0x74>)
 80006c2:	6822      	ldr	r2, [r4, #0]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d001      	beq.n	80006cc <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80006c8:	b008      	add	sp, #32
 80006ca:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80006cc:	2080      	movs	r0, #128	; 0x80
 80006ce:	4b16      	ldr	r3, [pc, #88]	; (8000728 <HAL_UART_MspInit+0x78>)
 80006d0:	01c0      	lsls	r0, r0, #7
 80006d2:	6999      	ldr	r1, [r3, #24]
 80006d4:	4301      	orrs	r1, r0
 80006d6:	6199      	str	r1, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d8:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 80006da:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006dc:	0289      	lsls	r1, r1, #10
    __HAL_RCC_USART1_CLK_ENABLE();
 80006de:	4002      	ands	r2, r0
 80006e0:	9200      	str	r2, [sp, #0]
 80006e2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e4:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e6:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e8:	430a      	orrs	r2, r1
 80006ea:	615a      	str	r2, [r3, #20]
 80006ec:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80006ee:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f0:	400b      	ands	r3, r1
 80006f2:	9301      	str	r3, [sp, #4]
 80006f4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80006f6:	2302      	movs	r3, #2
 80006f8:	00d2      	lsls	r2, r2, #3
 80006fa:	9202      	str	r2, [sp, #8]
 80006fc:	9303      	str	r3, [sp, #12]
 80006fe:	2200      	movs	r2, #0
 8000700:	2303      	movs	r3, #3
 8000702:	9204      	str	r2, [sp, #16]
 8000704:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000706:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000708:	a902      	add	r1, sp, #8
 800070a:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800070c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070e:	f000 fa77 	bl	8000c00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8000712:	2200      	movs	r2, #0
 8000714:	2101      	movs	r1, #1
 8000716:	201b      	movs	r0, #27
 8000718:	f000 f9d6 	bl	8000ac8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800071c:	201b      	movs	r0, #27
 800071e:	f000 fa05 	bl	8000b2c <HAL_NVIC_EnableIRQ>
}
 8000722:	e7d1      	b.n	80006c8 <HAL_UART_MspInit+0x18>
 8000724:	40013800 	.word	0x40013800
 8000728:	40021000 	.word	0x40021000

0800072c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800072c:	e7fe      	b.n	800072c <NMI_Handler>
 800072e:	46c0      	nop			; (mov r8, r8)

08000730 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000730:	e7fe      	b.n	8000730 <HardFault_Handler>
 8000732:	46c0      	nop			; (mov r8, r8)

08000734 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000734:	4770      	bx	lr
 8000736:	46c0      	nop			; (mov r8, r8)

08000738 <PendSV_Handler>:
 8000738:	4770      	bx	lr
 800073a:	46c0      	nop			; (mov r8, r8)

0800073c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800073c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800073e:	f000 f9b1 	bl	8000aa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000742:	bd10      	pop	{r4, pc}

08000744 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000744:	b530      	push	{r4, r5, lr}
  volatile uint32_t byte_msb, byte_lsb;
//  static uint16_t word;
  static uint32_t test_data = 0; // FOR TEST ONLY!!! REMOVE IT LATER !!!

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000746:	4825      	ldr	r0, [pc, #148]	; (80007dc <TIM14_IRQHandler+0x98>)
{
 8000748:	b085      	sub	sp, #20
  HAL_TIM_IRQHandler(&htim14);
 800074a:	f001 f8af 	bl	80018ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */
  if(true == flip_flop){
 800074e:	4b24      	ldr	r3, [pc, #144]	; (80007e0 <TIM14_IRQHandler+0x9c>)
 8000750:	781a      	ldrb	r2, [r3, #0]
 8000752:	2a00      	cmp	r2, #0
 8000754:	d007      	beq.n	8000766 <TIM14_IRQHandler+0x22>
    GPIOA->BSRR = CNVST_Pin; // Set High
 8000756:	2290      	movs	r2, #144	; 0x90
 8000758:	2108      	movs	r1, #8
 800075a:	05d2      	lsls	r2, r2, #23
 800075c:	6191      	str	r1, [r2, #24]
  	flip_flop = false;
 800075e:	2200      	movs	r2, #0
 8000760:	701a      	strb	r2, [r3, #0]
    circular_buf_put(cbuf, word); //
//    GPIOA->BSRR = (uint32_t)TEST_PA4_Pin <<16u; // Set LOW
  } // if(true == flip_flop)/else

  /* USER CODE END TIM14_IRQn 1 */
}
 8000762:	b005      	add	sp, #20
 8000764:	bd30      	pop	{r4, r5, pc}
  	flip_flop = true;
 8000766:	2201      	movs	r2, #1
 8000768:	701a      	strb	r2, [r3, #0]
    GPIOA->BSRR = (uint32_t)CNVST_Pin <<16u; // Set LOW
 800076a:	2390      	movs	r3, #144	; 0x90
 800076c:	2280      	movs	r2, #128	; 0x80
 800076e:	2401      	movs	r4, #1
      if ( (SPI1->SR & SPI_SR_TXE) && (txallowed == true))
 8000770:	2002      	movs	r0, #2
        SPI1->DR = 0xFF;
 8000772:	25ff      	movs	r5, #255	; 0xff
      if( SPI1->SR & SPI_SR_RXNE )
 8000774:	2101      	movs	r1, #1
    GPIOA->BSRR = (uint32_t)CNVST_Pin <<16u; // Set LOW
 8000776:	05db      	lsls	r3, r3, #23
 8000778:	0312      	lsls	r2, r2, #12
 800077a:	619a      	str	r2, [r3, #24]
      if ( (SPI1->SR & SPI_SR_TXE) && (txallowed == true))
 800077c:	4b19      	ldr	r3, [pc, #100]	; (80007e4 <TIM14_IRQHandler+0xa0>)
 800077e:	689a      	ldr	r2, [r3, #8]
 8000780:	4210      	tst	r0, r2
 8000782:	d003      	beq.n	800078c <TIM14_IRQHandler+0x48>
 8000784:	2c00      	cmp	r4, #0
 8000786:	d001      	beq.n	800078c <TIM14_IRQHandler+0x48>
        txallowed = false;
 8000788:	2400      	movs	r4, #0
        SPI1->DR = 0xFF;
 800078a:	60dd      	str	r5, [r3, #12]
      if( SPI1->SR & SPI_SR_RXNE )
 800078c:	689a      	ldr	r2, [r3, #8]
 800078e:	4211      	tst	r1, r2
 8000790:	d0f5      	beq.n	800077e <TIM14_IRQHandler+0x3a>
          byte_msb = (*(volatile uint8_t *)&SPI1->DR);
 8000792:	2401      	movs	r4, #1
      if ( (SPI1->SR & SPI_SR_TXE) && (txallowed == true))
 8000794:	2002      	movs	r0, #2
        SPI1->DR = 0xFF;
 8000796:	25ff      	movs	r5, #255	; 0xff
      if( SPI1->SR & SPI_SR_RXNE )
 8000798:	2101      	movs	r1, #1
          byte_msb = (*(volatile uint8_t *)&SPI1->DR);
 800079a:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <TIM14_IRQHandler+0xa4>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	9302      	str	r3, [sp, #8]
      if ( (SPI1->SR & SPI_SR_TXE) && (txallowed == true))
 80007a2:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <TIM14_IRQHandler+0xa0>)
 80007a4:	689a      	ldr	r2, [r3, #8]
 80007a6:	4210      	tst	r0, r2
 80007a8:	d003      	beq.n	80007b2 <TIM14_IRQHandler+0x6e>
 80007aa:	2c00      	cmp	r4, #0
 80007ac:	d001      	beq.n	80007b2 <TIM14_IRQHandler+0x6e>
        txallowed = false;
 80007ae:	2400      	movs	r4, #0
        SPI1->DR = 0xFF;
 80007b0:	60dd      	str	r5, [r3, #12]
      if( SPI1->SR & SPI_SR_RXNE )
 80007b2:	689a      	ldr	r2, [r3, #8]
 80007b4:	4211      	tst	r1, r2
 80007b6:	d0f5      	beq.n	80007a4 <TIM14_IRQHandler+0x60>
          byte_lsb = (*(volatile uint8_t *)&SPI1->DR);
 80007b8:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <TIM14_IRQHandler+0xa4>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	9303      	str	r3, [sp, #12]
    word = (byte_lsb) + (byte_msb << 8);
 80007c0:	9b02      	ldr	r3, [sp, #8]
 80007c2:	9a03      	ldr	r2, [sp, #12]
 80007c4:	021b      	lsls	r3, r3, #8
 80007c6:	189b      	adds	r3, r3, r2
 80007c8:	466a      	mov	r2, sp
 80007ca:	b29b      	uxth	r3, r3
 80007cc:	80d3      	strh	r3, [r2, #6]
    circular_buf_put(cbuf, word); //
 80007ce:	88d1      	ldrh	r1, [r2, #6]
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <TIM14_IRQHandler+0xa8>)
 80007d2:	b289      	uxth	r1, r1
 80007d4:	6818      	ldr	r0, [r3, #0]
 80007d6:	f7ff fd75 	bl	80002c4 <circular_buf_put>
}
 80007da:	e7c2      	b.n	8000762 <TIM14_IRQHandler+0x1e>
 80007dc:	20000a3c 	.word	0x20000a3c
 80007e0:	200000ac 	.word	0x200000ac
 80007e4:	40013000 	.word	0x40013000
 80007e8:	4001300c 	.word	0x4001300c
 80007ec:	200009d4 	.word	0x200009d4

080007f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80007f0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80007f2:	4802      	ldr	r0, [pc, #8]	; (80007fc <USART1_IRQHandler+0xc>)
 80007f4:	f001 f9c0 	bl	8001b78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80007f8:	bd10      	pop	{r4, pc}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	2000014c 	.word	0x2000014c

08000800 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8000800:	2001      	movs	r0, #1
 8000802:	4770      	bx	lr

08000804 <_kill>:

int _kill(int pid, int sig)
{
 8000804:	b510      	push	{r4, lr}
	errno = EINVAL;
 8000806:	f001 fd47 	bl	8002298 <__errno>
 800080a:	2316      	movs	r3, #22
 800080c:	6003      	str	r3, [r0, #0]
	return -1;
 800080e:	2001      	movs	r0, #1
}
 8000810:	4240      	negs	r0, r0
 8000812:	bd10      	pop	{r4, pc}

08000814 <_exit>:

void _exit (int status)
{
 8000814:	b510      	push	{r4, lr}
	errno = EINVAL;
 8000816:	f001 fd3f 	bl	8002298 <__errno>
 800081a:	2316      	movs	r3, #22
 800081c:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800081e:	e7fe      	b.n	800081e <_exit+0xa>

08000820 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000820:	b570      	push	{r4, r5, r6, lr}
 8000822:	1e16      	subs	r6, r2, #0
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000824:	dd07      	ble.n	8000836 <_read+0x16>
 8000826:	000c      	movs	r4, r1
 8000828:	188d      	adds	r5, r1, r2
	{
		*ptr++ = __io_getchar();
 800082a:	e000      	b.n	800082e <_read+0xe>
 800082c:	bf00      	nop
 800082e:	7020      	strb	r0, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000830:	3401      	adds	r4, #1
 8000832:	42ac      	cmp	r4, r5
 8000834:	d1f9      	bne.n	800082a <_read+0xa>
	}

return len;
}
 8000836:	0030      	movs	r0, r6
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	46c0      	nop			; (mov r8, r8)

0800083c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	1e16      	subs	r6, r2, #0
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000840:	dd07      	ble.n	8000852 <_write+0x16>
 8000842:	000c      	movs	r4, r1
 8000844:	188d      	adds	r5, r1, r2
	{
		__io_putchar(*ptr++);
 8000846:	7820      	ldrb	r0, [r4, #0]
 8000848:	3401      	adds	r4, #1
 800084a:	e000      	b.n	800084e <_write+0x12>
 800084c:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800084e:	42ac      	cmp	r4, r5
 8000850:	d1f9      	bne.n	8000846 <_write+0xa>
	}
	return len;
}
 8000852:	0030      	movs	r0, r6
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	46c0      	nop			; (mov r8, r8)

08000858 <_close>:

int _close(int file)
{
	return -1;
 8000858:	2001      	movs	r0, #1
}
 800085a:	4240      	negs	r0, r0
 800085c:	4770      	bx	lr
 800085e:	46c0      	nop			; (mov r8, r8)

08000860 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000860:	2380      	movs	r3, #128	; 0x80
 8000862:	019b      	lsls	r3, r3, #6
	return 0;
}
 8000864:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8000866:	604b      	str	r3, [r1, #4]
}
 8000868:	4770      	bx	lr
 800086a:	46c0      	nop			; (mov r8, r8)

0800086c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800086c:	2001      	movs	r0, #1
 800086e:	4770      	bx	lr

08000870 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000870:	2000      	movs	r0, #0
 8000872:	4770      	bx	lr

08000874 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000874:	490c      	ldr	r1, [pc, #48]	; (80008a8 <_sbrk+0x34>)
 8000876:	4a0d      	ldr	r2, [pc, #52]	; (80008ac <_sbrk+0x38>)
{
 8000878:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800087a:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800087c:	490c      	ldr	r1, [pc, #48]	; (80008b0 <_sbrk+0x3c>)
{
 800087e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8000880:	6808      	ldr	r0, [r1, #0]
 8000882:	2800      	cmp	r0, #0
 8000884:	d004      	beq.n	8000890 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000886:	18c3      	adds	r3, r0, r3
 8000888:	4293      	cmp	r3, r2
 800088a:	d806      	bhi.n	800089a <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800088c:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 800088e:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000890:	4808      	ldr	r0, [pc, #32]	; (80008b4 <_sbrk+0x40>)
  if (__sbrk_heap_end + incr > max_heap)
 8000892:	18c3      	adds	r3, r0, r3
    __sbrk_heap_end = &_end;
 8000894:	6008      	str	r0, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8000896:	4293      	cmp	r3, r2
 8000898:	d9f8      	bls.n	800088c <_sbrk+0x18>
    errno = ENOMEM;
 800089a:	f001 fcfd 	bl	8002298 <__errno>
 800089e:	230c      	movs	r3, #12
 80008a0:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80008a2:	2001      	movs	r0, #1
 80008a4:	4240      	negs	r0, r0
 80008a6:	e7f2      	b.n	800088e <_sbrk+0x1a>
 80008a8:	00000400 	.word	0x00000400
 80008ac:	20001800 	.word	0x20001800
 80008b0:	200000b0 	.word	0x200000b0
 80008b4:	20000a98 	.word	0x20000a98

080008b8 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80008b8:	4770      	bx	lr
 80008ba:	46c0      	nop			; (mov r8, r8)

080008bc <cobs_doing>:
extern UART_HandleTypeDef huart1;

/*****************************************************************************/
void cobs_doing(uint16_t avrg_data){
//	static uint32_t i = 0;
	cobs_encode(avrg_data & 0xFF);
 80008bc:	b2c2      	uxtb	r2, r0
void cobs_doing(uint16_t avrg_data){
 80008be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	code = 0x01;
}

void cobs_encode(uint8_t byte){
	/* dst, code and code_ptr must be sets to start at code above  */
		if (byte == 0){
 80008c0:	2a00      	cmp	r2, #0
 80008c2:	d11e      	bne.n	8000902 <cobs_doing+0x46>
			*code_ptr = (code);
 80008c4:	4930      	ldr	r1, [pc, #192]	; (8000988 <cobs_doing+0xcc>)
 80008c6:	4a31      	ldr	r2, [pc, #196]	; (800098c <cobs_doing+0xd0>)
 80008c8:	680c      	ldr	r4, [r1, #0]
 80008ca:	7813      	ldrb	r3, [r2, #0]
	cobs_encode((avrg_data >> 8) & 0xFF);
 80008cc:	0a00      	lsrs	r0, r0, #8
			*code_ptr = (code);
 80008ce:	7023      	strb	r3, [r4, #0]
 			code_ptr = dst++;
 80008d0:	4b2f      	ldr	r3, [pc, #188]	; (8000990 <cobs_doing+0xd4>)
 80008d2:	681c      	ldr	r4, [r3, #0]
 80008d4:	600c      	str	r4, [r1, #0]
 			code = 0x01;
 80008d6:	2101      	movs	r1, #1
 			code_ptr = dst++;
 80008d8:	1c65      	adds	r5, r4, #1
 80008da:	601d      	str	r5, [r3, #0]
 			code = 0x01;
 80008dc:	7011      	strb	r1, [r2, #0]
		if (byte == 0){
 80008de:	2800      	cmp	r0, #0
 80008e0:	d11c      	bne.n	800091c <cobs_doing+0x60>
			*code_ptr = (code);
 80008e2:	4829      	ldr	r0, [pc, #164]	; (8000988 <cobs_doing+0xcc>)
 80008e4:	6804      	ldr	r4, [r0, #0]
 80008e6:	7021      	strb	r1, [r4, #0]
 			code_ptr = dst++;
 80008e8:	6819      	ldr	r1, [r3, #0]
 80008ea:	1c4c      	adds	r4, r1, #1
 80008ec:	6001      	str	r1, [r0, #0]
 			code = 0x01;
 80008ee:	2101      	movs	r1, #1
	cobs_counter = cobs_counter + 2; // Every COBS buff contains COBS_BUFF_SIZE/2 WORDS
 80008f0:	4828      	ldr	r0, [pc, #160]	; (8000994 <cobs_doing+0xd8>)
 			code_ptr = dst++;
 80008f2:	601c      	str	r4, [r3, #0]
	cobs_counter = cobs_counter + 2; // Every COBS buff contains COBS_BUFF_SIZE/2 WORDS
 80008f4:	6804      	ldr	r4, [r0, #0]
 			code = 0x01;
 80008f6:	7011      	strb	r1, [r2, #0]
	cobs_counter = cobs_counter + 2; // Every COBS buff contains COBS_BUFF_SIZE/2 WORDS
 80008f8:	1ca5      	adds	r5, r4, #2
	if(COBS_BUFF_SIZE == cobs_counter){
 80008fa:	2c3e      	cmp	r4, #62	; 0x3e
 80008fc:	d01b      	beq.n	8000936 <cobs_doing+0x7a>
	cobs_counter = cobs_counter + 2; // Every COBS buff contains COBS_BUFF_SIZE/2 WORDS
 80008fe:	6005      	str	r5, [r0, #0]
}
 8000900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else{
			*dst++ = byte;
 8000902:	4b23      	ldr	r3, [pc, #140]	; (8000990 <cobs_doing+0xd4>)
	cobs_encode((avrg_data >> 8) & 0xFF);
 8000904:	0a00      	lsrs	r0, r0, #8
			*dst++ = byte;
 8000906:	6819      	ldr	r1, [r3, #0]
 8000908:	1c4c      	adds	r4, r1, #1
 800090a:	601c      	str	r4, [r3, #0]
 800090c:	700a      	strb	r2, [r1, #0]
			code++;
 800090e:	4a1f      	ldr	r2, [pc, #124]	; (800098c <cobs_doing+0xd0>)
 8000910:	7811      	ldrb	r1, [r2, #0]
 8000912:	3101      	adds	r1, #1
 8000914:	b2c9      	uxtb	r1, r1
 8000916:	7011      	strb	r1, [r2, #0]
		if (byte == 0){
 8000918:	2800      	cmp	r0, #0
 800091a:	d0e2      	beq.n	80008e2 <cobs_doing+0x26>
			*dst++ = byte;
 800091c:	6819      	ldr	r1, [r3, #0]
 800091e:	1c4c      	adds	r4, r1, #1
 8000920:	601c      	str	r4, [r3, #0]
	cobs_encode((avrg_data >> 8) & 0xFF);
 8000922:	7008      	strb	r0, [r1, #0]
			code++;
 8000924:	7811      	ldrb	r1, [r2, #0]
	cobs_counter = cobs_counter + 2; // Every COBS buff contains COBS_BUFF_SIZE/2 WORDS
 8000926:	481b      	ldr	r0, [pc, #108]	; (8000994 <cobs_doing+0xd8>)
			code++;
 8000928:	3101      	adds	r1, #1
	cobs_counter = cobs_counter + 2; // Every COBS buff contains COBS_BUFF_SIZE/2 WORDS
 800092a:	6804      	ldr	r4, [r0, #0]
			code++;
 800092c:	b2c9      	uxtb	r1, r1
 800092e:	7011      	strb	r1, [r2, #0]
	cobs_counter = cobs_counter + 2; // Every COBS buff contains COBS_BUFF_SIZE/2 WORDS
 8000930:	1ca5      	adds	r5, r4, #2
	if(COBS_BUFF_SIZE == cobs_counter){
 8000932:	2c3e      	cmp	r4, #62	; 0x3e
 8000934:	d1e3      	bne.n	80008fe <cobs_doing+0x42>
		cobs_counter = 0;
 8000936:	2600      	movs	r6, #0
		*code_ptr = (code);
 8000938:	4c13      	ldr	r4, [pc, #76]	; (8000988 <cobs_doing+0xcc>)
		cobs_counter = 0;
 800093a:	6006      	str	r6, [r0, #0]
		*code_ptr = (code);
 800093c:	6820      	ldr	r0, [r4, #0]
		if(0 == switch_status){
 800093e:	4d16      	ldr	r5, [pc, #88]	; (8000998 <cobs_doing+0xdc>)
		*code_ptr = (code);
 8000940:	7001      	strb	r1, [r0, #0]
		if(0 == switch_status){
 8000942:	6829      	ldr	r1, [r5, #0]
 8000944:	2900      	cmp	r1, #0
 8000946:	d016      	beq.n	8000976 <cobs_doing+0xba>
			p_cobs_buff_acquisition = cobs_buff_1;
 8000948:	4914      	ldr	r1, [pc, #80]	; (800099c <cobs_doing+0xe0>)
 800094a:	4815      	ldr	r0, [pc, #84]	; (80009a0 <cobs_doing+0xe4>)
			p_cobs_buff_uart = cobs_buff_2;
 800094c:	4f15      	ldr	r7, [pc, #84]	; (80009a4 <cobs_doing+0xe8>)
			p_cobs_buff_acquisition = cobs_buff_1;
 800094e:	6008      	str	r0, [r1, #0]
			p_cobs_buff_uart = cobs_buff_2;
 8000950:	4915      	ldr	r1, [pc, #84]	; (80009a8 <cobs_doing+0xec>)
			switch_status = 0;
 8000952:	602e      	str	r6, [r5, #0]
			p_cobs_buff_uart = cobs_buff_2;
 8000954:	6039      	str	r1, [r7, #0]
	code_ptr = dst++;
 8000956:	6020      	str	r0, [r4, #0]
 8000958:	1c45      	adds	r5, r0, #1
  GPIOA->BSRR = RS485_DERE__Pin; // Set High
 800095a:	2490      	movs	r4, #144	; 0x90
	code_ptr = dst++;
 800095c:	601d      	str	r5, [r3, #0]
	code = 0x01;
 800095e:	2301      	movs	r3, #1
  GPIOA->BSRR = RS485_DERE__Pin; // Set High
 8000960:	05e4      	lsls	r4, r4, #23
	code = 0x01;
 8000962:	7013      	strb	r3, [r2, #0]
	HAL_UART_Transmit_IT(&huart1, p_cobs_buff_uart, COBS_BUFF_SIZE+2);
 8000964:	4811      	ldr	r0, [pc, #68]	; (80009ac <cobs_doing+0xf0>)
  GPIOA->BSRR = RS485_DERE__Pin; // Set High
 8000966:	61a3      	str	r3, [r4, #24]
	HAL_UART_Transmit_IT(&huart1, p_cobs_buff_uart, COBS_BUFF_SIZE+2);
 8000968:	2242      	movs	r2, #66	; 0x42
 800096a:	f001 f8a9 	bl	8001ac0 <HAL_UART_Transmit_IT>
  GPIOA->BSRR = RS485_DERE__Pin <<16u; // Set LOW
 800096e:	2380      	movs	r3, #128	; 0x80
 8000970:	025b      	lsls	r3, r3, #9
 8000972:	61a3      	str	r3, [r4, #24]
}
 8000974:	e7c4      	b.n	8000900 <cobs_doing+0x44>
			p_cobs_buff_acquisition = cobs_buff_2;
 8000976:	4909      	ldr	r1, [pc, #36]	; (800099c <cobs_doing+0xe0>)
 8000978:	480b      	ldr	r0, [pc, #44]	; (80009a8 <cobs_doing+0xec>)
			p_cobs_buff_uart = cobs_buff_1;
 800097a:	4e0a      	ldr	r6, [pc, #40]	; (80009a4 <cobs_doing+0xe8>)
			p_cobs_buff_acquisition = cobs_buff_2;
 800097c:	6008      	str	r0, [r1, #0]
			p_cobs_buff_uart = cobs_buff_1;
 800097e:	4908      	ldr	r1, [pc, #32]	; (80009a0 <cobs_doing+0xe4>)
 8000980:	6031      	str	r1, [r6, #0]
			switch_status = 1;
 8000982:	2601      	movs	r6, #1
 8000984:	602e      	str	r6, [r5, #0]
 8000986:	e7e6      	b.n	8000956 <cobs_doing+0x9a>
 8000988:	20000008 	.word	0x20000008
 800098c:	20000004 	.word	0x20000004
 8000990:	2000000c 	.word	0x2000000c
 8000994:	2000013c 	.word	0x2000013c
 8000998:	20000140 	.word	0x20000140
 800099c:	20000010 	.word	0x20000010
 80009a0:	200000b4 	.word	0x200000b4
 80009a4:	20000014 	.word	0x20000014
 80009a8:	200000f8 	.word	0x200000f8
 80009ac:	2000014c 	.word	0x2000014c

080009b0 <HAL_UART_TxCpltCallback>:
}
 80009b0:	4770      	bx	lr
 80009b2:	46c0      	nop			; (mov r8, r8)

080009b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009b4:	4813      	ldr	r0, [pc, #76]	; (8000a04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009b6:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80009b8:	4813      	ldr	r0, [pc, #76]	; (8000a08 <LoopForever+0x6>)
    LDR R1, [R0]
 80009ba:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80009bc:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80009be:	4a13      	ldr	r2, [pc, #76]	; (8000a0c <LoopForever+0xa>)
    CMP R1, R2
 80009c0:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80009c2:	d105      	bne.n	80009d0 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80009c4:	4812      	ldr	r0, [pc, #72]	; (8000a10 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80009c6:	4913      	ldr	r1, [pc, #76]	; (8000a14 <LoopForever+0x12>)
    STR R1, [R0]
 80009c8:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80009ca:	4813      	ldr	r0, [pc, #76]	; (8000a18 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80009cc:	4913      	ldr	r1, [pc, #76]	; (8000a1c <LoopForever+0x1a>)
    STR R1, [R0]
 80009ce:	6001      	str	r1, [r0, #0]

080009d0 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009d0:	4813      	ldr	r0, [pc, #76]	; (8000a20 <LoopForever+0x1e>)
  ldr r1, =_edata
 80009d2:	4914      	ldr	r1, [pc, #80]	; (8000a24 <LoopForever+0x22>)
  ldr r2, =_sidata
 80009d4:	4a14      	ldr	r2, [pc, #80]	; (8000a28 <LoopForever+0x26>)
  movs r3, #0
 80009d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d8:	e002      	b.n	80009e0 <LoopCopyDataInit>

080009da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009de:	3304      	adds	r3, #4

080009e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e4:	d3f9      	bcc.n	80009da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009e6:	4a11      	ldr	r2, [pc, #68]	; (8000a2c <LoopForever+0x2a>)
  ldr r4, =_ebss
 80009e8:	4c11      	ldr	r4, [pc, #68]	; (8000a30 <LoopForever+0x2e>)
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009ec:	e001      	b.n	80009f2 <LoopFillZerobss>

080009ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f0:	3204      	adds	r2, #4

080009f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f4:	d3fb      	bcc.n	80009ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009f6:	f7ff ff5f 	bl	80008b8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80009fa:	f001 fc63 	bl	80022c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009fe:	f7ff fcfd 	bl	80003fc <main>

08000a02 <LoopForever>:

LoopForever:
    b LoopForever
 8000a02:	e7fe      	b.n	8000a02 <LoopForever>
  ldr   r0, =_estack
 8000a04:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000a08:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000a0c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000a10:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000a14:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000a18:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000a1c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a24:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000a28:	080034ec 	.word	0x080034ec
  ldr r2, =_sbss
 8000a2c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000a30:	20000a98 	.word	0x20000a98

08000a34 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a34:	e7fe      	b.n	8000a34 <ADC1_IRQHandler>
	...

08000a38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a38:	b510      	push	{r4, lr}
 8000a3a:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a3c:	20fa      	movs	r0, #250	; 0xfa
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <HAL_InitTick+0x40>)
 8000a40:	0080      	lsls	r0, r0, #2
 8000a42:	7819      	ldrb	r1, [r3, #0]
 8000a44:	f7ff fb6a 	bl	800011c <__udivsi3>
 8000a48:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <HAL_InitTick+0x44>)
 8000a4a:	0001      	movs	r1, r0
 8000a4c:	6818      	ldr	r0, [r3, #0]
 8000a4e:	f7ff fb65 	bl	800011c <__udivsi3>
 8000a52:	f000 f877 	bl	8000b44 <HAL_SYSTICK_Config>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	d10c      	bne.n	8000a74 <HAL_InitTick+0x3c>
  {
    return HAL_ERROR;
 8000a5a:	3001      	adds	r0, #1
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a5c:	2c03      	cmp	r4, #3
 8000a5e:	d900      	bls.n	8000a62 <HAL_InitTick+0x2a>
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8000a60:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a62:	3802      	subs	r0, #2
 8000a64:	2200      	movs	r2, #0
 8000a66:	0021      	movs	r1, r4
 8000a68:	f000 f82e 	bl	8000ac8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a6c:	4b04      	ldr	r3, [pc, #16]	; (8000a80 <HAL_InitTick+0x48>)
 8000a6e:	2000      	movs	r0, #0
 8000a70:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8000a72:	e7f5      	b.n	8000a60 <HAL_InitTick+0x28>
    return HAL_ERROR;
 8000a74:	2001      	movs	r0, #1
 8000a76:	e7f3      	b.n	8000a60 <HAL_InitTick+0x28>
 8000a78:	20000018 	.word	0x20000018
 8000a7c:	20000000 	.word	0x20000000
 8000a80:	2000001c 	.word	0x2000001c

08000a84 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a84:	2110      	movs	r1, #16
 8000a86:	4a06      	ldr	r2, [pc, #24]	; (8000aa0 <HAL_Init+0x1c>)
{
 8000a88:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a8a:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a8c:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a8e:	430b      	orrs	r3, r1
 8000a90:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a92:	f7ff ffd1 	bl	8000a38 <HAL_InitTick>
  HAL_MspInit();
 8000a96:	f7ff fd9d 	bl	80005d4 <HAL_MspInit>
}
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	bd10      	pop	{r4, pc}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	40022000 	.word	0x40022000

08000aa4 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000aa4:	4a03      	ldr	r2, [pc, #12]	; (8000ab4 <HAL_IncTick+0x10>)
 8000aa6:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <HAL_IncTick+0x14>)
 8000aa8:	6811      	ldr	r1, [r2, #0]
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	185b      	adds	r3, r3, r1
 8000aae:	6013      	str	r3, [r2, #0]
}
 8000ab0:	4770      	bx	lr
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	20000a84 	.word	0x20000a84
 8000ab8:	20000018 	.word	0x20000018

08000abc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000abc:	4b01      	ldr	r3, [pc, #4]	; (8000ac4 <HAL_GetTick+0x8>)
 8000abe:	6818      	ldr	r0, [r3, #0]
}
 8000ac0:	4770      	bx	lr
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	20000a84 	.word	0x20000a84

08000ac8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ac8:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000aca:	2800      	cmp	r0, #0
 8000acc:	db14      	blt.n	8000af8 <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ace:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <HAL_NVIC_SetPriority+0x5c>)
 8000ad0:	2203      	movs	r2, #3
 8000ad2:	469c      	mov	ip, r3
 8000ad4:	23ff      	movs	r3, #255	; 0xff
 8000ad6:	0884      	lsrs	r4, r0, #2
 8000ad8:	4010      	ands	r0, r2
 8000ada:	001a      	movs	r2, r3
 8000adc:	26c0      	movs	r6, #192	; 0xc0
 8000ade:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ae0:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ae2:	4082      	lsls	r2, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ae4:	400b      	ands	r3, r1
 8000ae6:	4083      	lsls	r3, r0
 8000ae8:	00a4      	lsls	r4, r4, #2
 8000aea:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aec:	00b6      	lsls	r6, r6, #2
 8000aee:	59a5      	ldr	r5, [r4, r6]
 8000af0:	4395      	bics	r5, r2
 8000af2:	432b      	orrs	r3, r5
 8000af4:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000af6:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000af8:	4a0b      	ldr	r2, [pc, #44]	; (8000b28 <HAL_NVIC_SetPriority+0x60>)
 8000afa:	230f      	movs	r3, #15
 8000afc:	4694      	mov	ip, r2
 8000afe:	2203      	movs	r2, #3
 8000b00:	4003      	ands	r3, r0
 8000b02:	4010      	ands	r0, r2
 8000b04:	32fc      	adds	r2, #252	; 0xfc
 8000b06:	0015      	movs	r5, r2
 8000b08:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b0a:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b0c:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b0e:	400a      	ands	r2, r1
 8000b10:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b12:	3b08      	subs	r3, #8
 8000b14:	089b      	lsrs	r3, r3, #2
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	4463      	add	r3, ip
 8000b1a:	69dc      	ldr	r4, [r3, #28]
 8000b1c:	43ac      	bics	r4, r5
 8000b1e:	4322      	orrs	r2, r4
 8000b20:	61da      	str	r2, [r3, #28]
 8000b22:	e7e8      	b.n	8000af6 <HAL_NVIC_SetPriority+0x2e>
 8000b24:	e000e100 	.word	0xe000e100
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000b2c:	2800      	cmp	r0, #0
 8000b2e:	db05      	blt.n	8000b3c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b30:	231f      	movs	r3, #31
 8000b32:	4018      	ands	r0, r3
 8000b34:	3b1e      	subs	r3, #30
 8000b36:	4083      	lsls	r3, r0
 8000b38:	4a01      	ldr	r2, [pc, #4]	; (8000b40 <HAL_NVIC_EnableIRQ+0x14>)
 8000b3a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000b3c:	4770      	bx	lr
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	e000e100 	.word	0xe000e100

08000b44 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b44:	2280      	movs	r2, #128	; 0x80
 8000b46:	1e43      	subs	r3, r0, #1
 8000b48:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b4a:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d20e      	bcs.n	8000b6e <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b50:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b52:	4a07      	ldr	r2, [pc, #28]	; (8000b70 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b54:	4807      	ldr	r0, [pc, #28]	; (8000b74 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b56:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b58:	6a03      	ldr	r3, [r0, #32]
 8000b5a:	0609      	lsls	r1, r1, #24
 8000b5c:	021b      	lsls	r3, r3, #8
 8000b5e:	0a1b      	lsrs	r3, r3, #8
 8000b60:	430b      	orrs	r3, r1
 8000b62:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b64:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b66:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b68:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b6a:	3307      	adds	r3, #7
 8000b6c:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b6e:	4770      	bx	lr
 8000b70:	e000e010 	.word	0xe000e010
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <HAL_DMA_Abort>:
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b78:	2321      	movs	r3, #33	; 0x21
{
 8000b7a:	b530      	push	{r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b7c:	5cc2      	ldrb	r2, [r0, r3]
 8000b7e:	2a02      	cmp	r2, #2
 8000b80:	d006      	beq.n	8000b90 <HAL_DMA_Abort+0x18>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b82:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b84:	3b1d      	subs	r3, #29
 8000b86:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8000b88:	331c      	adds	r3, #28
 8000b8a:	54c2      	strb	r2, [r0, r3]
    
    return HAL_ERROR;
 8000b8c:	2001      	movs	r0, #1
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
  
  return HAL_OK;
}
 8000b8e:	bd30      	pop	{r4, r5, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b90:	240e      	movs	r4, #14
 8000b92:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000b94:	6c05      	ldr	r5, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b96:	6811      	ldr	r1, [r2, #0]
 8000b98:	43a1      	bics	r1, r4
 8000b9a:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	6814      	ldr	r4, [r2, #0]
 8000ba0:	438c      	bics	r4, r1
 8000ba2:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000ba4:	000c      	movs	r4, r1
 8000ba6:	40ac      	lsls	r4, r5
 8000ba8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000baa:	6054      	str	r4, [r2, #4]
  hdma->State = HAL_DMA_STATE_READY; 
 8000bac:	54c1      	strb	r1, [r0, r3]
  __HAL_UNLOCK(hdma);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2320      	movs	r3, #32
 8000bb2:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	e7ea      	b.n	8000b8e <HAL_DMA_Abort+0x16>

08000bb8 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000bb8:	2321      	movs	r3, #33	; 0x21
{  
 8000bba:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000bbc:	5cc2      	ldrb	r2, [r0, r3]
 8000bbe:	2a02      	cmp	r2, #2
 8000bc0:	d003      	beq.n	8000bca <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bc2:	3b1d      	subs	r3, #29
 8000bc4:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000bc6:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8000bc8:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000bca:	240e      	movs	r4, #14
 8000bcc:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000bce:	6c05      	ldr	r5, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000bd0:	6811      	ldr	r1, [r2, #0]
 8000bd2:	43a1      	bics	r1, r4
 8000bd4:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	6814      	ldr	r4, [r2, #0]
 8000bda:	438c      	bics	r4, r1
 8000bdc:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000bde:	000c      	movs	r4, r1
 8000be0:	40ac      	lsls	r4, r5
 8000be2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000be4:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000be6:	54c1      	strb	r1, [r0, r3]
    __HAL_UNLOCK(hdma);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2320      	movs	r3, #32
 8000bec:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferAbortCallback != NULL)
 8000bee:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d002      	beq.n	8000bfa <HAL_DMA_Abort_IT+0x42>
      hdma->XferAbortCallback(hdma);
 8000bf4:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	e7e6      	b.n	8000bc8 <HAL_DMA_Abort_IT+0x10>
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	e7e4      	b.n	8000bc8 <HAL_DMA_Abort_IT+0x10>
 8000bfe:	46c0      	nop			; (mov r8, r8)

08000c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c02:	464e      	mov	r6, r9
 8000c04:	46de      	mov	lr, fp
 8000c06:	4657      	mov	r7, sl
 8000c08:	4645      	mov	r5, r8
 8000c0a:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c0c:	680a      	ldr	r2, [r1, #0]
{
 8000c0e:	4689      	mov	r9, r1
  uint32_t position = 0x00u;
 8000c10:	2300      	movs	r3, #0
{
 8000c12:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c14:	2a00      	cmp	r2, #0
 8000c16:	d075      	beq.n	8000d04 <HAL_GPIO_Init+0x104>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c18:	2101      	movs	r1, #1
 8000c1a:	4688      	mov	r8, r1
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1c:	496c      	ldr	r1, [pc, #432]	; (8000dd0 <HAL_GPIO_Init+0x1d0>)
 8000c1e:	468b      	mov	fp, r1
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c20:	4644      	mov	r4, r8
 8000c22:	0015      	movs	r5, r2
 8000c24:	409c      	lsls	r4, r3
 8000c26:	4025      	ands	r5, r4
 8000c28:	9501      	str	r5, [sp, #4]
    if (iocurrent != 0x00u)
 8000c2a:	4222      	tst	r2, r4
 8000c2c:	d066      	beq.n	8000cfc <HAL_GPIO_Init+0xfc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c2e:	464d      	mov	r5, r9
 8000c30:	2603      	movs	r6, #3
 8000c32:	686d      	ldr	r5, [r5, #4]
 8000c34:	402e      	ands	r6, r5
 8000c36:	46aa      	mov	sl, r5
 8000c38:	1e75      	subs	r5, r6, #1
 8000c3a:	2d01      	cmp	r5, #1
 8000c3c:	d969      	bls.n	8000d12 <HAL_GPIO_Init+0x112>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c3e:	005f      	lsls	r7, r3, #1
 8000c40:	2e03      	cmp	r6, #3
 8000c42:	d000      	beq.n	8000c46 <HAL_GPIO_Init+0x46>
 8000c44:	e0a5      	b.n	8000d92 <HAL_GPIO_Init+0x192>
 8000c46:	0034      	movs	r4, r6
 8000c48:	40bc      	lsls	r4, r7
 8000c4a:	43e1      	mvns	r1, r4
 8000c4c:	9102      	str	r1, [sp, #8]
      temp = GPIOx->MODER;
 8000c4e:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c50:	9d02      	ldr	r5, [sp, #8]
 8000c52:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c54:	4325      	orrs	r5, r4
      GPIOx->MODER = temp;
 8000c56:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c58:	25c0      	movs	r5, #192	; 0xc0
 8000c5a:	4654      	mov	r4, sl
 8000c5c:	02ad      	lsls	r5, r5, #10
 8000c5e:	422c      	tst	r4, r5
 8000c60:	d04c      	beq.n	8000cfc <HAL_GPIO_Init+0xfc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c62:	4659      	mov	r1, fp
 8000c64:	698c      	ldr	r4, [r1, #24]
 8000c66:	4641      	mov	r1, r8
 8000c68:	430c      	orrs	r4, r1
 8000c6a:	4659      	mov	r1, fp
 8000c6c:	618c      	str	r4, [r1, #24]
 8000c6e:	698c      	ldr	r4, [r1, #24]
 8000c70:	4641      	mov	r1, r8

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c72:	2603      	movs	r6, #3
 8000c74:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c76:	400c      	ands	r4, r1
 8000c78:	4956      	ldr	r1, [pc, #344]	; (8000dd4 <HAL_GPIO_Init+0x1d4>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c7a:	401e      	ands	r6, r3
 8000c7c:	468c      	mov	ip, r1
 8000c7e:	00b6      	lsls	r6, r6, #2
 8000c80:	40b7      	lsls	r7, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c82:	2190      	movs	r1, #144	; 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c84:	9405      	str	r4, [sp, #20]
 8000c86:	9c05      	ldr	r4, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000c88:	089c      	lsrs	r4, r3, #2
 8000c8a:	00a4      	lsls	r4, r4, #2
 8000c8c:	4464      	add	r4, ip
 8000c8e:	68a5      	ldr	r5, [r4, #8]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c90:	05c9      	lsls	r1, r1, #23
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c92:	43bd      	bics	r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c94:	4288      	cmp	r0, r1
 8000c96:	d00e      	beq.n	8000cb6 <HAL_GPIO_Init+0xb6>
 8000c98:	4f4f      	ldr	r7, [pc, #316]	; (8000dd8 <HAL_GPIO_Init+0x1d8>)
 8000c9a:	42b8      	cmp	r0, r7
 8000c9c:	d100      	bne.n	8000ca0 <HAL_GPIO_Init+0xa0>
 8000c9e:	e08e      	b.n	8000dbe <HAL_GPIO_Init+0x1be>
 8000ca0:	4f4e      	ldr	r7, [pc, #312]	; (8000ddc <HAL_GPIO_Init+0x1dc>)
 8000ca2:	42b8      	cmp	r0, r7
 8000ca4:	d100      	bne.n	8000ca8 <HAL_GPIO_Init+0xa8>
 8000ca6:	e08e      	b.n	8000dc6 <HAL_GPIO_Init+0x1c6>
 8000ca8:	4f4d      	ldr	r7, [pc, #308]	; (8000de0 <HAL_GPIO_Init+0x1e0>)
 8000caa:	42b8      	cmp	r0, r7
 8000cac:	d100      	bne.n	8000cb0 <HAL_GPIO_Init+0xb0>
 8000cae:	e082      	b.n	8000db6 <HAL_GPIO_Init+0x1b6>
 8000cb0:	2705      	movs	r7, #5
 8000cb2:	40b7      	lsls	r7, r6
 8000cb4:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cb6:	494b      	ldr	r1, [pc, #300]	; (8000de4 <HAL_GPIO_Init+0x1e4>)
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cb8:	60a5      	str	r5, [r4, #8]
        temp = EXTI->IMR;
 8000cba:	680c      	ldr	r4, [r1, #0]
        temp &= ~(iocurrent);
 8000cbc:	9901      	ldr	r1, [sp, #4]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cbe:	2580      	movs	r5, #128	; 0x80
        temp &= ~(iocurrent);
 8000cc0:	43ce      	mvns	r6, r1
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cc2:	4651      	mov	r1, sl
 8000cc4:	026d      	lsls	r5, r5, #9
 8000cc6:	4229      	tst	r1, r5
 8000cc8:	d000      	beq.n	8000ccc <HAL_GPIO_Init+0xcc>
 8000cca:	e071      	b.n	8000db0 <HAL_GPIO_Init+0x1b0>
        temp &= ~(iocurrent);
 8000ccc:	4034      	ands	r4, r6
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8000cce:	4945      	ldr	r1, [pc, #276]	; (8000de4 <HAL_GPIO_Init+0x1e4>)
 8000cd0:	600c      	str	r4, [r1, #0]

        temp = EXTI->EMR;
 8000cd2:	684c      	ldr	r4, [r1, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cd4:	4651      	mov	r1, sl
 8000cd6:	0389      	lsls	r1, r1, #14
 8000cd8:	d467      	bmi.n	8000daa <HAL_GPIO_Init+0x1aa>
        temp &= ~(iocurrent);
 8000cda:	4034      	ands	r4, r6
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8000cdc:	4941      	ldr	r1, [pc, #260]	; (8000de4 <HAL_GPIO_Init+0x1e4>)
 8000cde:	604c      	str	r4, [r1, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ce0:	688d      	ldr	r5, [r1, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ce2:	4651      	mov	r1, sl
 8000ce4:	02c9      	lsls	r1, r1, #11
 8000ce6:	d45d      	bmi.n	8000da4 <HAL_GPIO_Init+0x1a4>
        temp &= ~(iocurrent);
 8000ce8:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8000cea:	493e      	ldr	r1, [pc, #248]	; (8000de4 <HAL_GPIO_Init+0x1e4>)
 8000cec:	608d      	str	r5, [r1, #8]

        temp = EXTI->FTSR;
 8000cee:	68cc      	ldr	r4, [r1, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cf0:	4651      	mov	r1, sl
 8000cf2:	0289      	lsls	r1, r1, #10
 8000cf4:	d452      	bmi.n	8000d9c <HAL_GPIO_Init+0x19c>
        temp &= ~(iocurrent);
 8000cf6:	4034      	ands	r4, r6
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8000cf8:	493a      	ldr	r1, [pc, #232]	; (8000de4 <HAL_GPIO_Init+0x1e4>)
 8000cfa:	60cc      	str	r4, [r1, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cfc:	0014      	movs	r4, r2
      }
    }

    position++;
 8000cfe:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d00:	40dc      	lsrs	r4, r3
 8000d02:	d18d      	bne.n	8000c20 <HAL_GPIO_Init+0x20>
  } 
}
 8000d04:	b007      	add	sp, #28
 8000d06:	bcf0      	pop	{r4, r5, r6, r7}
 8000d08:	46bb      	mov	fp, r7
 8000d0a:	46b2      	mov	sl, r6
 8000d0c:	46a9      	mov	r9, r5
 8000d0e:	46a0      	mov	r8, r4
 8000d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 8000d12:	6885      	ldr	r5, [r0, #8]
 8000d14:	005f      	lsls	r7, r3, #1
 8000d16:	9503      	str	r5, [sp, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d18:	2503      	movs	r5, #3
 8000d1a:	40bd      	lsls	r5, r7
 8000d1c:	46ac      	mov	ip, r5
 8000d1e:	43e9      	mvns	r1, r5
 8000d20:	9102      	str	r1, [sp, #8]
 8000d22:	4661      	mov	r1, ip
 8000d24:	9d03      	ldr	r5, [sp, #12]
 8000d26:	438d      	bics	r5, r1
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d28:	4649      	mov	r1, r9
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d2a:	9503      	str	r5, [sp, #12]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d2c:	68cd      	ldr	r5, [r1, #12]
 8000d2e:	40bd      	lsls	r5, r7
 8000d30:	46ac      	mov	ip, r5
 8000d32:	4661      	mov	r1, ip
 8000d34:	9d03      	ldr	r5, [sp, #12]
 8000d36:	430d      	orrs	r5, r1
        GPIOx->OSPEEDR = temp;
 8000d38:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8000d3a:	6841      	ldr	r1, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d3c:	000d      	movs	r5, r1
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d3e:	4651      	mov	r1, sl
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d40:	43a5      	bics	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d42:	090c      	lsrs	r4, r1, #4
 8000d44:	4641      	mov	r1, r8
 8000d46:	400c      	ands	r4, r1
 8000d48:	409c      	lsls	r4, r3
 8000d4a:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8000d4c:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8000d4e:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d50:	9902      	ldr	r1, [sp, #8]
 8000d52:	400c      	ands	r4, r1
 8000d54:	46a4      	mov	ip, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d56:	464c      	mov	r4, r9
 8000d58:	68a4      	ldr	r4, [r4, #8]
 8000d5a:	4665      	mov	r5, ip
 8000d5c:	40bc      	lsls	r4, r7
 8000d5e:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8000d60:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d62:	0034      	movs	r4, r6
 8000d64:	40bc      	lsls	r4, r7
 8000d66:	2e02      	cmp	r6, #2
 8000d68:	d000      	beq.n	8000d6c <HAL_GPIO_Init+0x16c>
 8000d6a:	e770      	b.n	8000c4e <HAL_GPIO_Init+0x4e>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d6c:	2707      	movs	r7, #7
 8000d6e:	250f      	movs	r5, #15
 8000d70:	401f      	ands	r7, r3
 8000d72:	00bf      	lsls	r7, r7, #2
 8000d74:	40bd      	lsls	r5, r7
        temp = GPIOx->AFR[position >> 3u];
 8000d76:	08de      	lsrs	r6, r3, #3
 8000d78:	00b6      	lsls	r6, r6, #2
 8000d7a:	1986      	adds	r6, r0, r6
 8000d7c:	6a31      	ldr	r1, [r6, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d7e:	43a9      	bics	r1, r5
 8000d80:	468c      	mov	ip, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d82:	4649      	mov	r1, r9
 8000d84:	6909      	ldr	r1, [r1, #16]
 8000d86:	40b9      	lsls	r1, r7
 8000d88:	000f      	movs	r7, r1
 8000d8a:	4661      	mov	r1, ip
 8000d8c:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3u] = temp;
 8000d8e:	6237      	str	r7, [r6, #32]
 8000d90:	e75d      	b.n	8000c4e <HAL_GPIO_Init+0x4e>
 8000d92:	2503      	movs	r5, #3
 8000d94:	40bd      	lsls	r5, r7
 8000d96:	43e9      	mvns	r1, r5
 8000d98:	9102      	str	r1, [sp, #8]
 8000d9a:	e7d8      	b.n	8000d4e <HAL_GPIO_Init+0x14e>
          temp |= iocurrent;
 8000d9c:	9901      	ldr	r1, [sp, #4]
 8000d9e:	4321      	orrs	r1, r4
 8000da0:	000c      	movs	r4, r1
 8000da2:	e7a9      	b.n	8000cf8 <HAL_GPIO_Init+0xf8>
          temp |= iocurrent;
 8000da4:	9901      	ldr	r1, [sp, #4]
 8000da6:	430d      	orrs	r5, r1
 8000da8:	e79f      	b.n	8000cea <HAL_GPIO_Init+0xea>
          temp |= iocurrent;
 8000daa:	9901      	ldr	r1, [sp, #4]
 8000dac:	430c      	orrs	r4, r1
 8000dae:	e795      	b.n	8000cdc <HAL_GPIO_Init+0xdc>
          temp |= iocurrent;
 8000db0:	9901      	ldr	r1, [sp, #4]
 8000db2:	430c      	orrs	r4, r1
 8000db4:	e78b      	b.n	8000cce <HAL_GPIO_Init+0xce>
 8000db6:	2103      	movs	r1, #3
 8000db8:	40b1      	lsls	r1, r6
 8000dba:	430d      	orrs	r5, r1
 8000dbc:	e77b      	b.n	8000cb6 <HAL_GPIO_Init+0xb6>
 8000dbe:	4641      	mov	r1, r8
 8000dc0:	40b1      	lsls	r1, r6
 8000dc2:	430d      	orrs	r5, r1
 8000dc4:	e777      	b.n	8000cb6 <HAL_GPIO_Init+0xb6>
 8000dc6:	2702      	movs	r7, #2
 8000dc8:	40b7      	lsls	r7, r6
 8000dca:	433d      	orrs	r5, r7
 8000dcc:	e773      	b.n	8000cb6 <HAL_GPIO_Init+0xb6>
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	40010000 	.word	0x40010000
 8000dd8:	48000400 	.word	0x48000400
 8000ddc:	48000800 	.word	0x48000800
 8000de0:	48000c00 	.word	0x48000c00
 8000de4:	40010400 	.word	0x40010400

08000de8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000de8:	2a00      	cmp	r2, #0
 8000dea:	d001      	beq.n	8000df0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dec:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000dee:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000df0:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000df2:	e7fc      	b.n	8000dee <HAL_GPIO_WritePin+0x6>

08000df4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000df6:	46ce      	mov	lr, r9
 8000df8:	4647      	mov	r7, r8
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	0004      	movs	r4, r0
 8000dfe:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e00:	2800      	cmp	r0, #0
 8000e02:	d100      	bne.n	8000e06 <HAL_RCC_OscConfig+0x12>
 8000e04:	e0ed      	b.n	8000fe2 <HAL_RCC_OscConfig+0x1ee>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e06:	6803      	ldr	r3, [r0, #0]
 8000e08:	07da      	lsls	r2, r3, #31
 8000e0a:	d52f      	bpl.n	8000e6c <HAL_RCC_OscConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e0c:	210c      	movs	r1, #12
 8000e0e:	48c2      	ldr	r0, [pc, #776]	; (8001118 <HAL_RCC_OscConfig+0x324>)
 8000e10:	6842      	ldr	r2, [r0, #4]
 8000e12:	400a      	ands	r2, r1
 8000e14:	2a04      	cmp	r2, #4
 8000e16:	d100      	bne.n	8000e1a <HAL_RCC_OscConfig+0x26>
 8000e18:	e105      	b.n	8001026 <HAL_RCC_OscConfig+0x232>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e1a:	6842      	ldr	r2, [r0, #4]
 8000e1c:	4011      	ands	r1, r2
 8000e1e:	2908      	cmp	r1, #8
 8000e20:	d100      	bne.n	8000e24 <HAL_RCC_OscConfig+0x30>
 8000e22:	e0f7      	b.n	8001014 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e24:	6863      	ldr	r3, [r4, #4]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d100      	bne.n	8000e2c <HAL_RCC_OscConfig+0x38>
 8000e2a:	e106      	b.n	800103a <HAL_RCC_OscConfig+0x246>
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d100      	bne.n	8000e32 <HAL_RCC_OscConfig+0x3e>
 8000e30:	e128      	b.n	8001084 <HAL_RCC_OscConfig+0x290>
 8000e32:	2b05      	cmp	r3, #5
 8000e34:	d100      	bne.n	8000e38 <HAL_RCC_OscConfig+0x44>
 8000e36:	e22c      	b.n	8001292 <HAL_RCC_OscConfig+0x49e>
 8000e38:	4bb7      	ldr	r3, [pc, #732]	; (8001118 <HAL_RCC_OscConfig+0x324>)
 8000e3a:	49b8      	ldr	r1, [pc, #736]	; (800111c <HAL_RCC_OscConfig+0x328>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	400a      	ands	r2, r1
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	49b6      	ldr	r1, [pc, #728]	; (8001120 <HAL_RCC_OscConfig+0x32c>)
 8000e46:	400a      	ands	r2, r1
 8000e48:	601a      	str	r2, [r3, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e4a:	f7ff fe37 	bl	8000abc <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e4e:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000e50:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e52:	4fb1      	ldr	r7, [pc, #708]	; (8001118 <HAL_RCC_OscConfig+0x324>)
 8000e54:	02b6      	lsls	r6, r6, #10
 8000e56:	e005      	b.n	8000e64 <HAL_RCC_OscConfig+0x70>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e58:	f7ff fe30 	bl	8000abc <HAL_GetTick>
 8000e5c:	1b40      	subs	r0, r0, r5
 8000e5e:	2864      	cmp	r0, #100	; 0x64
 8000e60:	d900      	bls.n	8000e64 <HAL_RCC_OscConfig+0x70>
 8000e62:	e10d      	b.n	8001080 <HAL_RCC_OscConfig+0x28c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	4233      	tst	r3, r6
 8000e68:	d0f6      	beq.n	8000e58 <HAL_RCC_OscConfig+0x64>
 8000e6a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e6c:	079a      	lsls	r2, r3, #30
 8000e6e:	d529      	bpl.n	8000ec4 <HAL_RCC_OscConfig+0xd0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e70:	220c      	movs	r2, #12
 8000e72:	49a9      	ldr	r1, [pc, #676]	; (8001118 <HAL_RCC_OscConfig+0x324>)
 8000e74:	6848      	ldr	r0, [r1, #4]
 8000e76:	4202      	tst	r2, r0
 8000e78:	d100      	bne.n	8000e7c <HAL_RCC_OscConfig+0x88>
 8000e7a:	e0ab      	b.n	8000fd4 <HAL_RCC_OscConfig+0x1e0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e7c:	6848      	ldr	r0, [r1, #4]
 8000e7e:	4002      	ands	r2, r0
 8000e80:	2a08      	cmp	r2, #8
 8000e82:	d100      	bne.n	8000e86 <HAL_RCC_OscConfig+0x92>
 8000e84:	e09d      	b.n	8000fc2 <HAL_RCC_OscConfig+0x1ce>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e86:	68e3      	ldr	r3, [r4, #12]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e88:	4da3      	ldr	r5, [pc, #652]	; (8001118 <HAL_RCC_OscConfig+0x324>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d100      	bne.n	8000e90 <HAL_RCC_OscConfig+0x9c>
 8000e8e:	e130      	b.n	80010f2 <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_HSI_ENABLE();
 8000e90:	2201      	movs	r2, #1
 8000e92:	682b      	ldr	r3, [r5, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e94:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8000e96:	4313      	orrs	r3, r2
 8000e98:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e9a:	f7ff fe0f 	bl	8000abc <HAL_GetTick>
 8000e9e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ea0:	e005      	b.n	8000eae <HAL_RCC_OscConfig+0xba>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ea2:	f7ff fe0b 	bl	8000abc <HAL_GetTick>
 8000ea6:	1b80      	subs	r0, r0, r6
 8000ea8:	2802      	cmp	r0, #2
 8000eaa:	d900      	bls.n	8000eae <HAL_RCC_OscConfig+0xba>
 8000eac:	e0e8      	b.n	8001080 <HAL_RCC_OscConfig+0x28c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eae:	682b      	ldr	r3, [r5, #0]
 8000eb0:	421f      	tst	r7, r3
 8000eb2:	d0f6      	beq.n	8000ea2 <HAL_RCC_OscConfig+0xae>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eb4:	21f8      	movs	r1, #248	; 0xf8
 8000eb6:	682a      	ldr	r2, [r5, #0]
 8000eb8:	6923      	ldr	r3, [r4, #16]
 8000eba:	438a      	bics	r2, r1
 8000ebc:	00db      	lsls	r3, r3, #3
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	602b      	str	r3, [r5, #0]
 8000ec2:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ec4:	071a      	lsls	r2, r3, #28
 8000ec6:	d42d      	bmi.n	8000f24 <HAL_RCC_OscConfig+0x130>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ec8:	075a      	lsls	r2, r3, #29
 8000eca:	d544      	bpl.n	8000f56 <HAL_RCC_OscConfig+0x162>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ecc:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000ece:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ed0:	4b91      	ldr	r3, [pc, #580]	; (8001118 <HAL_RCC_OscConfig+0x324>)
 8000ed2:	0552      	lsls	r2, r2, #21
 8000ed4:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000ed6:	4681      	mov	r9, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ed8:	4211      	tst	r1, r2
 8000eda:	d108      	bne.n	8000eee <HAL_RCC_OscConfig+0xfa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000edc:	69d9      	ldr	r1, [r3, #28]
 8000ede:	4311      	orrs	r1, r2
 8000ee0:	61d9      	str	r1, [r3, #28]
 8000ee2:	69db      	ldr	r3, [r3, #28]
 8000ee4:	401a      	ands	r2, r3
 8000ee6:	9201      	str	r2, [sp, #4]
 8000ee8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000eea:	2301      	movs	r3, #1
 8000eec:	4699      	mov	r9, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eee:	2780      	movs	r7, #128	; 0x80
 8000ef0:	4e8c      	ldr	r6, [pc, #560]	; (8001124 <HAL_RCC_OscConfig+0x330>)
 8000ef2:	007f      	lsls	r7, r7, #1
 8000ef4:	6833      	ldr	r3, [r6, #0]
 8000ef6:	423b      	tst	r3, r7
 8000ef8:	d100      	bne.n	8000efc <HAL_RCC_OscConfig+0x108>
 8000efa:	e0a5      	b.n	8001048 <HAL_RCC_OscConfig+0x254>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000efc:	68a3      	ldr	r3, [r4, #8]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d100      	bne.n	8000f04 <HAL_RCC_OscConfig+0x110>
 8000f02:	e115      	b.n	8001130 <HAL_RCC_OscConfig+0x33c>
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d100      	bne.n	8000f0a <HAL_RCC_OscConfig+0x116>
 8000f08:	e0d5      	b.n	80010b6 <HAL_RCC_OscConfig+0x2c2>
 8000f0a:	2b05      	cmp	r3, #5
 8000f0c:	d100      	bne.n	8000f10 <HAL_RCC_OscConfig+0x11c>
 8000f0e:	e144      	b.n	800119a <HAL_RCC_OscConfig+0x3a6>
 8000f10:	2101      	movs	r1, #1
 8000f12:	4b81      	ldr	r3, [pc, #516]	; (8001118 <HAL_RCC_OscConfig+0x324>)
 8000f14:	6a1a      	ldr	r2, [r3, #32]
 8000f16:	438a      	bics	r2, r1
 8000f18:	621a      	str	r2, [r3, #32]
 8000f1a:	6a1a      	ldr	r2, [r3, #32]
 8000f1c:	3103      	adds	r1, #3
 8000f1e:	438a      	bics	r2, r1
 8000f20:	621a      	str	r2, [r3, #32]
 8000f22:	e109      	b.n	8001138 <HAL_RCC_OscConfig+0x344>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f24:	69e3      	ldr	r3, [r4, #28]
      __HAL_RCC_LSI_ENABLE();
 8000f26:	4d7c      	ldr	r5, [pc, #496]	; (8001118 <HAL_RCC_OscConfig+0x324>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d060      	beq.n	8000fee <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_LSI_ENABLE();
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f30:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8000f32:	4313      	orrs	r3, r2
 8000f34:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000f36:	f7ff fdc1 	bl	8000abc <HAL_GetTick>
 8000f3a:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f3c:	e005      	b.n	8000f4a <HAL_RCC_OscConfig+0x156>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f3e:	f7ff fdbd 	bl	8000abc <HAL_GetTick>
 8000f42:	1b80      	subs	r0, r0, r6
 8000f44:	2802      	cmp	r0, #2
 8000f46:	d900      	bls.n	8000f4a <HAL_RCC_OscConfig+0x156>
 8000f48:	e09a      	b.n	8001080 <HAL_RCC_OscConfig+0x28c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f4a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000f4c:	421f      	tst	r7, r3
 8000f4e:	d0f6      	beq.n	8000f3e <HAL_RCC_OscConfig+0x14a>
 8000f50:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f52:	075a      	lsls	r2, r3, #29
 8000f54:	d4ba      	bmi.n	8000ecc <HAL_RCC_OscConfig+0xd8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000f56:	06db      	lsls	r3, r3, #27
 8000f58:	d512      	bpl.n	8000f80 <HAL_RCC_OscConfig+0x18c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000f5a:	6963      	ldr	r3, [r4, #20]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d100      	bne.n	8000f62 <HAL_RCC_OscConfig+0x16e>
 8000f60:	e141      	b.n	80011e6 <HAL_RCC_OscConfig+0x3f2>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000f62:	3305      	adds	r3, #5
 8000f64:	d000      	beq.n	8000f68 <HAL_RCC_OscConfig+0x174>
 8000f66:	e0f9      	b.n	800115c <HAL_RCC_OscConfig+0x368>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000f68:	2104      	movs	r1, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000f6a:	20f8      	movs	r0, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 8000f6c:	4a6a      	ldr	r2, [pc, #424]	; (8001118 <HAL_RCC_OscConfig+0x324>)
 8000f6e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000f70:	438b      	bics	r3, r1
 8000f72:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000f74:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8000f76:	69a3      	ldr	r3, [r4, #24]
 8000f78:	4381      	bics	r1, r0
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	430b      	orrs	r3, r1
 8000f7e:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f80:	6a23      	ldr	r3, [r4, #32]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d01b      	beq.n	8000fbe <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f86:	220c      	movs	r2, #12
 8000f88:	4e63      	ldr	r6, [pc, #396]	; (8001118 <HAL_RCC_OscConfig+0x324>)
 8000f8a:	6871      	ldr	r1, [r6, #4]
 8000f8c:	400a      	ands	r2, r1
 8000f8e:	2a08      	cmp	r2, #8
 8000f90:	d100      	bne.n	8000f94 <HAL_RCC_OscConfig+0x1a0>
 8000f92:	e10c      	b.n	80011ae <HAL_RCC_OscConfig+0x3ba>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d100      	bne.n	8000f9a <HAL_RCC_OscConfig+0x1a6>
 8000f98:	e143      	b.n	8001222 <HAL_RCC_OscConfig+0x42e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f9a:	6833      	ldr	r3, [r6, #0]
 8000f9c:	4a62      	ldr	r2, [pc, #392]	; (8001128 <HAL_RCC_OscConfig+0x334>)
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f9e:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000fa4:	f7ff fd8a 	bl	8000abc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fa8:	04ad      	lsls	r5, r5, #18
        tickstart = HAL_GetTick();
 8000faa:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fac:	e004      	b.n	8000fb8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fae:	f7ff fd85 	bl	8000abc <HAL_GetTick>
 8000fb2:	1b00      	subs	r0, r0, r4
 8000fb4:	2802      	cmp	r0, #2
 8000fb6:	d863      	bhi.n	8001080 <HAL_RCC_OscConfig+0x28c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fb8:	6833      	ldr	r3, [r6, #0]
 8000fba:	422b      	tst	r3, r5
 8000fbc:	d1f7      	bne.n	8000fae <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }

  return HAL_OK;
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	e010      	b.n	8000fe4 <HAL_RCC_OscConfig+0x1f0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000fc2:	684a      	ldr	r2, [r1, #4]
 8000fc4:	21c0      	movs	r1, #192	; 0xc0
 8000fc6:	0249      	lsls	r1, r1, #9
 8000fc8:	400a      	ands	r2, r1
 8000fca:	2180      	movs	r1, #128	; 0x80
 8000fcc:	0209      	lsls	r1, r1, #8
 8000fce:	428a      	cmp	r2, r1
 8000fd0:	d000      	beq.n	8000fd4 <HAL_RCC_OscConfig+0x1e0>
 8000fd2:	e758      	b.n	8000e86 <HAL_RCC_OscConfig+0x92>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fd4:	4a50      	ldr	r2, [pc, #320]	; (8001118 <HAL_RCC_OscConfig+0x324>)
 8000fd6:	6812      	ldr	r2, [r2, #0]
 8000fd8:	0792      	lsls	r2, r2, #30
 8000fda:	d545      	bpl.n	8001068 <HAL_RCC_OscConfig+0x274>
 8000fdc:	68e2      	ldr	r2, [r4, #12]
 8000fde:	2a01      	cmp	r2, #1
 8000fe0:	d042      	beq.n	8001068 <HAL_RCC_OscConfig+0x274>
        return HAL_ERROR;
 8000fe2:	2001      	movs	r0, #1
}
 8000fe4:	b003      	add	sp, #12
 8000fe6:	bcc0      	pop	{r6, r7}
 8000fe8:	46b9      	mov	r9, r7
 8000fea:	46b0      	mov	r8, r6
 8000fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_LSI_DISABLE();
 8000fee:	2201      	movs	r2, #1
 8000ff0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ff2:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8000ff4:	4393      	bics	r3, r2
 8000ff6:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000ff8:	f7ff fd60 	bl	8000abc <HAL_GetTick>
 8000ffc:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ffe:	e004      	b.n	800100a <HAL_RCC_OscConfig+0x216>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001000:	f7ff fd5c 	bl	8000abc <HAL_GetTick>
 8001004:	1b80      	subs	r0, r0, r6
 8001006:	2802      	cmp	r0, #2
 8001008:	d83a      	bhi.n	8001080 <HAL_RCC_OscConfig+0x28c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800100a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800100c:	421f      	tst	r7, r3
 800100e:	d1f7      	bne.n	8001000 <HAL_RCC_OscConfig+0x20c>
 8001010:	6823      	ldr	r3, [r4, #0]
 8001012:	e79e      	b.n	8000f52 <HAL_RCC_OscConfig+0x15e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001014:	21c0      	movs	r1, #192	; 0xc0
 8001016:	6842      	ldr	r2, [r0, #4]
 8001018:	0249      	lsls	r1, r1, #9
 800101a:	400a      	ands	r2, r1
 800101c:	2180      	movs	r1, #128	; 0x80
 800101e:	0249      	lsls	r1, r1, #9
 8001020:	428a      	cmp	r2, r1
 8001022:	d000      	beq.n	8001026 <HAL_RCC_OscConfig+0x232>
 8001024:	e6fe      	b.n	8000e24 <HAL_RCC_OscConfig+0x30>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001026:	4a3c      	ldr	r2, [pc, #240]	; (8001118 <HAL_RCC_OscConfig+0x324>)
 8001028:	6812      	ldr	r2, [r2, #0]
 800102a:	0392      	lsls	r2, r2, #14
 800102c:	d400      	bmi.n	8001030 <HAL_RCC_OscConfig+0x23c>
 800102e:	e71d      	b.n	8000e6c <HAL_RCC_OscConfig+0x78>
 8001030:	6862      	ldr	r2, [r4, #4]
 8001032:	2a00      	cmp	r2, #0
 8001034:	d000      	beq.n	8001038 <HAL_RCC_OscConfig+0x244>
 8001036:	e719      	b.n	8000e6c <HAL_RCC_OscConfig+0x78>
 8001038:	e7d3      	b.n	8000fe2 <HAL_RCC_OscConfig+0x1ee>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800103a:	2380      	movs	r3, #128	; 0x80
 800103c:	4a36      	ldr	r2, [pc, #216]	; (8001118 <HAL_RCC_OscConfig+0x324>)
 800103e:	025b      	lsls	r3, r3, #9
 8001040:	6811      	ldr	r1, [r2, #0]
 8001042:	430b      	orrs	r3, r1
 8001044:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001046:	e700      	b.n	8000e4a <HAL_RCC_OscConfig+0x56>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001048:	6833      	ldr	r3, [r6, #0]
 800104a:	433b      	orrs	r3, r7
 800104c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800104e:	f7ff fd35 	bl	8000abc <HAL_GetTick>
 8001052:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001054:	e004      	b.n	8001060 <HAL_RCC_OscConfig+0x26c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001056:	f7ff fd31 	bl	8000abc <HAL_GetTick>
 800105a:	1b40      	subs	r0, r0, r5
 800105c:	2864      	cmp	r0, #100	; 0x64
 800105e:	d80f      	bhi.n	8001080 <HAL_RCC_OscConfig+0x28c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001060:	6833      	ldr	r3, [r6, #0]
 8001062:	423b      	tst	r3, r7
 8001064:	d0f7      	beq.n	8001056 <HAL_RCC_OscConfig+0x262>
 8001066:	e749      	b.n	8000efc <HAL_RCC_OscConfig+0x108>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001068:	25f8      	movs	r5, #248	; 0xf8
 800106a:	482b      	ldr	r0, [pc, #172]	; (8001118 <HAL_RCC_OscConfig+0x324>)
 800106c:	6922      	ldr	r2, [r4, #16]
 800106e:	6801      	ldr	r1, [r0, #0]
 8001070:	00d2      	lsls	r2, r2, #3
 8001072:	43a9      	bics	r1, r5
 8001074:	430a      	orrs	r2, r1
 8001076:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001078:	071a      	lsls	r2, r3, #28
 800107a:	d400      	bmi.n	800107e <HAL_RCC_OscConfig+0x28a>
 800107c:	e724      	b.n	8000ec8 <HAL_RCC_OscConfig+0xd4>
 800107e:	e751      	b.n	8000f24 <HAL_RCC_OscConfig+0x130>
            return HAL_TIMEOUT;
 8001080:	2003      	movs	r0, #3
 8001082:	e7af      	b.n	8000fe4 <HAL_RCC_OscConfig+0x1f0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001084:	4d24      	ldr	r5, [pc, #144]	; (8001118 <HAL_RCC_OscConfig+0x324>)
 8001086:	4a25      	ldr	r2, [pc, #148]	; (800111c <HAL_RCC_OscConfig+0x328>)
 8001088:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800108a:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800108c:	4013      	ands	r3, r2
 800108e:	602b      	str	r3, [r5, #0]
 8001090:	682b      	ldr	r3, [r5, #0]
 8001092:	4a23      	ldr	r2, [pc, #140]	; (8001120 <HAL_RCC_OscConfig+0x32c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001094:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001096:	4013      	ands	r3, r2
 8001098:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800109a:	f7ff fd0f 	bl	8000abc <HAL_GetTick>
 800109e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010a0:	e004      	b.n	80010ac <HAL_RCC_OscConfig+0x2b8>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010a2:	f7ff fd0b 	bl	8000abc <HAL_GetTick>
 80010a6:	1b80      	subs	r0, r0, r6
 80010a8:	2864      	cmp	r0, #100	; 0x64
 80010aa:	d8e9      	bhi.n	8001080 <HAL_RCC_OscConfig+0x28c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ac:	682b      	ldr	r3, [r5, #0]
 80010ae:	423b      	tst	r3, r7
 80010b0:	d1f7      	bne.n	80010a2 <HAL_RCC_OscConfig+0x2ae>
 80010b2:	6823      	ldr	r3, [r4, #0]
 80010b4:	e6da      	b.n	8000e6c <HAL_RCC_OscConfig+0x78>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010b6:	2201      	movs	r2, #1
 80010b8:	4e17      	ldr	r6, [pc, #92]	; (8001118 <HAL_RCC_OscConfig+0x324>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010ba:	4d1c      	ldr	r5, [pc, #112]	; (800112c <HAL_RCC_OscConfig+0x338>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010bc:	6a33      	ldr	r3, [r6, #32]
 80010be:	4393      	bics	r3, r2
 80010c0:	6233      	str	r3, [r6, #32]
 80010c2:	6a33      	ldr	r3, [r6, #32]
 80010c4:	3203      	adds	r2, #3
 80010c6:	4393      	bics	r3, r2
 80010c8:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 80010ca:	f7ff fcf7 	bl	8000abc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010ce:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 80010d0:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010d2:	4698      	mov	r8, r3
 80010d4:	e004      	b.n	80010e0 <HAL_RCC_OscConfig+0x2ec>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010d6:	f7ff fcf1 	bl	8000abc <HAL_GetTick>
 80010da:	1bc0      	subs	r0, r0, r7
 80010dc:	42a8      	cmp	r0, r5
 80010de:	d8cf      	bhi.n	8001080 <HAL_RCC_OscConfig+0x28c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010e0:	4642      	mov	r2, r8
 80010e2:	6a33      	ldr	r3, [r6, #32]
 80010e4:	421a      	tst	r2, r3
 80010e6:	d1f6      	bne.n	80010d6 <HAL_RCC_OscConfig+0x2e2>
    if(pwrclkchanged == SET)
 80010e8:	464b      	mov	r3, r9
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d04e      	beq.n	800118c <HAL_RCC_OscConfig+0x398>
 80010ee:	6823      	ldr	r3, [r4, #0]
 80010f0:	e731      	b.n	8000f56 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 80010f2:	2201      	movs	r2, #1
 80010f4:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010f6:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 80010f8:	4393      	bics	r3, r2
 80010fa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80010fc:	f7ff fcde 	bl	8000abc <HAL_GetTick>
 8001100:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001102:	e004      	b.n	800110e <HAL_RCC_OscConfig+0x31a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001104:	f7ff fcda 	bl	8000abc <HAL_GetTick>
 8001108:	1b80      	subs	r0, r0, r6
 800110a:	2802      	cmp	r0, #2
 800110c:	d8b8      	bhi.n	8001080 <HAL_RCC_OscConfig+0x28c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800110e:	682b      	ldr	r3, [r5, #0]
 8001110:	421f      	tst	r7, r3
 8001112:	d1f7      	bne.n	8001104 <HAL_RCC_OscConfig+0x310>
 8001114:	6823      	ldr	r3, [r4, #0]
 8001116:	e6d5      	b.n	8000ec4 <HAL_RCC_OscConfig+0xd0>
 8001118:	40021000 	.word	0x40021000
 800111c:	fffeffff 	.word	0xfffeffff
 8001120:	fffbffff 	.word	0xfffbffff
 8001124:	40007000 	.word	0x40007000
 8001128:	feffffff 	.word	0xfeffffff
 800112c:	00001388 	.word	0x00001388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001130:	495e      	ldr	r1, [pc, #376]	; (80012ac <HAL_RCC_OscConfig+0x4b8>)
 8001132:	6a0a      	ldr	r2, [r1, #32]
 8001134:	4313      	orrs	r3, r2
 8001136:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8001138:	f7ff fcc0 	bl	8000abc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800113c:	4b5b      	ldr	r3, [pc, #364]	; (80012ac <HAL_RCC_OscConfig+0x4b8>)
      tickstart = HAL_GetTick();
 800113e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001140:	4698      	mov	r8, r3
 8001142:	2702      	movs	r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001144:	4d5a      	ldr	r5, [pc, #360]	; (80012b0 <HAL_RCC_OscConfig+0x4bc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001146:	e004      	b.n	8001152 <HAL_RCC_OscConfig+0x35e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001148:	f7ff fcb8 	bl	8000abc <HAL_GetTick>
 800114c:	1b80      	subs	r0, r0, r6
 800114e:	42a8      	cmp	r0, r5
 8001150:	d896      	bhi.n	8001080 <HAL_RCC_OscConfig+0x28c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001152:	4643      	mov	r3, r8
 8001154:	6a1b      	ldr	r3, [r3, #32]
 8001156:	421f      	tst	r7, r3
 8001158:	d0f6      	beq.n	8001148 <HAL_RCC_OscConfig+0x354>
 800115a:	e7c5      	b.n	80010e8 <HAL_RCC_OscConfig+0x2f4>
      __HAL_RCC_HSI14ADC_DISABLE();
 800115c:	2204      	movs	r2, #4
 800115e:	4d53      	ldr	r5, [pc, #332]	; (80012ac <HAL_RCC_OscConfig+0x4b8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001160:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001162:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001164:	4313      	orrs	r3, r2
 8001166:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8001168:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800116a:	3a03      	subs	r2, #3
 800116c:	4393      	bics	r3, r2
 800116e:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001170:	f7ff fca4 	bl	8000abc <HAL_GetTick>
 8001174:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001176:	e005      	b.n	8001184 <HAL_RCC_OscConfig+0x390>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001178:	f7ff fca0 	bl	8000abc <HAL_GetTick>
 800117c:	1b80      	subs	r0, r0, r6
 800117e:	2802      	cmp	r0, #2
 8001180:	d900      	bls.n	8001184 <HAL_RCC_OscConfig+0x390>
 8001182:	e77d      	b.n	8001080 <HAL_RCC_OscConfig+0x28c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001184:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001186:	421f      	tst	r7, r3
 8001188:	d1f6      	bne.n	8001178 <HAL_RCC_OscConfig+0x384>
 800118a:	e6f9      	b.n	8000f80 <HAL_RCC_OscConfig+0x18c>
      __HAL_RCC_PWR_CLK_DISABLE();
 800118c:	4a47      	ldr	r2, [pc, #284]	; (80012ac <HAL_RCC_OscConfig+0x4b8>)
 800118e:	4949      	ldr	r1, [pc, #292]	; (80012b4 <HAL_RCC_OscConfig+0x4c0>)
 8001190:	69d3      	ldr	r3, [r2, #28]
 8001192:	400b      	ands	r3, r1
 8001194:	61d3      	str	r3, [r2, #28]
 8001196:	6823      	ldr	r3, [r4, #0]
 8001198:	e6dd      	b.n	8000f56 <HAL_RCC_OscConfig+0x162>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800119a:	2104      	movs	r1, #4
 800119c:	4b43      	ldr	r3, [pc, #268]	; (80012ac <HAL_RCC_OscConfig+0x4b8>)
 800119e:	6a1a      	ldr	r2, [r3, #32]
 80011a0:	430a      	orrs	r2, r1
 80011a2:	621a      	str	r2, [r3, #32]
 80011a4:	6a1a      	ldr	r2, [r3, #32]
 80011a6:	3903      	subs	r1, #3
 80011a8:	430a      	orrs	r2, r1
 80011aa:	621a      	str	r2, [r3, #32]
 80011ac:	e7c4      	b.n	8001138 <HAL_RCC_OscConfig+0x344>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d100      	bne.n	80011b4 <HAL_RCC_OscConfig+0x3c0>
 80011b2:	e716      	b.n	8000fe2 <HAL_RCC_OscConfig+0x1ee>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011b4:	23c0      	movs	r3, #192	; 0xc0
        pll_config  = RCC->CFGR;
 80011b6:	6872      	ldr	r2, [r6, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011b8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80011ba:	025b      	lsls	r3, r3, #9
        return HAL_ERROR;
 80011bc:	2001      	movs	r0, #1
        pll_config2 = RCC->CFGR2;
 80011be:	6af1      	ldr	r1, [r6, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011c0:	4013      	ands	r3, r2
 80011c2:	42ab      	cmp	r3, r5
 80011c4:	d000      	beq.n	80011c8 <HAL_RCC_OscConfig+0x3d4>
 80011c6:	e70d      	b.n	8000fe4 <HAL_RCC_OscConfig+0x1f0>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80011c8:	230f      	movs	r3, #15
 80011ca:	400b      	ands	r3, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011cc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80011ce:	428b      	cmp	r3, r1
 80011d0:	d000      	beq.n	80011d4 <HAL_RCC_OscConfig+0x3e0>
 80011d2:	e707      	b.n	8000fe4 <HAL_RCC_OscConfig+0x1f0>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80011d4:	20f0      	movs	r0, #240	; 0xf0
 80011d6:	0380      	lsls	r0, r0, #14
 80011d8:	4002      	ands	r2, r0
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80011da:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80011dc:	1a10      	subs	r0, r2, r0
 80011de:	1e42      	subs	r2, r0, #1
 80011e0:	4190      	sbcs	r0, r2
  return HAL_OK;
 80011e2:	b2c0      	uxtb	r0, r0
 80011e4:	e6fe      	b.n	8000fe4 <HAL_RCC_OscConfig+0x1f0>
      __HAL_RCC_HSI14ADC_DISABLE();
 80011e6:	2104      	movs	r1, #4
 80011e8:	4e30      	ldr	r6, [pc, #192]	; (80012ac <HAL_RCC_OscConfig+0x4b8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80011ea:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80011ec:	6b72      	ldr	r2, [r6, #52]	; 0x34
 80011ee:	430a      	orrs	r2, r1
 80011f0:	6372      	str	r2, [r6, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80011f2:	6b72      	ldr	r2, [r6, #52]	; 0x34
 80011f4:	4313      	orrs	r3, r2
 80011f6:	6373      	str	r3, [r6, #52]	; 0x34
      tickstart = HAL_GetTick();
 80011f8:	f7ff fc60 	bl	8000abc <HAL_GetTick>
 80011fc:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80011fe:	e005      	b.n	800120c <HAL_RCC_OscConfig+0x418>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001200:	f7ff fc5c 	bl	8000abc <HAL_GetTick>
 8001204:	1b40      	subs	r0, r0, r5
 8001206:	2802      	cmp	r0, #2
 8001208:	d900      	bls.n	800120c <HAL_RCC_OscConfig+0x418>
 800120a:	e739      	b.n	8001080 <HAL_RCC_OscConfig+0x28c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800120c:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800120e:	421f      	tst	r7, r3
 8001210:	d0f6      	beq.n	8001200 <HAL_RCC_OscConfig+0x40c>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001212:	21f8      	movs	r1, #248	; 0xf8
 8001214:	6b72      	ldr	r2, [r6, #52]	; 0x34
 8001216:	69a3      	ldr	r3, [r4, #24]
 8001218:	438a      	bics	r2, r1
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	4313      	orrs	r3, r2
 800121e:	6373      	str	r3, [r6, #52]	; 0x34
 8001220:	e6ae      	b.n	8000f80 <HAL_RCC_OscConfig+0x18c>
        __HAL_RCC_PLL_DISABLE();
 8001222:	6833      	ldr	r3, [r6, #0]
 8001224:	4a24      	ldr	r2, [pc, #144]	; (80012b8 <HAL_RCC_OscConfig+0x4c4>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001226:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001228:	4013      	ands	r3, r2
 800122a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800122c:	f7ff fc46 	bl	8000abc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001230:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8001232:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001234:	e005      	b.n	8001242 <HAL_RCC_OscConfig+0x44e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001236:	f7ff fc41 	bl	8000abc <HAL_GetTick>
 800123a:	1b40      	subs	r0, r0, r5
 800123c:	2802      	cmp	r0, #2
 800123e:	d900      	bls.n	8001242 <HAL_RCC_OscConfig+0x44e>
 8001240:	e71e      	b.n	8001080 <HAL_RCC_OscConfig+0x28c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001242:	6833      	ldr	r3, [r6, #0]
 8001244:	423b      	tst	r3, r7
 8001246:	d1f6      	bne.n	8001236 <HAL_RCC_OscConfig+0x442>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001248:	220f      	movs	r2, #15
 800124a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800124c:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800124e:	4393      	bics	r3, r2
 8001250:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001252:	04ad      	lsls	r5, r5, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001254:	4313      	orrs	r3, r2
 8001256:	62f3      	str	r3, [r6, #44]	; 0x2c
 8001258:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800125a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800125c:	6872      	ldr	r2, [r6, #4]
 800125e:	430b      	orrs	r3, r1
 8001260:	4916      	ldr	r1, [pc, #88]	; (80012bc <HAL_RCC_OscConfig+0x4c8>)
 8001262:	400a      	ands	r2, r1
 8001264:	4313      	orrs	r3, r2
 8001266:	6073      	str	r3, [r6, #4]
        __HAL_RCC_PLL_ENABLE();
 8001268:	2380      	movs	r3, #128	; 0x80
 800126a:	6832      	ldr	r2, [r6, #0]
 800126c:	045b      	lsls	r3, r3, #17
 800126e:	4313      	orrs	r3, r2
 8001270:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001272:	f7ff fc23 	bl	8000abc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001276:	4e0d      	ldr	r6, [pc, #52]	; (80012ac <HAL_RCC_OscConfig+0x4b8>)
        tickstart = HAL_GetTick();
 8001278:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800127a:	e005      	b.n	8001288 <HAL_RCC_OscConfig+0x494>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800127c:	f7ff fc1e 	bl	8000abc <HAL_GetTick>
 8001280:	1b00      	subs	r0, r0, r4
 8001282:	2802      	cmp	r0, #2
 8001284:	d900      	bls.n	8001288 <HAL_RCC_OscConfig+0x494>
 8001286:	e6fb      	b.n	8001080 <HAL_RCC_OscConfig+0x28c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001288:	6833      	ldr	r3, [r6, #0]
 800128a:	422b      	tst	r3, r5
 800128c:	d0f6      	beq.n	800127c <HAL_RCC_OscConfig+0x488>
  return HAL_OK;
 800128e:	2000      	movs	r0, #0
 8001290:	e6a8      	b.n	8000fe4 <HAL_RCC_OscConfig+0x1f0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	4b05      	ldr	r3, [pc, #20]	; (80012ac <HAL_RCC_OscConfig+0x4b8>)
 8001296:	02d2      	lsls	r2, r2, #11
 8001298:	6819      	ldr	r1, [r3, #0]
 800129a:	430a      	orrs	r2, r1
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	2280      	movs	r2, #128	; 0x80
 80012a0:	6819      	ldr	r1, [r3, #0]
 80012a2:	0252      	lsls	r2, r2, #9
 80012a4:	430a      	orrs	r2, r1
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	e5cf      	b.n	8000e4a <HAL_RCC_OscConfig+0x56>
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	40021000 	.word	0x40021000
 80012b0:	00001388 	.word	0x00001388
 80012b4:	efffffff 	.word	0xefffffff
 80012b8:	feffffff 	.word	0xfeffffff
 80012bc:	ffc27fff 	.word	0xffc27fff

080012c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012c2:	46ce      	mov	lr, r9
 80012c4:	4647      	mov	r7, r8
 80012c6:	b580      	push	{r7, lr}
 80012c8:	0004      	movs	r4, r0
 80012ca:	000d      	movs	r5, r1
 80012cc:	b089      	sub	sp, #36	; 0x24
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80012ce:	2800      	cmp	r0, #0
 80012d0:	d00d      	beq.n	80012ee <HAL_RCC_ClockConfig+0x2e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80012d2:	2301      	movs	r3, #1
 80012d4:	4953      	ldr	r1, [pc, #332]	; (8001424 <HAL_RCC_ClockConfig+0x164>)
 80012d6:	680a      	ldr	r2, [r1, #0]
 80012d8:	401a      	ands	r2, r3
 80012da:	42aa      	cmp	r2, r5
 80012dc:	d20d      	bcs.n	80012fa <HAL_RCC_ClockConfig+0x3a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012de:	680a      	ldr	r2, [r1, #0]
 80012e0:	439a      	bics	r2, r3
 80012e2:	432a      	orrs	r2, r5
 80012e4:	600a      	str	r2, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012e6:	680a      	ldr	r2, [r1, #0]
 80012e8:	4013      	ands	r3, r2
 80012ea:	42ab      	cmp	r3, r5
 80012ec:	d005      	beq.n	80012fa <HAL_RCC_ClockConfig+0x3a>
    return HAL_ERROR;
 80012ee:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 80012f0:	b009      	add	sp, #36	; 0x24
 80012f2:	bcc0      	pop	{r6, r7}
 80012f4:	46b9      	mov	r9, r7
 80012f6:	46b0      	mov	r8, r6
 80012f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012fa:	6823      	ldr	r3, [r4, #0]
 80012fc:	079a      	lsls	r2, r3, #30
 80012fe:	d50e      	bpl.n	800131e <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001300:	075a      	lsls	r2, r3, #29
 8001302:	d505      	bpl.n	8001310 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001304:	22e0      	movs	r2, #224	; 0xe0
 8001306:	4948      	ldr	r1, [pc, #288]	; (8001428 <HAL_RCC_ClockConfig+0x168>)
 8001308:	00d2      	lsls	r2, r2, #3
 800130a:	6848      	ldr	r0, [r1, #4]
 800130c:	4302      	orrs	r2, r0
 800130e:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001310:	20f0      	movs	r0, #240	; 0xf0
 8001312:	4945      	ldr	r1, [pc, #276]	; (8001428 <HAL_RCC_ClockConfig+0x168>)
 8001314:	684a      	ldr	r2, [r1, #4]
 8001316:	4382      	bics	r2, r0
 8001318:	68a0      	ldr	r0, [r4, #8]
 800131a:	4302      	orrs	r2, r0
 800131c:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800131e:	07db      	lsls	r3, r3, #31
 8001320:	d522      	bpl.n	8001368 <HAL_RCC_ClockConfig+0xa8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001322:	4b41      	ldr	r3, [pc, #260]	; (8001428 <HAL_RCC_ClockConfig+0x168>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001324:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001326:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001328:	2a01      	cmp	r2, #1
 800132a:	d071      	beq.n	8001410 <HAL_RCC_ClockConfig+0x150>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800132c:	2a02      	cmp	r2, #2
 800132e:	d06a      	beq.n	8001406 <HAL_RCC_ClockConfig+0x146>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001330:	079b      	lsls	r3, r3, #30
 8001332:	d5dc      	bpl.n	80012ee <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001334:	2103      	movs	r1, #3
 8001336:	4e3c      	ldr	r6, [pc, #240]	; (8001428 <HAL_RCC_ClockConfig+0x168>)
 8001338:	6873      	ldr	r3, [r6, #4]
 800133a:	438b      	bics	r3, r1
 800133c:	4313      	orrs	r3, r2
 800133e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001340:	f7ff fbbc 	bl	8000abc <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001344:	230c      	movs	r3, #12
 8001346:	4698      	mov	r8, r3
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001348:	4b38      	ldr	r3, [pc, #224]	; (800142c <HAL_RCC_ClockConfig+0x16c>)
    tickstart = HAL_GetTick();
 800134a:	0007      	movs	r7, r0
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800134c:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800134e:	e004      	b.n	800135a <HAL_RCC_ClockConfig+0x9a>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001350:	f7ff fbb4 	bl	8000abc <HAL_GetTick>
 8001354:	1bc0      	subs	r0, r0, r7
 8001356:	4548      	cmp	r0, r9
 8001358:	d85d      	bhi.n	8001416 <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800135a:	4643      	mov	r3, r8
 800135c:	6872      	ldr	r2, [r6, #4]
 800135e:	401a      	ands	r2, r3
 8001360:	6863      	ldr	r3, [r4, #4]
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	429a      	cmp	r2, r3
 8001366:	d1f3      	bne.n	8001350 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001368:	2101      	movs	r1, #1
 800136a:	4a2e      	ldr	r2, [pc, #184]	; (8001424 <HAL_RCC_ClockConfig+0x164>)
 800136c:	6813      	ldr	r3, [r2, #0]
 800136e:	400b      	ands	r3, r1
 8001370:	42ab      	cmp	r3, r5
 8001372:	d905      	bls.n	8001380 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001374:	6813      	ldr	r3, [r2, #0]
 8001376:	438b      	bics	r3, r1
 8001378:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800137a:	6813      	ldr	r3, [r2, #0]
 800137c:	4219      	tst	r1, r3
 800137e:	d1b6      	bne.n	80012ee <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001380:	6823      	ldr	r3, [r4, #0]
 8001382:	075b      	lsls	r3, r3, #29
 8001384:	d424      	bmi.n	80013d0 <HAL_RCC_ClockConfig+0x110>
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001386:	4669      	mov	r1, sp
 8001388:	000a      	movs	r2, r1
 800138a:	4b29      	ldr	r3, [pc, #164]	; (8001430 <HAL_RCC_ClockConfig+0x170>)
 800138c:	cb31      	ldmia	r3!, {r0, r4, r5}
 800138e:	c231      	stmia	r2!, {r0, r4, r5}
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	6013      	str	r3, [r2, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001394:	aa04      	add	r2, sp, #16
 8001396:	0010      	movs	r0, r2
 8001398:	4b26      	ldr	r3, [pc, #152]	; (8001434 <HAL_RCC_ClockConfig+0x174>)
 800139a:	cb70      	ldmia	r3!, {r4, r5, r6}
 800139c:	c070      	stmia	r0!, {r4, r5, r6}
 800139e:	681b      	ldr	r3, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80013a0:	4d21      	ldr	r5, [pc, #132]	; (8001428 <HAL_RCC_ClockConfig+0x168>)
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80013a2:	6003      	str	r3, [r0, #0]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013a4:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 80013a6:	6868      	ldr	r0, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80013a8:	4003      	ands	r3, r0
 80013aa:	2b04      	cmp	r3, #4
 80013ac:	d02e      	beq.n	800140c <HAL_RCC_ClockConfig+0x14c>
 80013ae:	2b08      	cmp	r3, #8
 80013b0:	d016      	beq.n	80013e0 <HAL_RCC_ClockConfig+0x120>
 80013b2:	4821      	ldr	r0, [pc, #132]	; (8001438 <HAL_RCC_ClockConfig+0x178>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80013b4:	4b1c      	ldr	r3, [pc, #112]	; (8001428 <HAL_RCC_ClockConfig+0x168>)
 80013b6:	4a21      	ldr	r2, [pc, #132]	; (800143c <HAL_RCC_ClockConfig+0x17c>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	061b      	lsls	r3, r3, #24
 80013bc:	0f1b      	lsrs	r3, r3, #28
 80013be:	5cd3      	ldrb	r3, [r2, r3]
 80013c0:	40d8      	lsrs	r0, r3
 80013c2:	4b1f      	ldr	r3, [pc, #124]	; (8001440 <HAL_RCC_ClockConfig+0x180>)
 80013c4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80013c6:	2003      	movs	r0, #3
 80013c8:	f7ff fb36 	bl	8000a38 <HAL_InitTick>
  return HAL_OK;
 80013cc:	2000      	movs	r0, #0
 80013ce:	e78f      	b.n	80012f0 <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80013d0:	4a15      	ldr	r2, [pc, #84]	; (8001428 <HAL_RCC_ClockConfig+0x168>)
 80013d2:	491c      	ldr	r1, [pc, #112]	; (8001444 <HAL_RCC_ClockConfig+0x184>)
 80013d4:	6853      	ldr	r3, [r2, #4]
 80013d6:	400b      	ands	r3, r1
 80013d8:	68e1      	ldr	r1, [r4, #12]
 80013da:	430b      	orrs	r3, r1
 80013dc:	6053      	str	r3, [r2, #4]
 80013de:	e7d2      	b.n	8001386 <HAL_RCC_ClockConfig+0xc6>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80013e0:	0c84      	lsrs	r4, r0, #18
 80013e2:	3307      	adds	r3, #7
 80013e4:	401c      	ands	r4, r3
 80013e6:	5d0c      	ldrb	r4, [r1, r4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80013e8:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80013ea:	400b      	ands	r3, r1
 80013ec:	5cd1      	ldrb	r1, [r2, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80013ee:	23c0      	movs	r3, #192	; 0xc0
 80013f0:	025b      	lsls	r3, r3, #9
 80013f2:	4018      	ands	r0, r3
 80013f4:	2380      	movs	r3, #128	; 0x80
 80013f6:	025b      	lsls	r3, r3, #9
 80013f8:	4298      	cmp	r0, r3
 80013fa:	d00e      	beq.n	800141a <HAL_RCC_ClockConfig+0x15a>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80013fc:	480e      	ldr	r0, [pc, #56]	; (8001438 <HAL_RCC_ClockConfig+0x178>)
 80013fe:	f7fe fe8d 	bl	800011c <__udivsi3>
 8001402:	4360      	muls	r0, r4
 8001404:	e7d6      	b.n	80013b4 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001406:	019b      	lsls	r3, r3, #6
 8001408:	d494      	bmi.n	8001334 <HAL_RCC_ClockConfig+0x74>
 800140a:	e770      	b.n	80012ee <HAL_RCC_ClockConfig+0x2e>
      sysclockfreq = HSE_VALUE;
 800140c:	480e      	ldr	r0, [pc, #56]	; (8001448 <HAL_RCC_ClockConfig+0x188>)
 800140e:	e7d1      	b.n	80013b4 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001410:	039b      	lsls	r3, r3, #14
 8001412:	d48f      	bmi.n	8001334 <HAL_RCC_ClockConfig+0x74>
 8001414:	e76b      	b.n	80012ee <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8001416:	2003      	movs	r0, #3
 8001418:	e76a      	b.n	80012f0 <HAL_RCC_ClockConfig+0x30>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800141a:	480b      	ldr	r0, [pc, #44]	; (8001448 <HAL_RCC_ClockConfig+0x188>)
 800141c:	f7fe fe7e 	bl	800011c <__udivsi3>
 8001420:	4360      	muls	r0, r4
 8001422:	e7c7      	b.n	80013b4 <HAL_RCC_ClockConfig+0xf4>
 8001424:	40022000 	.word	0x40022000
 8001428:	40021000 	.word	0x40021000
 800142c:	00001388 	.word	0x00001388
 8001430:	080033e4 	.word	0x080033e4
 8001434:	080033f8 	.word	0x080033f8
 8001438:	007a1200 	.word	0x007a1200
 800143c:	080033cc 	.word	0x080033cc
 8001440:	20000000 	.word	0x20000000
 8001444:	fffff8ff 	.word	0xfffff8ff
 8001448:	00b71b00 	.word	0x00b71b00

0800144c <HAL_RCC_GetSysClockFreq>:
{
 800144c:	b570      	push	{r4, r5, r6, lr}
 800144e:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001450:	4669      	mov	r1, sp
 8001452:	000a      	movs	r2, r1
 8001454:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <HAL_RCC_GetSysClockFreq+0x6c>)
 8001456:	cb31      	ldmia	r3!, {r0, r4, r5}
 8001458:	c231      	stmia	r2!, {r0, r4, r5}
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6013      	str	r3, [r2, #0]
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800145e:	aa04      	add	r2, sp, #16
 8001460:	0010      	movs	r0, r2
 8001462:	4b16      	ldr	r3, [pc, #88]	; (80014bc <HAL_RCC_GetSysClockFreq+0x70>)
 8001464:	cb70      	ldmia	r3!, {r4, r5, r6}
 8001466:	c070      	stmia	r0!, {r4, r5, r6}
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	6003      	str	r3, [r0, #0]
  switch (tmpreg & RCC_CFGR_SWS)
 800146c:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 800146e:	4814      	ldr	r0, [pc, #80]	; (80014c0 <HAL_RCC_GetSysClockFreq+0x74>)
 8001470:	6844      	ldr	r4, [r0, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001472:	4023      	ands	r3, r4
 8001474:	2b04      	cmp	r3, #4
 8001476:	d017      	beq.n	80014a8 <HAL_RCC_GetSysClockFreq+0x5c>
 8001478:	2b08      	cmp	r3, #8
 800147a:	d112      	bne.n	80014a2 <HAL_RCC_GetSysClockFreq+0x56>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800147c:	0ca5      	lsrs	r5, r4, #18
 800147e:	3307      	adds	r3, #7
 8001480:	401d      	ands	r5, r3
 8001482:	5d4d      	ldrb	r5, [r1, r5]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001484:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001486:	400b      	ands	r3, r1
 8001488:	5cd1      	ldrb	r1, [r2, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800148a:	23c0      	movs	r3, #192	; 0xc0
 800148c:	025b      	lsls	r3, r3, #9
 800148e:	401c      	ands	r4, r3
 8001490:	2380      	movs	r3, #128	; 0x80
 8001492:	025b      	lsls	r3, r3, #9
 8001494:	429c      	cmp	r4, r3
 8001496:	d009      	beq.n	80014ac <HAL_RCC_GetSysClockFreq+0x60>
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001498:	480a      	ldr	r0, [pc, #40]	; (80014c4 <HAL_RCC_GetSysClockFreq+0x78>)
 800149a:	f7fe fe3f 	bl	800011c <__udivsi3>
 800149e:	4368      	muls	r0, r5
 80014a0:	e000      	b.n	80014a4 <HAL_RCC_GetSysClockFreq+0x58>
  switch (tmpreg & RCC_CFGR_SWS)
 80014a2:	4808      	ldr	r0, [pc, #32]	; (80014c4 <HAL_RCC_GetSysClockFreq+0x78>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80014a4:	b008      	add	sp, #32
 80014a6:	bd70      	pop	{r4, r5, r6, pc}
      sysclockfreq = HSE_VALUE;
 80014a8:	4807      	ldr	r0, [pc, #28]	; (80014c8 <HAL_RCC_GetSysClockFreq+0x7c>)
 80014aa:	e7fb      	b.n	80014a4 <HAL_RCC_GetSysClockFreq+0x58>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80014ac:	4806      	ldr	r0, [pc, #24]	; (80014c8 <HAL_RCC_GetSysClockFreq+0x7c>)
 80014ae:	f7fe fe35 	bl	800011c <__udivsi3>
 80014b2:	4368      	muls	r0, r5
 80014b4:	e7f6      	b.n	80014a4 <HAL_RCC_GetSysClockFreq+0x58>
 80014b6:	46c0      	nop			; (mov r8, r8)
 80014b8:	080033e4 	.word	0x080033e4
 80014bc:	080033f8 	.word	0x080033f8
 80014c0:	40021000 	.word	0x40021000
 80014c4:	007a1200 	.word	0x007a1200
 80014c8:	00b71b00 	.word	0x00b71b00

080014cc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80014cc:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <HAL_RCC_GetPCLK1Freq+0x14>)
 80014ce:	4a05      	ldr	r2, [pc, #20]	; (80014e4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	055b      	lsls	r3, r3, #21
 80014d4:	0f5b      	lsrs	r3, r3, #29
 80014d6:	5cd3      	ldrb	r3, [r2, r3]
 80014d8:	4a03      	ldr	r2, [pc, #12]	; (80014e8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80014da:	6810      	ldr	r0, [r2, #0]
 80014dc:	40d8      	lsrs	r0, r3
}    
 80014de:	4770      	bx	lr
 80014e0:	40021000 	.word	0x40021000
 80014e4:	080033dc 	.word	0x080033dc
 80014e8:	20000000 	.word	0x20000000

080014ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80014ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ee:	46ce      	mov	lr, r9
 80014f0:	4647      	mov	r7, r8
 80014f2:	b580      	push	{r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80014f4:	6803      	ldr	r3, [r0, #0]
{
 80014f6:	0004      	movs	r4, r0
 80014f8:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80014fa:	03da      	lsls	r2, r3, #15
 80014fc:	d532      	bpl.n	8001564 <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014fe:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001500:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001502:	4b44      	ldr	r3, [pc, #272]	; (8001614 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8001504:	0552      	lsls	r2, r2, #21
 8001506:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001508:	4680      	mov	r8, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800150a:	4211      	tst	r1, r2
 800150c:	d04b      	beq.n	80015a6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800150e:	2680      	movs	r6, #128	; 0x80
 8001510:	4d41      	ldr	r5, [pc, #260]	; (8001618 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8001512:	0076      	lsls	r6, r6, #1
 8001514:	682b      	ldr	r3, [r5, #0]
 8001516:	4233      	tst	r3, r6
 8001518:	d054      	beq.n	80015c4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800151a:	4d3e      	ldr	r5, [pc, #248]	; (8001614 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 800151c:	22c0      	movs	r2, #192	; 0xc0
 800151e:	6a2b      	ldr	r3, [r5, #32]
 8001520:	0092      	lsls	r2, r2, #2
 8001522:	0018      	movs	r0, r3
 8001524:	4010      	ands	r0, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001526:	4213      	tst	r3, r2
 8001528:	d06b      	beq.n	8001602 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800152a:	6861      	ldr	r1, [r4, #4]
 800152c:	400a      	ands	r2, r1
 800152e:	4282      	cmp	r2, r0
 8001530:	d00e      	beq.n	8001550 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001532:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001534:	6a28      	ldr	r0, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001536:	6a2e      	ldr	r6, [r5, #32]
 8001538:	0252      	lsls	r2, r2, #9
 800153a:	4332      	orrs	r2, r6
 800153c:	622a      	str	r2, [r5, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800153e:	6a2a      	ldr	r2, [r5, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001540:	4b36      	ldr	r3, [pc, #216]	; (800161c <HAL_RCCEx_PeriphCLKConfig+0x130>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001542:	4e37      	ldr	r6, [pc, #220]	; (8001620 <HAL_RCCEx_PeriphCLKConfig+0x134>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001544:	4003      	ands	r3, r0
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001546:	4032      	ands	r2, r6
 8001548:	622a      	str	r2, [r5, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800154a:	622b      	str	r3, [r5, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800154c:	07c3      	lsls	r3, r0, #31
 800154e:	d449      	bmi.n	80015e4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001550:	4a30      	ldr	r2, [pc, #192]	; (8001614 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8001552:	4832      	ldr	r0, [pc, #200]	; (800161c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001554:	6a13      	ldr	r3, [r2, #32]
 8001556:	4003      	ands	r3, r0
 8001558:	430b      	orrs	r3, r1
 800155a:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800155c:	4643      	mov	r3, r8
 800155e:	2b01      	cmp	r3, #1
 8001560:	d051      	beq.n	8001606 <HAL_RCCEx_PeriphCLKConfig+0x11a>
 8001562:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001564:	07da      	lsls	r2, r3, #31
 8001566:	d506      	bpl.n	8001576 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001568:	2003      	movs	r0, #3
 800156a:	492a      	ldr	r1, [pc, #168]	; (8001614 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 800156c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800156e:	4382      	bics	r2, r0
 8001570:	68a0      	ldr	r0, [r4, #8]
 8001572:	4302      	orrs	r2, r0
 8001574:	630a      	str	r2, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001576:	069a      	lsls	r2, r3, #26
 8001578:	d506      	bpl.n	8001588 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800157a:	2010      	movs	r0, #16
 800157c:	4925      	ldr	r1, [pc, #148]	; (8001614 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 800157e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8001580:	4382      	bics	r2, r0
 8001582:	68e0      	ldr	r0, [r4, #12]
 8001584:	4302      	orrs	r2, r0
 8001586:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001588:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800158a:	039b      	lsls	r3, r3, #14
 800158c:	d506      	bpl.n	800159c <HAL_RCCEx_PeriphCLKConfig+0xb0>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800158e:	2180      	movs	r1, #128	; 0x80
 8001590:	4a20      	ldr	r2, [pc, #128]	; (8001614 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8001592:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001594:	438b      	bics	r3, r1
 8001596:	6921      	ldr	r1, [r4, #16]
 8001598:	430b      	orrs	r3, r1
 800159a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800159c:	b003      	add	sp, #12
 800159e:	bcc0      	pop	{r6, r7}
 80015a0:	46b9      	mov	r9, r7
 80015a2:	46b0      	mov	r8, r6
 80015a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80015a6:	69d9      	ldr	r1, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a8:	2680      	movs	r6, #128	; 0x80
    __HAL_RCC_PWR_CLK_ENABLE();
 80015aa:	4311      	orrs	r1, r2
 80015ac:	61d9      	str	r1, [r3, #28]
 80015ae:	69db      	ldr	r3, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b0:	4d19      	ldr	r5, [pc, #100]	; (8001618 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80015b2:	401a      	ands	r2, r3
 80015b4:	9201      	str	r2, [sp, #4]
 80015b6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80015b8:	2301      	movs	r3, #1
 80015ba:	4698      	mov	r8, r3
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015bc:	682b      	ldr	r3, [r5, #0]
 80015be:	0076      	lsls	r6, r6, #1
 80015c0:	4233      	tst	r3, r6
 80015c2:	d1aa      	bne.n	800151a <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015c4:	682b      	ldr	r3, [r5, #0]
 80015c6:	4333      	orrs	r3, r6
 80015c8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80015ca:	f7ff fa77 	bl	8000abc <HAL_GetTick>
 80015ce:	0007      	movs	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d0:	682b      	ldr	r3, [r5, #0]
 80015d2:	4233      	tst	r3, r6
 80015d4:	d1a1      	bne.n	800151a <HAL_RCCEx_PeriphCLKConfig+0x2e>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015d6:	f7ff fa71 	bl	8000abc <HAL_GetTick>
 80015da:	1bc0      	subs	r0, r0, r7
 80015dc:	2864      	cmp	r0, #100	; 0x64
 80015de:	d9f7      	bls.n	80015d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
          return HAL_TIMEOUT;
 80015e0:	2003      	movs	r0, #3
 80015e2:	e7db      	b.n	800159c <HAL_RCCEx_PeriphCLKConfig+0xb0>
        tickstart = HAL_GetTick();
 80015e4:	f7ff fa6a 	bl	8000abc <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015e8:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <HAL_RCCEx_PeriphCLKConfig+0x138>)
        tickstart = HAL_GetTick();
 80015ea:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ec:	2702      	movs	r7, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ee:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f0:	e004      	b.n	80015fc <HAL_RCCEx_PeriphCLKConfig+0x110>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015f2:	f7ff fa63 	bl	8000abc <HAL_GetTick>
 80015f6:	1b80      	subs	r0, r0, r6
 80015f8:	4548      	cmp	r0, r9
 80015fa:	d8f1      	bhi.n	80015e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015fc:	6a2b      	ldr	r3, [r5, #32]
 80015fe:	421f      	tst	r7, r3
 8001600:	d0f7      	beq.n	80015f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001602:	6861      	ldr	r1, [r4, #4]
 8001604:	e7a4      	b.n	8001550 <HAL_RCCEx_PeriphCLKConfig+0x64>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001606:	69d3      	ldr	r3, [r2, #28]
 8001608:	4907      	ldr	r1, [pc, #28]	; (8001628 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800160a:	400b      	ands	r3, r1
 800160c:	61d3      	str	r3, [r2, #28]
 800160e:	6823      	ldr	r3, [r4, #0]
 8001610:	e7a8      	b.n	8001564 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8001612:	46c0      	nop			; (mov r8, r8)
 8001614:	40021000 	.word	0x40021000
 8001618:	40007000 	.word	0x40007000
 800161c:	fffffcff 	.word	0xfffffcff
 8001620:	fffeffff 	.word	0xfffeffff
 8001624:	00001388 	.word	0x00001388
 8001628:	efffffff 	.word	0xefffffff

0800162c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800162c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800162e:	46d6      	mov	lr, sl
 8001630:	464f      	mov	r7, r9
 8001632:	4646      	mov	r6, r8
 8001634:	0004      	movs	r4, r0
 8001636:	b5c0      	push	{r6, r7, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001638:	2800      	cmp	r0, #0
 800163a:	d100      	bne.n	800163e <HAL_SPI_Init+0x12>
 800163c:	e08e      	b.n	800175c <HAL_SPI_Init+0x130>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800163e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8001640:	2d00      	cmp	r5, #0
 8001642:	d065      	beq.n	8001710 <HAL_SPI_Init+0xe4>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001644:	2300      	movs	r3, #0
 8001646:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001648:	6143      	str	r3, [r0, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800164a:	2300      	movs	r3, #0
 800164c:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800164e:	335d      	adds	r3, #93	; 0x5d
 8001650:	5ce3      	ldrb	r3, [r4, r3]
 8001652:	b2da      	uxtb	r2, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	d068      	beq.n	800172a <HAL_SPI_Init+0xfe>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001658:	235d      	movs	r3, #93	; 0x5d
 800165a:	2202      	movs	r2, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800165c:	2140      	movs	r1, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 800165e:	54e2      	strb	r2, [r4, r3]
  __HAL_SPI_DISABLE(hspi);
 8001660:	6822      	ldr	r2, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001662:	68e0      	ldr	r0, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8001664:	6813      	ldr	r3, [r2, #0]
 8001666:	438b      	bics	r3, r1
 8001668:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800166a:	23e0      	movs	r3, #224	; 0xe0
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	4298      	cmp	r0, r3
 8001670:	d962      	bls.n	8001738 <HAL_SPI_Init+0x10c>
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001672:	23f0      	movs	r3, #240	; 0xf0
 8001674:	011b      	lsls	r3, r3, #4
 8001676:	4298      	cmp	r0, r3
 8001678:	d000      	beq.n	800167c <HAL_SPI_Init+0x50>
 800167a:	e071      	b.n	8001760 <HAL_SPI_Init+0x134>
 800167c:	2380      	movs	r3, #128	; 0x80
 800167e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001680:	019b      	lsls	r3, r3, #6
 8001682:	4019      	ands	r1, r3
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001684:	2300      	movs	r3, #0
 8001686:	468c      	mov	ip, r1
 8001688:	469a      	mov	sl, r3
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800168a:	2382      	movs	r3, #130	; 0x82
 800168c:	6866      	ldr	r6, [r4, #4]
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	4033      	ands	r3, r6
 8001692:	2684      	movs	r6, #132	; 0x84
 8001694:	68a7      	ldr	r7, [r4, #8]
 8001696:	0236      	lsls	r6, r6, #8
 8001698:	403e      	ands	r6, r7
 800169a:	4333      	orrs	r3, r6
 800169c:	2602      	movs	r6, #2
 800169e:	6927      	ldr	r7, [r4, #16]
 80016a0:	69a1      	ldr	r1, [r4, #24]
 80016a2:	403e      	ands	r6, r7
 80016a4:	4333      	orrs	r3, r6
 80016a6:	2601      	movs	r6, #1
 80016a8:	6967      	ldr	r7, [r4, #20]
 80016aa:	46b1      	mov	r9, r6
 80016ac:	4037      	ands	r7, r6
 80016ae:	433b      	orrs	r3, r7
 80016b0:	2780      	movs	r7, #128	; 0x80
 80016b2:	00bf      	lsls	r7, r7, #2
 80016b4:	400f      	ands	r7, r1
 80016b6:	433b      	orrs	r3, r7
 80016b8:	2738      	movs	r7, #56	; 0x38
 80016ba:	69e6      	ldr	r6, [r4, #28]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80016bc:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80016be:	4037      	ands	r7, r6
 80016c0:	2680      	movs	r6, #128	; 0x80
 80016c2:	433b      	orrs	r3, r7
 80016c4:	0037      	movs	r7, r6
 80016c6:	6a26      	ldr	r6, [r4, #32]
 80016c8:	4037      	ands	r7, r6
 80016ca:	4666      	mov	r6, ip
 80016cc:	433b      	orrs	r3, r7
 80016ce:	4333      	orrs	r3, r6
 80016d0:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80016d2:	2308      	movs	r3, #8
 80016d4:	6b66      	ldr	r6, [r4, #52]	; 0x34
 80016d6:	4657      	mov	r7, sl
 80016d8:	4033      	ands	r3, r6
 80016da:	26f0      	movs	r6, #240	; 0xf0
 80016dc:	0136      	lsls	r6, r6, #4
 80016de:	4030      	ands	r0, r6
 80016e0:	4318      	orrs	r0, r3
 80016e2:	2304      	movs	r3, #4
 80016e4:	4019      	ands	r1, r3
 80016e6:	4301      	orrs	r1, r0
 80016e8:	2010      	movs	r0, #16
 80016ea:	4005      	ands	r5, r0
 80016ec:	430d      	orrs	r5, r1
 80016ee:	432f      	orrs	r7, r5
 80016f0:	6057      	str	r7, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80016f2:	69d3      	ldr	r3, [r2, #28]
 80016f4:	491c      	ldr	r1, [pc, #112]	; (8001768 <HAL_SPI_Init+0x13c>)
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;

  return HAL_OK;
 80016f6:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80016f8:	400b      	ands	r3, r1
 80016fa:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80016fc:	2300      	movs	r3, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80016fe:	464a      	mov	r2, r9
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001700:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001702:	335d      	adds	r3, #93	; 0x5d
 8001704:	54e2      	strb	r2, [r4, r3]
}
 8001706:	bce0      	pop	{r5, r6, r7}
 8001708:	46ba      	mov	sl, r7
 800170a:	46b1      	mov	r9, r6
 800170c:	46a8      	mov	r8, r5
 800170e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001710:	2382      	movs	r3, #130	; 0x82
 8001712:	6842      	ldr	r2, [r0, #4]
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	429a      	cmp	r2, r3
 8001718:	d097      	beq.n	800164a <HAL_SPI_Init+0x1e>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800171a:	2300      	movs	r3, #0
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800171c:	61c5      	str	r5, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800171e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001720:	335d      	adds	r3, #93	; 0x5d
 8001722:	5ce3      	ldrb	r3, [r4, r3]
 8001724:	b2da      	uxtb	r2, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	d196      	bne.n	8001658 <HAL_SPI_Init+0x2c>
    hspi->Lock = HAL_UNLOCKED;
 800172a:	335c      	adds	r3, #92	; 0x5c
    HAL_SPI_MspInit(hspi);
 800172c:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800172e:	54e2      	strb	r2, [r4, r3]
    HAL_SPI_MspInit(hspi);
 8001730:	f7fe ff68 	bl	8000604 <HAL_SPI_MspInit>
 8001734:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001736:	e78f      	b.n	8001658 <HAL_SPI_Init+0x2c>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001738:	4298      	cmp	r0, r3
 800173a:	d006      	beq.n	800174a <HAL_SPI_Init+0x11e>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800173c:	2380      	movs	r3, #128	; 0x80
 800173e:	015b      	lsls	r3, r3, #5
 8001740:	469a      	mov	sl, r3
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001742:	2300      	movs	r3, #0
 8001744:	469c      	mov	ip, r3
 8001746:	62a3      	str	r3, [r4, #40]	; 0x28
 8001748:	e79f      	b.n	800168a <HAL_SPI_Init+0x5e>
 800174a:	2380      	movs	r3, #128	; 0x80
 800174c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800174e:	019b      	lsls	r3, r3, #6
 8001750:	4019      	ands	r1, r3
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001752:	2380      	movs	r3, #128	; 0x80
 8001754:	015b      	lsls	r3, r3, #5
 8001756:	468c      	mov	ip, r1
 8001758:	469a      	mov	sl, r3
 800175a:	e796      	b.n	800168a <HAL_SPI_Init+0x5e>
    return HAL_ERROR;
 800175c:	2001      	movs	r0, #1
 800175e:	e7d2      	b.n	8001706 <HAL_SPI_Init+0xda>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001760:	2300      	movs	r3, #0
 8001762:	469a      	mov	sl, r3
 8001764:	e7ed      	b.n	8001742 <HAL_SPI_Init+0x116>
 8001766:	46c0      	nop			; (mov r8, r8)
 8001768:	fffff7ff 	.word	0xfffff7ff

0800176c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800176c:	b510      	push	{r4, lr}
 800176e:	1e04      	subs	r4, r0, #0
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001770:	d05b      	beq.n	800182a <HAL_TIM_Base_Init+0xbe>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001772:	233d      	movs	r3, #61	; 0x3d
 8001774:	5cc3      	ldrb	r3, [r0, r3]
 8001776:	b2da      	uxtb	r2, r3
 8001778:	2b00      	cmp	r3, #0
 800177a:	d048      	beq.n	800180e <HAL_TIM_Base_Init+0xa2>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800177c:	233d      	movs	r3, #61	; 0x3d
 800177e:	2202      	movs	r2, #2
 8001780:	54e2      	strb	r2, [r4, r3]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001782:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001784:	492a      	ldr	r1, [pc, #168]	; (8001830 <HAL_TIM_Base_Init+0xc4>)
  tmpcr1 = TIMx->CR1;
 8001786:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001788:	428a      	cmp	r2, r1
 800178a:	d015      	beq.n	80017b8 <HAL_TIM_Base_Init+0x4c>
 800178c:	4929      	ldr	r1, [pc, #164]	; (8001834 <HAL_TIM_Base_Init+0xc8>)
 800178e:	428a      	cmp	r2, r1
 8001790:	d042      	beq.n	8001818 <HAL_TIM_Base_Init+0xac>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001792:	4929      	ldr	r1, [pc, #164]	; (8001838 <HAL_TIM_Base_Init+0xcc>)
 8001794:	428a      	cmp	r2, r1
 8001796:	d043      	beq.n	8001820 <HAL_TIM_Base_Init+0xb4>
 8001798:	4928      	ldr	r1, [pc, #160]	; (800183c <HAL_TIM_Base_Init+0xd0>)
 800179a:	428a      	cmp	r2, r1
 800179c:	d010      	beq.n	80017c0 <HAL_TIM_Base_Init+0x54>
 800179e:	4928      	ldr	r1, [pc, #160]	; (8001840 <HAL_TIM_Base_Init+0xd4>)
 80017a0:	428a      	cmp	r2, r1
 80017a2:	d00d      	beq.n	80017c0 <HAL_TIM_Base_Init+0x54>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017a4:	2180      	movs	r1, #128	; 0x80
 80017a6:	438b      	bics	r3, r1
 80017a8:	69a1      	ldr	r1, [r4, #24]
 80017aa:	430b      	orrs	r3, r1

  TIMx->CR1 = tmpcr1;
 80017ac:	6013      	str	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017ae:	68e3      	ldr	r3, [r4, #12]
 80017b0:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80017b2:	6863      	ldr	r3, [r4, #4]
 80017b4:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80017b6:	e012      	b.n	80017de <HAL_TIM_Base_Init+0x72>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017b8:	2170      	movs	r1, #112	; 0x70
 80017ba:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 80017bc:	68a1      	ldr	r1, [r4, #8]
 80017be:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80017c0:	4920      	ldr	r1, [pc, #128]	; (8001844 <HAL_TIM_Base_Init+0xd8>)
 80017c2:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017c4:	6921      	ldr	r1, [r4, #16]
 80017c6:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017c8:	2180      	movs	r1, #128	; 0x80
 80017ca:	438b      	bics	r3, r1
 80017cc:	69a1      	ldr	r1, [r4, #24]
 80017ce:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80017d0:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017d2:	68e3      	ldr	r3, [r4, #12]
 80017d4:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80017d6:	6863      	ldr	r3, [r4, #4]
 80017d8:	6293      	str	r3, [r2, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80017da:	6963      	ldr	r3, [r4, #20]
 80017dc:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80017de:	2301      	movs	r3, #1
 80017e0:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017e2:	2246      	movs	r2, #70	; 0x46
  return HAL_OK;
 80017e4:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017e6:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017e8:	3a08      	subs	r2, #8
 80017ea:	54a3      	strb	r3, [r4, r2]
 80017ec:	3201      	adds	r2, #1
 80017ee:	54a3      	strb	r3, [r4, r2]
 80017f0:	3201      	adds	r2, #1
 80017f2:	54a3      	strb	r3, [r4, r2]
 80017f4:	3201      	adds	r2, #1
 80017f6:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017f8:	3201      	adds	r2, #1
 80017fa:	54a3      	strb	r3, [r4, r2]
 80017fc:	3201      	adds	r2, #1
 80017fe:	54a3      	strb	r3, [r4, r2]
 8001800:	3201      	adds	r2, #1
 8001802:	54a3      	strb	r3, [r4, r2]
 8001804:	3201      	adds	r2, #1
 8001806:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8001808:	3a08      	subs	r2, #8
 800180a:	54a3      	strb	r3, [r4, r2]
}
 800180c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800180e:	333c      	adds	r3, #60	; 0x3c
 8001810:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8001812:	f7fe ff2d 	bl	8000670 <HAL_TIM_Base_MspInit>
 8001816:	e7b1      	b.n	800177c <HAL_TIM_Base_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001818:	2170      	movs	r1, #112	; 0x70
 800181a:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 800181c:	68a1      	ldr	r1, [r4, #8]
 800181e:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8001820:	4908      	ldr	r1, [pc, #32]	; (8001844 <HAL_TIM_Base_Init+0xd8>)
 8001822:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001824:	6921      	ldr	r1, [r4, #16]
 8001826:	430b      	orrs	r3, r1
 8001828:	e7bc      	b.n	80017a4 <HAL_TIM_Base_Init+0x38>
    return HAL_ERROR;
 800182a:	2001      	movs	r0, #1
 800182c:	e7ee      	b.n	800180c <HAL_TIM_Base_Init+0xa0>
 800182e:	46c0      	nop			; (mov r8, r8)
 8001830:	40012c00 	.word	0x40012c00
 8001834:	40000400 	.word	0x40000400
 8001838:	40002000 	.word	0x40002000
 800183c:	40014400 	.word	0x40014400
 8001840:	40014800 	.word	0x40014800
 8001844:	fffffcff 	.word	0xfffffcff

08001848 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8001848:	223d      	movs	r2, #61	; 0x3d
 800184a:	5c81      	ldrb	r1, [r0, r2]
{
 800184c:	0003      	movs	r3, r0
    return HAL_ERROR;
 800184e:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8001850:	2901      	cmp	r1, #1
 8001852:	d10f      	bne.n	8001874 <HAL_TIM_Base_Start_IT+0x2c>
  htim->State = HAL_TIM_STATE_BUSY;
 8001854:	3101      	adds	r1, #1
 8001856:	5499      	strb	r1, [r3, r2]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	68da      	ldr	r2, [r3, #12]
 800185c:	4302      	orrs	r2, r0
 800185e:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001860:	4a0b      	ldr	r2, [pc, #44]	; (8001890 <HAL_TIM_Base_Start_IT+0x48>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d007      	beq.n	8001876 <HAL_TIM_Base_Start_IT+0x2e>
 8001866:	4a0b      	ldr	r2, [pc, #44]	; (8001894 <HAL_TIM_Base_Start_IT+0x4c>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d004      	beq.n	8001876 <HAL_TIM_Base_Start_IT+0x2e>
    __HAL_TIM_ENABLE(htim);
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	4310      	orrs	r0, r2
 8001870:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 8001872:	2000      	movs	r0, #0
}
 8001874:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001876:	2207      	movs	r2, #7
 8001878:	6899      	ldr	r1, [r3, #8]
 800187a:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800187c:	2a06      	cmp	r2, #6
 800187e:	d005      	beq.n	800188c <HAL_TIM_Base_Start_IT+0x44>
      __HAL_TIM_ENABLE(htim);
 8001880:	2101      	movs	r1, #1
 8001882:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8001884:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8001886:	430a      	orrs	r2, r1
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	e7f3      	b.n	8001874 <HAL_TIM_Base_Start_IT+0x2c>
  return HAL_OK;
 800188c:	2000      	movs	r0, #0
 800188e:	e7f1      	b.n	8001874 <HAL_TIM_Base_Start_IT+0x2c>
 8001890:	40012c00 	.word	0x40012c00
 8001894:	40000400 	.word	0x40000400

08001898 <HAL_TIM_PeriodElapsedCallback>:
 8001898:	4770      	bx	lr
 800189a:	46c0      	nop			; (mov r8, r8)

0800189c <HAL_TIM_OC_DelayElapsedCallback>:
 800189c:	4770      	bx	lr
 800189e:	46c0      	nop			; (mov r8, r8)

080018a0 <HAL_TIM_IC_CaptureCallback>:
 80018a0:	4770      	bx	lr
 80018a2:	46c0      	nop			; (mov r8, r8)

080018a4 <HAL_TIM_PWM_PulseFinishedCallback>:
 80018a4:	4770      	bx	lr
 80018a6:	46c0      	nop			; (mov r8, r8)

080018a8 <HAL_TIM_TriggerCallback>:
 80018a8:	4770      	bx	lr
 80018aa:	46c0      	nop			; (mov r8, r8)

080018ac <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80018ac:	2202      	movs	r2, #2
 80018ae:	6803      	ldr	r3, [r0, #0]
{
 80018b0:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80018b2:	6919      	ldr	r1, [r3, #16]
{
 80018b4:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80018b6:	420a      	tst	r2, r1
 80018b8:	d002      	beq.n	80018c0 <HAL_TIM_IRQHandler+0x14>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80018ba:	68d9      	ldr	r1, [r3, #12]
 80018bc:	420a      	tst	r2, r1
 80018be:	d165      	bne.n	800198c <HAL_TIM_IRQHandler+0xe0>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80018c0:	2204      	movs	r2, #4
 80018c2:	6919      	ldr	r1, [r3, #16]
 80018c4:	420a      	tst	r2, r1
 80018c6:	d002      	beq.n	80018ce <HAL_TIM_IRQHandler+0x22>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80018c8:	68d9      	ldr	r1, [r3, #12]
 80018ca:	420a      	tst	r2, r1
 80018cc:	d14b      	bne.n	8001966 <HAL_TIM_IRQHandler+0xba>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80018ce:	2208      	movs	r2, #8
 80018d0:	6919      	ldr	r1, [r3, #16]
 80018d2:	420a      	tst	r2, r1
 80018d4:	d002      	beq.n	80018dc <HAL_TIM_IRQHandler+0x30>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80018d6:	68d9      	ldr	r1, [r3, #12]
 80018d8:	420a      	tst	r2, r1
 80018da:	d133      	bne.n	8001944 <HAL_TIM_IRQHandler+0x98>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80018dc:	2210      	movs	r2, #16
 80018de:	6919      	ldr	r1, [r3, #16]
 80018e0:	420a      	tst	r2, r1
 80018e2:	d002      	beq.n	80018ea <HAL_TIM_IRQHandler+0x3e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80018e4:	68d9      	ldr	r1, [r3, #12]
 80018e6:	420a      	tst	r2, r1
 80018e8:	d11c      	bne.n	8001924 <HAL_TIM_IRQHandler+0x78>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80018ea:	2201      	movs	r2, #1
 80018ec:	6919      	ldr	r1, [r3, #16]
 80018ee:	420a      	tst	r2, r1
 80018f0:	d002      	beq.n	80018f8 <HAL_TIM_IRQHandler+0x4c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80018f2:	68d9      	ldr	r1, [r3, #12]
 80018f4:	420a      	tst	r2, r1
 80018f6:	d15c      	bne.n	80019b2 <HAL_TIM_IRQHandler+0x106>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80018f8:	2280      	movs	r2, #128	; 0x80
 80018fa:	6919      	ldr	r1, [r3, #16]
 80018fc:	420a      	tst	r2, r1
 80018fe:	d002      	beq.n	8001906 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001900:	68d9      	ldr	r1, [r3, #12]
 8001902:	420a      	tst	r2, r1
 8001904:	d15c      	bne.n	80019c0 <HAL_TIM_IRQHandler+0x114>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001906:	2240      	movs	r2, #64	; 0x40
 8001908:	6919      	ldr	r1, [r3, #16]
 800190a:	420a      	tst	r2, r1
 800190c:	d002      	beq.n	8001914 <HAL_TIM_IRQHandler+0x68>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800190e:	68d9      	ldr	r1, [r3, #12]
 8001910:	420a      	tst	r2, r1
 8001912:	d15d      	bne.n	80019d0 <HAL_TIM_IRQHandler+0x124>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001914:	2220      	movs	r2, #32
 8001916:	6919      	ldr	r1, [r3, #16]
 8001918:	420a      	tst	r2, r1
 800191a:	d002      	beq.n	8001922 <HAL_TIM_IRQHandler+0x76>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800191c:	68d9      	ldr	r1, [r3, #12]
 800191e:	420a      	tst	r2, r1
 8001920:	d141      	bne.n	80019a6 <HAL_TIM_IRQHandler+0xfa>
}
 8001922:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001924:	3a21      	subs	r2, #33	; 0x21
 8001926:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001928:	3219      	adds	r2, #25
 800192a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800192c:	69da      	ldr	r2, [r3, #28]
 800192e:	23c0      	movs	r3, #192	; 0xc0
 8001930:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8001932:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001934:	421a      	tst	r2, r3
 8001936:	d05e      	beq.n	80019f6 <HAL_TIM_IRQHandler+0x14a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001938:	f7ff ffb2 	bl	80018a0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800193c:	2300      	movs	r3, #0
 800193e:	7723      	strb	r3, [r4, #28]
 8001940:	6823      	ldr	r3, [r4, #0]
 8001942:	e7d2      	b.n	80018ea <HAL_TIM_IRQHandler+0x3e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001944:	3a11      	subs	r2, #17
 8001946:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001948:	320d      	adds	r2, #13
 800194a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800194c:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800194e:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001950:	079b      	lsls	r3, r3, #30
 8001952:	d14d      	bne.n	80019f0 <HAL_TIM_IRQHandler+0x144>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001954:	f7ff ffa2 	bl	800189c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001958:	0020      	movs	r0, r4
 800195a:	f7ff ffa3 	bl	80018a4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800195e:	2300      	movs	r3, #0
 8001960:	7723      	strb	r3, [r4, #28]
 8001962:	6823      	ldr	r3, [r4, #0]
 8001964:	e7ba      	b.n	80018dc <HAL_TIM_IRQHandler+0x30>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001966:	3a09      	subs	r2, #9
 8001968:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800196a:	3207      	adds	r2, #7
 800196c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800196e:	699a      	ldr	r2, [r3, #24]
 8001970:	23c0      	movs	r3, #192	; 0xc0
 8001972:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8001974:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001976:	421a      	tst	r2, r3
 8001978:	d137      	bne.n	80019ea <HAL_TIM_IRQHandler+0x13e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800197a:	f7ff ff8f 	bl	800189c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800197e:	0020      	movs	r0, r4
 8001980:	f7ff ff90 	bl	80018a4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001984:	2300      	movs	r3, #0
 8001986:	7723      	strb	r3, [r4, #28]
 8001988:	6823      	ldr	r3, [r4, #0]
 800198a:	e7a0      	b.n	80018ce <HAL_TIM_IRQHandler+0x22>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800198c:	3a05      	subs	r2, #5
 800198e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001990:	3204      	adds	r2, #4
 8001992:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	079b      	lsls	r3, r3, #30
 8001998:	d021      	beq.n	80019de <HAL_TIM_IRQHandler+0x132>
          HAL_TIM_IC_CaptureCallback(htim);
 800199a:	f7ff ff81 	bl	80018a0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800199e:	2300      	movs	r3, #0
 80019a0:	7723      	strb	r3, [r4, #28]
 80019a2:	6823      	ldr	r3, [r4, #0]
 80019a4:	e78c      	b.n	80018c0 <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80019a6:	3a41      	subs	r2, #65	; 0x41
      HAL_TIMEx_CommutCallback(htim);
 80019a8:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80019aa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80019ac:	f000 f82a 	bl	8001a04 <HAL_TIMEx_CommutCallback>
}
 80019b0:	e7b7      	b.n	8001922 <HAL_TIM_IRQHandler+0x76>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80019b2:	3a03      	subs	r2, #3
 80019b4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80019b6:	0020      	movs	r0, r4
 80019b8:	f7ff ff6e 	bl	8001898 <HAL_TIM_PeriodElapsedCallback>
 80019bc:	6823      	ldr	r3, [r4, #0]
 80019be:	e79b      	b.n	80018f8 <HAL_TIM_IRQHandler+0x4c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80019c0:	3a02      	subs	r2, #2
 80019c2:	3aff      	subs	r2, #255	; 0xff
 80019c4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80019c6:	0020      	movs	r0, r4
 80019c8:	f000 f81e 	bl	8001a08 <HAL_TIMEx_BreakCallback>
 80019cc:	6823      	ldr	r3, [r4, #0]
 80019ce:	e79a      	b.n	8001906 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80019d0:	3a81      	subs	r2, #129	; 0x81
 80019d2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80019d4:	0020      	movs	r0, r4
 80019d6:	f7ff ff67 	bl	80018a8 <HAL_TIM_TriggerCallback>
 80019da:	6823      	ldr	r3, [r4, #0]
 80019dc:	e79a      	b.n	8001914 <HAL_TIM_IRQHandler+0x68>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80019de:	f7ff ff5d 	bl	800189c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019e2:	0020      	movs	r0, r4
 80019e4:	f7ff ff5e 	bl	80018a4 <HAL_TIM_PWM_PulseFinishedCallback>
 80019e8:	e7d9      	b.n	800199e <HAL_TIM_IRQHandler+0xf2>
        HAL_TIM_IC_CaptureCallback(htim);
 80019ea:	f7ff ff59 	bl	80018a0 <HAL_TIM_IC_CaptureCallback>
 80019ee:	e7c9      	b.n	8001984 <HAL_TIM_IRQHandler+0xd8>
        HAL_TIM_IC_CaptureCallback(htim);
 80019f0:	f7ff ff56 	bl	80018a0 <HAL_TIM_IC_CaptureCallback>
 80019f4:	e7b3      	b.n	800195e <HAL_TIM_IRQHandler+0xb2>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019f6:	f7ff ff51 	bl	800189c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019fa:	0020      	movs	r0, r4
 80019fc:	f7ff ff52 	bl	80018a4 <HAL_TIM_PWM_PulseFinishedCallback>
 8001a00:	e79c      	b.n	800193c <HAL_TIM_IRQHandler+0x90>
 8001a02:	46c0      	nop			; (mov r8, r8)

08001a04 <HAL_TIMEx_CommutCallback>:
 8001a04:	4770      	bx	lr
 8001a06:	46c0      	nop			; (mov r8, r8)

08001a08 <HAL_TIMEx_BreakCallback>:
 8001a08:	4770      	bx	lr
 8001a0a:	46c0      	nop			; (mov r8, r8)

08001a0c <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001a0c:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 8001a0e:	b530      	push	{r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001a10:	2b21      	cmp	r3, #33	; 0x21
 8001a12:	d000      	beq.n	8001a16 <UART_TxISR_16BIT+0xa>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8001a14:	bd30      	pop	{r4, r5, pc}
    if (huart->TxXferCount == 0U)
 8001a16:	3331      	adds	r3, #49	; 0x31
 8001a18:	5ac2      	ldrh	r2, [r0, r3]
 8001a1a:	2a00      	cmp	r2, #0
 8001a1c:	d117      	bne.n	8001a4e <UART_TxISR_16BIT+0x42>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a1e:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a22:	3201      	adds	r2, #1
 8001a24:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001a28:	2580      	movs	r5, #128	; 0x80
 8001a2a:	6801      	ldr	r1, [r0, #0]
 8001a2c:	680b      	ldr	r3, [r1, #0]
 8001a2e:	43ab      	bics	r3, r5
 8001a30:	600b      	str	r3, [r1, #0]
 8001a32:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a36:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a3a:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001a3e:	6802      	ldr	r2, [r0, #0]
 8001a40:	2040      	movs	r0, #64	; 0x40
 8001a42:	6813      	ldr	r3, [r2, #0]
 8001a44:	4303      	orrs	r3, r0
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	f381 8810 	msr	PRIMASK, r1
}
 8001a4c:	e7e2      	b.n	8001a14 <UART_TxISR_16BIT+0x8>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001a4e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8001a50:	6804      	ldr	r4, [r0, #0]
 8001a52:	880a      	ldrh	r2, [r1, #0]
      huart->pTxBuffPtr += 2U;
 8001a54:	3102      	adds	r1, #2
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8001a56:	05d2      	lsls	r2, r2, #23
 8001a58:	0dd2      	lsrs	r2, r2, #23
 8001a5a:	8522      	strh	r2, [r4, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8001a5c:	64c1      	str	r1, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8001a5e:	5ac2      	ldrh	r2, [r0, r3]
 8001a60:	3a01      	subs	r2, #1
 8001a62:	b292      	uxth	r2, r2
 8001a64:	52c2      	strh	r2, [r0, r3]
}
 8001a66:	e7d5      	b.n	8001a14 <UART_TxISR_16BIT+0x8>

08001a68 <UART_TxISR_8BIT>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001a68:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 8001a6a:	b530      	push	{r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001a6c:	2b21      	cmp	r3, #33	; 0x21
 8001a6e:	d000      	beq.n	8001a72 <UART_TxISR_8BIT+0xa>
}
 8001a70:	bd30      	pop	{r4, r5, pc}
    if (huart->TxXferCount == 0U)
 8001a72:	3331      	adds	r3, #49	; 0x31
 8001a74:	5ac2      	ldrh	r2, [r0, r3]
 8001a76:	2a00      	cmp	r2, #0
 8001a78:	d117      	bne.n	8001aaa <UART_TxISR_8BIT+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a7a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a7e:	3201      	adds	r2, #1
 8001a80:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001a84:	2580      	movs	r5, #128	; 0x80
 8001a86:	6801      	ldr	r1, [r0, #0]
 8001a88:	680b      	ldr	r3, [r1, #0]
 8001a8a:	43ab      	bics	r3, r5
 8001a8c:	600b      	str	r3, [r1, #0]
 8001a8e:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a92:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a96:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001a9a:	6802      	ldr	r2, [r0, #0]
 8001a9c:	2040      	movs	r0, #64	; 0x40
 8001a9e:	6813      	ldr	r3, [r2, #0]
 8001aa0:	4303      	orrs	r3, r0
 8001aa2:	6013      	str	r3, [r2, #0]
 8001aa4:	f381 8810 	msr	PRIMASK, r1
}
 8001aa8:	e7e2      	b.n	8001a70 <UART_TxISR_8BIT+0x8>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8001aaa:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001aac:	6804      	ldr	r4, [r0, #0]
 8001aae:	7811      	ldrb	r1, [r2, #0]
      huart->pTxBuffPtr++;
 8001ab0:	3201      	adds	r2, #1
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8001ab2:	8521      	strh	r1, [r4, #40]	; 0x28
      huart->pTxBuffPtr++;
 8001ab4:	64c2      	str	r2, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8001ab6:	5ac2      	ldrh	r2, [r0, r3]
 8001ab8:	3a01      	subs	r2, #1
 8001aba:	b292      	uxth	r2, r2
 8001abc:	52c2      	strh	r2, [r0, r3]
}
 8001abe:	e7d7      	b.n	8001a70 <UART_TxISR_8BIT+0x8>

08001ac0 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8001ac0:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 8001ac2:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8001ac4:	2b20      	cmp	r3, #32
 8001ac6:	d133      	bne.n	8001b30 <HAL_UART_Transmit_IT+0x70>
    if ((pData == NULL) || (Size == 0U))
 8001ac8:	2900      	cmp	r1, #0
 8001aca:	d02f      	beq.n	8001b2c <HAL_UART_Transmit_IT+0x6c>
 8001acc:	2a00      	cmp	r2, #0
 8001ace:	d02d      	beq.n	8001b2c <HAL_UART_Transmit_IT+0x6c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ad0:	2380      	movs	r3, #128	; 0x80
 8001ad2:	6884      	ldr	r4, [r0, #8]
 8001ad4:	015b      	lsls	r3, r3, #5
 8001ad6:	429c      	cmp	r4, r3
 8001ad8:	d020      	beq.n	8001b1c <HAL_UART_Transmit_IT+0x5c>
    __HAL_LOCK(huart);
 8001ada:	2374      	movs	r3, #116	; 0x74
 8001adc:	5cc3      	ldrb	r3, [r0, r3]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d026      	beq.n	8001b30 <HAL_UART_Transmit_IT+0x70>
    huart->TxXferSize  = Size;
 8001ae2:	2350      	movs	r3, #80	; 0x50
    huart->pTxBuffPtr  = pData;
 8001ae4:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8001ae6:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 8001ae8:	3302      	adds	r3, #2
 8001aea:	52c2      	strh	r2, [r0, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001aec:	2200      	movs	r2, #0
 8001aee:	332e      	adds	r3, #46	; 0x2e
 8001af0:	50c2      	str	r2, [r0, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001af2:	3b5f      	subs	r3, #95	; 0x5f
 8001af4:	6783      	str	r3, [r0, #120]	; 0x78
      huart->TxISR = UART_TxISR_8BIT;
 8001af6:	4b17      	ldr	r3, [pc, #92]	; (8001b54 <HAL_UART_Transmit_IT+0x94>)
 8001af8:	6683      	str	r3, [r0, #104]	; 0x68
    __HAL_UNLOCK(huart);
 8001afa:	2200      	movs	r2, #0
 8001afc:	2374      	movs	r3, #116	; 0x74
 8001afe:	54c2      	strb	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b00:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b04:	3b73      	subs	r3, #115	; 0x73
 8001b06:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001b0a:	6802      	ldr	r2, [r0, #0]
 8001b0c:	2080      	movs	r0, #128	; 0x80
 8001b0e:	6813      	ldr	r3, [r2, #0]
 8001b10:	4303      	orrs	r3, r0
 8001b12:	6013      	str	r3, [r2, #0]
 8001b14:	f381 8810 	msr	PRIMASK, r1
    return HAL_OK;
 8001b18:	2000      	movs	r0, #0
}
 8001b1a:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b1c:	6903      	ldr	r3, [r0, #16]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1db      	bne.n	8001ada <HAL_UART_Transmit_IT+0x1a>
      if ((((uint32_t)pData) & 1U) != 0U)
 8001b22:	3301      	adds	r3, #1
 8001b24:	001c      	movs	r4, r3
 8001b26:	400c      	ands	r4, r1
 8001b28:	4219      	tst	r1, r3
 8001b2a:	d003      	beq.n	8001b34 <HAL_UART_Transmit_IT+0x74>
      return HAL_ERROR;
 8001b2c:	2001      	movs	r0, #1
 8001b2e:	e7f4      	b.n	8001b1a <HAL_UART_Transmit_IT+0x5a>
    return HAL_BUSY;
 8001b30:	2002      	movs	r0, #2
 8001b32:	e7f2      	b.n	8001b1a <HAL_UART_Transmit_IT+0x5a>
    __HAL_LOCK(huart);
 8001b34:	2374      	movs	r3, #116	; 0x74
 8001b36:	5cc3      	ldrb	r3, [r0, r3]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d0f9      	beq.n	8001b30 <HAL_UART_Transmit_IT+0x70>
    huart->TxXferSize  = Size;
 8001b3c:	2350      	movs	r3, #80	; 0x50
    huart->pTxBuffPtr  = pData;
 8001b3e:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8001b40:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 8001b42:	3302      	adds	r3, #2
 8001b44:	52c2      	strh	r2, [r0, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b46:	332e      	adds	r3, #46	; 0x2e
 8001b48:	50c4      	str	r4, [r0, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b4a:	3b5f      	subs	r3, #95	; 0x5f
 8001b4c:	6783      	str	r3, [r0, #120]	; 0x78
      huart->TxISR = UART_TxISR_16BIT;
 8001b4e:	4b02      	ldr	r3, [pc, #8]	; (8001b58 <HAL_UART_Transmit_IT+0x98>)
 8001b50:	e7d2      	b.n	8001af8 <HAL_UART_Transmit_IT+0x38>
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	08001a69 	.word	0x08001a69
 8001b58:	08001a0d 	.word	0x08001a0d

08001b5c <HAL_UART_ErrorCallback>:
 8001b5c:	4770      	bx	lr
 8001b5e:	46c0      	nop			; (mov r8, r8)

08001b60 <UART_DMAAbortOnError>:
  huart->RxXferCount = 0U;
 8001b60:	2300      	movs	r3, #0
 8001b62:	225a      	movs	r2, #90	; 0x5a
{
 8001b64:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001b66:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8001b68:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 8001b6a:	3a08      	subs	r2, #8
 8001b6c:	5283      	strh	r3, [r0, r2]
  HAL_UART_ErrorCallback(huart);
 8001b6e:	f7ff fff5 	bl	8001b5c <HAL_UART_ErrorCallback>
}
 8001b72:	bd10      	pop	{r4, pc}

08001b74 <HAL_UARTEx_RxEventCallback>:
}
 8001b74:	4770      	bx	lr
 8001b76:	46c0      	nop			; (mov r8, r8)

08001b78 <HAL_UART_IRQHandler>:
{
 8001b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b7a:	46ce      	mov	lr, r9
 8001b7c:	4647      	mov	r7, r8
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001b7e:	6802      	ldr	r2, [r0, #0]
{
 8001b80:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001b82:	69d3      	ldr	r3, [r2, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001b84:	48bc      	ldr	r0, [pc, #752]	; (8001e78 <HAL_UART_IRQHandler+0x300>)
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001b86:	6811      	ldr	r1, [r2, #0]
{
 8001b88:	b580      	push	{r7, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001b8a:	6895      	ldr	r5, [r2, #8]
  if (errorflags == 0U)
 8001b8c:	4203      	tst	r3, r0
 8001b8e:	d000      	beq.n	8001b92 <HAL_UART_IRQHandler+0x1a>
 8001b90:	e074      	b.n	8001c7c <HAL_UART_IRQHandler+0x104>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001b92:	2020      	movs	r0, #32
 8001b94:	4218      	tst	r0, r3
 8001b96:	d002      	beq.n	8001b9e <HAL_UART_IRQHandler+0x26>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001b98:	4208      	tst	r0, r1
 8001b9a:	d000      	beq.n	8001b9e <HAL_UART_IRQHandler+0x26>
 8001b9c:	e10a      	b.n	8001db4 <HAL_UART_IRQHandler+0x23c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001b9e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001ba0:	2801      	cmp	r0, #1
 8001ba2:	d014      	beq.n	8001bce <HAL_UART_IRQHandler+0x56>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8001ba4:	2280      	movs	r2, #128	; 0x80
 8001ba6:	421a      	tst	r2, r3
 8001ba8:	d109      	bne.n	8001bbe <HAL_UART_IRQHandler+0x46>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001baa:	2240      	movs	r2, #64	; 0x40
 8001bac:	421a      	tst	r2, r3
 8001bae:	d002      	beq.n	8001bb6 <HAL_UART_IRQHandler+0x3e>
 8001bb0:	420a      	tst	r2, r1
 8001bb2:	d000      	beq.n	8001bb6 <HAL_UART_IRQHandler+0x3e>
 8001bb4:	e103      	b.n	8001dbe <HAL_UART_IRQHandler+0x246>
}
 8001bb6:	bcc0      	pop	{r6, r7}
 8001bb8:	46b9      	mov	r9, r7
 8001bba:	46b0      	mov	r8, r6
 8001bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8001bbe:	420a      	tst	r2, r1
 8001bc0:	d0f3      	beq.n	8001baa <HAL_UART_IRQHandler+0x32>
    if (huart->TxISR != NULL)
 8001bc2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d0f6      	beq.n	8001bb6 <HAL_UART_IRQHandler+0x3e>
      huart->TxISR(huart);
 8001bc8:	0020      	movs	r0, r4
 8001bca:	4798      	blx	r3
 8001bcc:	e7f3      	b.n	8001bb6 <HAL_UART_IRQHandler+0x3e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8001bce:	2510      	movs	r5, #16
 8001bd0:	421d      	tst	r5, r3
 8001bd2:	d0e7      	beq.n	8001ba4 <HAL_UART_IRQHandler+0x2c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8001bd4:	420d      	tst	r5, r1
 8001bd6:	d0e5      	beq.n	8001ba4 <HAL_UART_IRQHandler+0x2c>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bd8:	2340      	movs	r3, #64	; 0x40
 8001bda:	001e      	movs	r6, r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8001bdc:	6215      	str	r5, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bde:	6892      	ldr	r2, [r2, #8]
 8001be0:	4016      	ands	r6, r2
 8001be2:	4213      	tst	r3, r2
 8001be4:	d100      	bne.n	8001be8 <HAL_UART_IRQHandler+0x70>
 8001be6:	e108      	b.n	8001dfa <HAL_UART_IRQHandler+0x282>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001be8:	6f26      	ldr	r6, [r4, #112]	; 0x70
 8001bea:	6832      	ldr	r2, [r6, #0]
 8001bec:	6852      	ldr	r2, [r2, #4]
 8001bee:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8001bf0:	2a00      	cmp	r2, #0
 8001bf2:	d0e0      	beq.n	8001bb6 <HAL_UART_IRQHandler+0x3e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001bf4:	2158      	movs	r1, #88	; 0x58
 8001bf6:	4688      	mov	r8, r1
 8001bf8:	5a61      	ldrh	r1, [r4, r1]
 8001bfa:	4291      	cmp	r1, r2
 8001bfc:	d9db      	bls.n	8001bb6 <HAL_UART_IRQHandler+0x3e>
        huart->RxXferCount = nb_remaining_rx_data;
 8001bfe:	275a      	movs	r7, #90	; 0x5a
 8001c00:	53e2      	strh	r2, [r4, r7]
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001c02:	69b2      	ldr	r2, [r6, #24]
 8001c04:	2a20      	cmp	r2, #32
 8001c06:	d031      	beq.n	8001c6c <HAL_UART_IRQHandler+0xf4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c08:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c0c:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001c10:	6821      	ldr	r1, [r4, #0]
 8001c12:	4f9a      	ldr	r7, [pc, #616]	; (8001e7c <HAL_UART_IRQHandler+0x304>)
 8001c14:	680a      	ldr	r2, [r1, #0]
 8001c16:	403a      	ands	r2, r7
 8001c18:	600a      	str	r2, [r1, #0]
 8001c1a:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c1e:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c22:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c26:	6821      	ldr	r1, [r4, #0]
 8001c28:	688a      	ldr	r2, [r1, #8]
 8001c2a:	4382      	bics	r2, r0
 8001c2c:	608a      	str	r2, [r1, #8]
 8001c2e:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c32:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c36:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c3a:	6821      	ldr	r1, [r4, #0]
 8001c3c:	688a      	ldr	r2, [r1, #8]
 8001c3e:	439a      	bics	r2, r3
 8001c40:	608a      	str	r2, [r1, #8]
 8001c42:	f386 8810 	msr	PRIMASK, r6
          huart->RxState = HAL_UART_STATE_READY;
 8001c46:	3b20      	subs	r3, #32
 8001c48:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	6623      	str	r3, [r4, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c4e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c52:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c56:	6822      	ldr	r2, [r4, #0]
 8001c58:	6813      	ldr	r3, [r2, #0]
 8001c5a:	43ab      	bics	r3, r5
 8001c5c:	6013      	str	r3, [r2, #0]
 8001c5e:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001c62:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001c64:	f7fe ff88 	bl	8000b78 <HAL_DMA_Abort>
 8001c68:	4643      	mov	r3, r8
 8001c6a:	5ae1      	ldrh	r1, [r4, r3]
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001c6c:	235a      	movs	r3, #90	; 0x5a
 8001c6e:	5ae3      	ldrh	r3, [r4, r3]
 8001c70:	0020      	movs	r0, r4
 8001c72:	1ac9      	subs	r1, r1, r3
 8001c74:	b289      	uxth	r1, r1
 8001c76:	f7ff ff7d 	bl	8001b74 <HAL_UARTEx_RxEventCallback>
 8001c7a:	e79c      	b.n	8001bb6 <HAL_UART_IRQHandler+0x3e>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001c7c:	2601      	movs	r6, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001c7e:	4880      	ldr	r0, [pc, #512]	; (8001e80 <HAL_UART_IRQHandler+0x308>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001c80:	4035      	ands	r5, r6
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001c82:	4008      	ands	r0, r1
 8001c84:	4328      	orrs	r0, r5
 8001c86:	d100      	bne.n	8001c8a <HAL_UART_IRQHandler+0x112>
 8001c88:	e789      	b.n	8001b9e <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001c8a:	421e      	tst	r6, r3
 8001c8c:	d006      	beq.n	8001c9c <HAL_UART_IRQHandler+0x124>
 8001c8e:	05c8      	lsls	r0, r1, #23
 8001c90:	d504      	bpl.n	8001c9c <HAL_UART_IRQHandler+0x124>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001c92:	2780      	movs	r7, #128	; 0x80
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001c94:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001c96:	59e0      	ldr	r0, [r4, r7]
 8001c98:	4306      	orrs	r6, r0
 8001c9a:	51e6      	str	r6, [r4, r7]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001c9c:	2002      	movs	r0, #2
 8001c9e:	4218      	tst	r0, r3
 8001ca0:	d07c      	beq.n	8001d9c <HAL_UART_IRQHandler+0x224>
 8001ca2:	2d00      	cmp	r5, #0
 8001ca4:	d007      	beq.n	8001cb6 <HAL_UART_IRQHandler+0x13e>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001ca6:	2780      	movs	r7, #128	; 0x80
 8001ca8:	2604      	movs	r6, #4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001caa:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001cac:	59e0      	ldr	r0, [r4, r7]
 8001cae:	4330      	orrs	r0, r6
 8001cb0:	51e0      	str	r0, [r4, r7]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001cb2:	421e      	tst	r6, r3
 8001cb4:	d176      	bne.n	8001da4 <HAL_UART_IRQHandler+0x22c>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001cb6:	2608      	movs	r6, #8
 8001cb8:	421e      	tst	r6, r3
 8001cba:	d008      	beq.n	8001cce <HAL_UART_IRQHandler+0x156>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001cbc:	2020      	movs	r0, #32
 8001cbe:	4008      	ands	r0, r1
 8001cc0:	4305      	orrs	r5, r0
 8001cc2:	d004      	beq.n	8001cce <HAL_UART_IRQHandler+0x156>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001cc4:	2580      	movs	r5, #128	; 0x80
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001cc6:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001cc8:	5960      	ldr	r0, [r4, r5]
 8001cca:	4306      	orrs	r6, r0
 8001ccc:	5166      	str	r6, [r4, r5]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001cce:	2080      	movs	r0, #128	; 0x80
 8001cd0:	0100      	lsls	r0, r0, #4
 8001cd2:	4203      	tst	r3, r0
 8001cd4:	d007      	beq.n	8001ce6 <HAL_UART_IRQHandler+0x16e>
 8001cd6:	014d      	lsls	r5, r1, #5
 8001cd8:	d505      	bpl.n	8001ce6 <HAL_UART_IRQHandler+0x16e>
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001cda:	2580      	movs	r5, #128	; 0x80
 8001cdc:	2620      	movs	r6, #32
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001cde:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001ce0:	5960      	ldr	r0, [r4, r5]
 8001ce2:	4330      	orrs	r0, r6
 8001ce4:	5160      	str	r0, [r4, r5]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001ce6:	2080      	movs	r0, #128	; 0x80
 8001ce8:	5820      	ldr	r0, [r4, r0]
 8001cea:	2800      	cmp	r0, #0
 8001cec:	d100      	bne.n	8001cf0 <HAL_UART_IRQHandler+0x178>
 8001cee:	e762      	b.n	8001bb6 <HAL_UART_IRQHandler+0x3e>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001cf0:	2020      	movs	r0, #32
 8001cf2:	4218      	tst	r0, r3
 8001cf4:	d001      	beq.n	8001cfa <HAL_UART_IRQHandler+0x182>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001cf6:	4208      	tst	r0, r1
 8001cf8:	d178      	bne.n	8001dec <HAL_UART_IRQHandler+0x274>
      errorcode = huart->ErrorCode;
 8001cfa:	2680      	movs	r6, #128	; 0x80
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001cfc:	2540      	movs	r5, #64	; 0x40
      errorcode = huart->ErrorCode;
 8001cfe:	59a1      	ldr	r1, [r4, r6]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001d00:	6893      	ldr	r3, [r2, #8]
 8001d02:	401d      	ands	r5, r3
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001d04:	2328      	movs	r3, #40	; 0x28
 8001d06:	400b      	ands	r3, r1
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001d08:	431d      	orrs	r5, r3
 8001d0a:	d100      	bne.n	8001d0e <HAL_UART_IRQHandler+0x196>
 8001d0c:	e0af      	b.n	8001e6e <HAL_UART_IRQHandler+0x2f6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d0e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d12:	2201      	movs	r2, #1
 8001d14:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d18:	6821      	ldr	r1, [r4, #0]
 8001d1a:	4d5a      	ldr	r5, [pc, #360]	; (8001e84 <HAL_UART_IRQHandler+0x30c>)
 8001d1c:	680b      	ldr	r3, [r1, #0]
 8001d1e:	402b      	ands	r3, r5
 8001d20:	600b      	str	r3, [r1, #0]
 8001d22:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d26:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d2a:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d2e:	6821      	ldr	r1, [r4, #0]
 8001d30:	688b      	ldr	r3, [r1, #8]
 8001d32:	4393      	bics	r3, r2
 8001d34:	608b      	str	r3, [r1, #8]
 8001d36:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d3a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d10a      	bne.n	8001d56 <HAL_UART_IRQHandler+0x1de>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d40:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d44:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d48:	2010      	movs	r0, #16
 8001d4a:	6822      	ldr	r2, [r4, #0]
 8001d4c:	6813      	ldr	r3, [r2, #0]
 8001d4e:	4383      	bics	r3, r0
 8001d50:	6013      	str	r3, [r2, #0]
 8001d52:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8001d56:	2320      	movs	r3, #32
 8001d58:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d5a:	2300      	movs	r3, #0
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d5c:	2240      	movs	r2, #64	; 0x40
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d5e:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 8001d60:	6663      	str	r3, [r4, #100]	; 0x64
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d62:	6823      	ldr	r3, [r4, #0]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	421a      	tst	r2, r3
 8001d68:	d03c      	beq.n	8001de4 <HAL_UART_IRQHandler+0x26c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d6a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d6e:	2301      	movs	r3, #1
 8001d70:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d74:	6821      	ldr	r1, [r4, #0]
 8001d76:	688b      	ldr	r3, [r1, #8]
 8001d78:	4393      	bics	r3, r2
 8001d7a:	608b      	str	r3, [r1, #8]
 8001d7c:	f380 8810 	msr	PRIMASK, r0
          if (huart->hdmarx != NULL)
 8001d80:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001d82:	2800      	cmp	r0, #0
 8001d84:	d02e      	beq.n	8001de4 <HAL_UART_IRQHandler+0x26c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001d86:	4b40      	ldr	r3, [pc, #256]	; (8001e88 <HAL_UART_IRQHandler+0x310>)
 8001d88:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001d8a:	f7fe ff15 	bl	8000bb8 <HAL_DMA_Abort_IT>
 8001d8e:	2800      	cmp	r0, #0
 8001d90:	d100      	bne.n	8001d94 <HAL_UART_IRQHandler+0x21c>
 8001d92:	e710      	b.n	8001bb6 <HAL_UART_IRQHandler+0x3e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001d94:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001d96:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001d98:	4798      	blx	r3
 8001d9a:	e70c      	b.n	8001bb6 <HAL_UART_IRQHandler+0x3e>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001d9c:	0758      	lsls	r0, r3, #29
 8001d9e:	d58a      	bpl.n	8001cb6 <HAL_UART_IRQHandler+0x13e>
 8001da0:	2d00      	cmp	r5, #0
 8001da2:	d088      	beq.n	8001cb6 <HAL_UART_IRQHandler+0x13e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001da4:	2004      	movs	r0, #4
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001da6:	2680      	movs	r6, #128	; 0x80
 8001da8:	2702      	movs	r7, #2
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001daa:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001dac:	59a0      	ldr	r0, [r4, r6]
 8001dae:	4338      	orrs	r0, r7
 8001db0:	51a0      	str	r0, [r4, r6]
 8001db2:	e780      	b.n	8001cb6 <HAL_UART_IRQHandler+0x13e>
      if (huart->RxISR != NULL)
 8001db4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d000      	beq.n	8001dbc <HAL_UART_IRQHandler+0x244>
 8001dba:	e705      	b.n	8001bc8 <HAL_UART_IRQHandler+0x50>
 8001dbc:	e6fb      	b.n	8001bb6 <HAL_UART_IRQHandler+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001dbe:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001dc8:	6821      	ldr	r1, [r4, #0]
 8001dca:	680b      	ldr	r3, [r1, #0]
 8001dcc:	4393      	bics	r3, r2
 8001dce:	600b      	str	r3, [r1, #0]
 8001dd0:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001dd4:	2320      	movs	r3, #32
 8001dd6:	67a3      	str	r3, [r4, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8001dd8:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001dda:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 8001ddc:	66a3      	str	r3, [r4, #104]	; 0x68
  HAL_UART_TxCpltCallback(huart);
 8001dde:	f7fe fde7 	bl	80009b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001de2:	e6e8      	b.n	8001bb6 <HAL_UART_IRQHandler+0x3e>
            HAL_UART_ErrorCallback(huart);
 8001de4:	0020      	movs	r0, r4
 8001de6:	f7ff feb9 	bl	8001b5c <HAL_UART_ErrorCallback>
 8001dea:	e6e4      	b.n	8001bb6 <HAL_UART_IRQHandler+0x3e>
        if (huart->RxISR != NULL)
 8001dec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d083      	beq.n	8001cfa <HAL_UART_IRQHandler+0x182>
          huart->RxISR(huart);
 8001df2:	0020      	movs	r0, r4
 8001df4:	4798      	blx	r3
 8001df6:	6822      	ldr	r2, [r4, #0]
 8001df8:	e77f      	b.n	8001cfa <HAL_UART_IRQHandler+0x182>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001dfa:	225a      	movs	r2, #90	; 0x5a
 8001dfc:	5aa3      	ldrh	r3, [r4, r2]
      if ((huart->RxXferCount > 0U)
 8001dfe:	5aa2      	ldrh	r2, [r4, r2]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001e00:	b29b      	uxth	r3, r3
      if ((huart->RxXferCount > 0U)
 8001e02:	2a00      	cmp	r2, #0
 8001e04:	d100      	bne.n	8001e08 <HAL_UART_IRQHandler+0x290>
 8001e06:	e6d6      	b.n	8001bb6 <HAL_UART_IRQHandler+0x3e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001e08:	2258      	movs	r2, #88	; 0x58
 8001e0a:	5aa1      	ldrh	r1, [r4, r2]
 8001e0c:	1ac9      	subs	r1, r1, r3
 8001e0e:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8001e10:	2900      	cmp	r1, #0
 8001e12:	d100      	bne.n	8001e16 <HAL_UART_IRQHandler+0x29e>
 8001e14:	e6cf      	b.n	8001bb6 <HAL_UART_IRQHandler+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e16:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e1a:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e1e:	6823      	ldr	r3, [r4, #0]
 8001e20:	4699      	mov	r9, r3
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4698      	mov	r8, r3
 8001e26:	4642      	mov	r2, r8
 8001e28:	4b16      	ldr	r3, [pc, #88]	; (8001e84 <HAL_UART_IRQHandler+0x30c>)
 8001e2a:	401a      	ands	r2, r3
 8001e2c:	0013      	movs	r3, r2
 8001e2e:	464a      	mov	r2, r9
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e36:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e3a:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e3e:	6822      	ldr	r2, [r4, #0]
 8001e40:	6893      	ldr	r3, [r2, #8]
 8001e42:	4383      	bics	r3, r0
 8001e44:	6093      	str	r3, [r2, #8]
 8001e46:	f387 8810 	msr	PRIMASK, r7
        huart->RxState = HAL_UART_STATE_READY;
 8001e4a:	2320      	movs	r3, #32
        huart->RxISR = NULL;
 8001e4c:	6666      	str	r6, [r4, #100]	; 0x64
        huart->RxState = HAL_UART_STATE_READY;
 8001e4e:	67e3      	str	r3, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e50:	6626      	str	r6, [r4, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e52:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e56:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e5a:	6822      	ldr	r2, [r4, #0]
 8001e5c:	6813      	ldr	r3, [r2, #0]
 8001e5e:	43ab      	bics	r3, r5
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	f386 8810 	msr	PRIMASK, r6
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001e66:	0020      	movs	r0, r4
 8001e68:	f7ff fe84 	bl	8001b74 <HAL_UARTEx_RxEventCallback>
 8001e6c:	e6a3      	b.n	8001bb6 <HAL_UART_IRQHandler+0x3e>
        HAL_UART_ErrorCallback(huart);
 8001e6e:	0020      	movs	r0, r4
 8001e70:	f7ff fe74 	bl	8001b5c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e74:	51a5      	str	r5, [r4, r6]
 8001e76:	e69e      	b.n	8001bb6 <HAL_UART_IRQHandler+0x3e>
 8001e78:	0000080f 	.word	0x0000080f
 8001e7c:	fffffeff 	.word	0xfffffeff
 8001e80:	04000120 	.word	0x04000120
 8001e84:	fffffedf 	.word	0xfffffedf
 8001e88:	08001b61 	.word	0x08001b61

08001e8c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001e8c:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001e8e:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001e90:	07da      	lsls	r2, r3, #31
 8001e92:	d506      	bpl.n	8001ea2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001e94:	6801      	ldr	r1, [r0, #0]
 8001e96:	4c28      	ldr	r4, [pc, #160]	; (8001f38 <UART_AdvFeatureConfig+0xac>)
 8001e98:	684a      	ldr	r2, [r1, #4]
 8001e9a:	4022      	ands	r2, r4
 8001e9c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001e9e:	4322      	orrs	r2, r4
 8001ea0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001ea2:	079a      	lsls	r2, r3, #30
 8001ea4:	d506      	bpl.n	8001eb4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001ea6:	6801      	ldr	r1, [r0, #0]
 8001ea8:	4c24      	ldr	r4, [pc, #144]	; (8001f3c <UART_AdvFeatureConfig+0xb0>)
 8001eaa:	684a      	ldr	r2, [r1, #4]
 8001eac:	4022      	ands	r2, r4
 8001eae:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001eb0:	4322      	orrs	r2, r4
 8001eb2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001eb4:	075a      	lsls	r2, r3, #29
 8001eb6:	d506      	bpl.n	8001ec6 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001eb8:	6801      	ldr	r1, [r0, #0]
 8001eba:	4c21      	ldr	r4, [pc, #132]	; (8001f40 <UART_AdvFeatureConfig+0xb4>)
 8001ebc:	684a      	ldr	r2, [r1, #4]
 8001ebe:	4022      	ands	r2, r4
 8001ec0:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001ec2:	4322      	orrs	r2, r4
 8001ec4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001ec6:	071a      	lsls	r2, r3, #28
 8001ec8:	d506      	bpl.n	8001ed8 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001eca:	6801      	ldr	r1, [r0, #0]
 8001ecc:	4c1d      	ldr	r4, [pc, #116]	; (8001f44 <UART_AdvFeatureConfig+0xb8>)
 8001ece:	684a      	ldr	r2, [r1, #4]
 8001ed0:	4022      	ands	r2, r4
 8001ed2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001ed4:	4322      	orrs	r2, r4
 8001ed6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001ed8:	06da      	lsls	r2, r3, #27
 8001eda:	d506      	bpl.n	8001eea <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001edc:	6801      	ldr	r1, [r0, #0]
 8001ede:	4c1a      	ldr	r4, [pc, #104]	; (8001f48 <UART_AdvFeatureConfig+0xbc>)
 8001ee0:	688a      	ldr	r2, [r1, #8]
 8001ee2:	4022      	ands	r2, r4
 8001ee4:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001ee6:	4322      	orrs	r2, r4
 8001ee8:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001eea:	069a      	lsls	r2, r3, #26
 8001eec:	d506      	bpl.n	8001efc <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001eee:	6801      	ldr	r1, [r0, #0]
 8001ef0:	4c16      	ldr	r4, [pc, #88]	; (8001f4c <UART_AdvFeatureConfig+0xc0>)
 8001ef2:	688a      	ldr	r2, [r1, #8]
 8001ef4:	4022      	ands	r2, r4
 8001ef6:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001ef8:	4322      	orrs	r2, r4
 8001efa:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001efc:	065a      	lsls	r2, r3, #25
 8001efe:	d50a      	bpl.n	8001f16 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001f00:	6801      	ldr	r1, [r0, #0]
 8001f02:	4d13      	ldr	r5, [pc, #76]	; (8001f50 <UART_AdvFeatureConfig+0xc4>)
 8001f04:	684a      	ldr	r2, [r1, #4]
 8001f06:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001f08:	402a      	ands	r2, r5
 8001f0a:	4322      	orrs	r2, r4
 8001f0c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001f0e:	2280      	movs	r2, #128	; 0x80
 8001f10:	0352      	lsls	r2, r2, #13
 8001f12:	4294      	cmp	r4, r2
 8001f14:	d009      	beq.n	8001f2a <UART_AdvFeatureConfig+0x9e>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001f16:	061b      	lsls	r3, r3, #24
 8001f18:	d506      	bpl.n	8001f28 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001f1a:	6802      	ldr	r2, [r0, #0]
 8001f1c:	490d      	ldr	r1, [pc, #52]	; (8001f54 <UART_AdvFeatureConfig+0xc8>)
 8001f1e:	6853      	ldr	r3, [r2, #4]
 8001f20:	400b      	ands	r3, r1
 8001f22:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001f24:	430b      	orrs	r3, r1
 8001f26:	6053      	str	r3, [r2, #4]
}
 8001f28:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001f2a:	684a      	ldr	r2, [r1, #4]
 8001f2c:	4c0a      	ldr	r4, [pc, #40]	; (8001f58 <UART_AdvFeatureConfig+0xcc>)
 8001f2e:	4022      	ands	r2, r4
 8001f30:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001f32:	4322      	orrs	r2, r4
 8001f34:	604a      	str	r2, [r1, #4]
 8001f36:	e7ee      	b.n	8001f16 <UART_AdvFeatureConfig+0x8a>
 8001f38:	fffdffff 	.word	0xfffdffff
 8001f3c:	fffeffff 	.word	0xfffeffff
 8001f40:	fffbffff 	.word	0xfffbffff
 8001f44:	ffff7fff 	.word	0xffff7fff
 8001f48:	ffffefff 	.word	0xffffefff
 8001f4c:	ffffdfff 	.word	0xffffdfff
 8001f50:	ffefffff 	.word	0xffefffff
 8001f54:	fff7ffff 	.word	0xfff7ffff
 8001f58:	ff9fffff 	.word	0xff9fffff

08001f5c <UART_WaitOnFlagUntilTimeout>:
{
 8001f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f5e:	4646      	mov	r6, r8
 8001f60:	4698      	mov	r8, r3
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001f62:	2304      	movs	r3, #4
{
 8001f64:	464f      	mov	r7, r9
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001f66:	4699      	mov	r9, r3
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001f68:	2380      	movs	r3, #128	; 0x80
{
 8001f6a:	46d6      	mov	lr, sl
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001f6c:	011b      	lsls	r3, r3, #4
{
 8001f6e:	b5c0      	push	{r6, r7, lr}
 8001f70:	0015      	movs	r5, r2
 8001f72:	0007      	movs	r7, r0
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001f74:	469a      	mov	sl, r3
{
 8001f76:	000c      	movs	r4, r1
 8001f78:	9e08      	ldr	r6, [sp, #32]
 8001f7a:	6801      	ldr	r1, [r0, #0]
 8001f7c:	1c73      	adds	r3, r6, #1
 8001f7e:	d10c      	bne.n	8001f9a <UART_WaitOnFlagUntilTimeout+0x3e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f80:	69cb      	ldr	r3, [r1, #28]
 8001f82:	4023      	ands	r3, r4
 8001f84:	1b1b      	subs	r3, r3, r4
 8001f86:	425a      	negs	r2, r3
 8001f88:	4153      	adcs	r3, r2
 8001f8a:	42ab      	cmp	r3, r5
 8001f8c:	d0f8      	beq.n	8001f80 <UART_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8001f8e:	2000      	movs	r0, #0
}
 8001f90:	bce0      	pop	{r5, r6, r7}
 8001f92:	46ba      	mov	sl, r7
 8001f94:	46b1      	mov	r9, r6
 8001f96:	46a8      	mov	r8, r5
 8001f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f9a:	69cb      	ldr	r3, [r1, #28]
 8001f9c:	4023      	ands	r3, r4
 8001f9e:	1b1b      	subs	r3, r3, r4
 8001fa0:	425a      	negs	r2, r3
 8001fa2:	4153      	adcs	r3, r2
 8001fa4:	42ab      	cmp	r3, r5
 8001fa6:	d1f2      	bne.n	8001f8e <UART_WaitOnFlagUntilTimeout+0x32>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fa8:	f7fe fd88 	bl	8000abc <HAL_GetTick>
 8001fac:	4643      	mov	r3, r8
 8001fae:	1ac0      	subs	r0, r0, r3
 8001fb0:	42b0      	cmp	r0, r6
 8001fb2:	d82b      	bhi.n	800200c <UART_WaitOnFlagUntilTimeout+0xb0>
 8001fb4:	2e00      	cmp	r6, #0
 8001fb6:	d029      	beq.n	800200c <UART_WaitOnFlagUntilTimeout+0xb0>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001fb8:	464a      	mov	r2, r9
 8001fba:	6839      	ldr	r1, [r7, #0]
 8001fbc:	680b      	ldr	r3, [r1, #0]
 8001fbe:	421a      	tst	r2, r3
 8001fc0:	d0dc      	beq.n	8001f7c <UART_WaitOnFlagUntilTimeout+0x20>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001fc2:	4652      	mov	r2, sl
 8001fc4:	69cb      	ldr	r3, [r1, #28]
 8001fc6:	4213      	tst	r3, r2
 8001fc8:	d0d8      	beq.n	8001f7c <UART_WaitOnFlagUntilTimeout+0x20>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001fca:	620a      	str	r2, [r1, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fcc:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001fd6:	6839      	ldr	r1, [r7, #0]
 8001fd8:	4c1b      	ldr	r4, [pc, #108]	; (8002048 <UART_WaitOnFlagUntilTimeout+0xec>)
 8001fda:	680b      	ldr	r3, [r1, #0]
 8001fdc:	4023      	ands	r3, r4
 8001fde:	600b      	str	r3, [r1, #0]
 8001fe0:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fe4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fe8:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fec:	6839      	ldr	r1, [r7, #0]
 8001fee:	688b      	ldr	r3, [r1, #8]
 8001ff0:	4393      	bics	r3, r2
 8001ff2:	608b      	str	r3, [r1, #8]
 8001ff4:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 8001ff8:	2320      	movs	r3, #32
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001ffa:	327f      	adds	r2, #127	; 0x7f
          huart->gState = HAL_UART_STATE_READY;
 8001ffc:	67bb      	str	r3, [r7, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8001ffe:	67fb      	str	r3, [r7, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002000:	50bb      	str	r3, [r7, r2]
          __HAL_UNLOCK(huart);
 8002002:	2200      	movs	r2, #0
 8002004:	3354      	adds	r3, #84	; 0x54
          return HAL_TIMEOUT;
 8002006:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8002008:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 800200a:	e7c1      	b.n	8001f90 <UART_WaitOnFlagUntilTimeout+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800200c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002010:	2201      	movs	r2, #1
 8002012:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002016:	6839      	ldr	r1, [r7, #0]
 8002018:	4c0b      	ldr	r4, [pc, #44]	; (8002048 <UART_WaitOnFlagUntilTimeout+0xec>)
 800201a:	680b      	ldr	r3, [r1, #0]
 800201c:	4023      	ands	r3, r4
 800201e:	600b      	str	r3, [r1, #0]
 8002020:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002024:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002028:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800202c:	6839      	ldr	r1, [r7, #0]
 800202e:	688b      	ldr	r3, [r1, #8]
 8002030:	4393      	bics	r3, r2
 8002032:	608b      	str	r3, [r1, #8]
 8002034:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 8002038:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 800203a:	2200      	movs	r2, #0
        huart->gState = HAL_UART_STATE_READY;
 800203c:	67bb      	str	r3, [r7, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800203e:	67fb      	str	r3, [r7, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8002040:	3354      	adds	r3, #84	; 0x54
        return HAL_TIMEOUT;
 8002042:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 8002044:	54fa      	strb	r2, [r7, r3]
        return HAL_TIMEOUT;
 8002046:	e7a3      	b.n	8001f90 <UART_WaitOnFlagUntilTimeout+0x34>
 8002048:	fffffe5f 	.word	0xfffffe5f

0800204c <HAL_UART_Init>:
{
 800204c:	b570      	push	{r4, r5, r6, lr}
 800204e:	0004      	movs	r4, r0
 8002050:	b082      	sub	sp, #8
  if (huart == NULL)
 8002052:	2800      	cmp	r0, #0
 8002054:	d100      	bne.n	8002058 <HAL_UART_Init+0xc>
 8002056:	e0cf      	b.n	80021f8 <HAL_UART_Init+0x1ac>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002058:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800205a:	2b00      	cmp	r3, #0
 800205c:	d064      	beq.n	8002128 <HAL_UART_Init+0xdc>
  huart->gState = HAL_UART_STATE_BUSY;
 800205e:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002060:	2101      	movs	r1, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8002062:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8002064:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002066:	6920      	ldr	r0, [r4, #16]
  __HAL_UART_DISABLE(huart);
 8002068:	681a      	ldr	r2, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800206a:	69e5      	ldr	r5, [r4, #28]
  __HAL_UART_DISABLE(huart);
 800206c:	438a      	bics	r2, r1
 800206e:	601a      	str	r2, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002070:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002072:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002074:	4302      	orrs	r2, r0
 8002076:	6960      	ldr	r0, [r4, #20]
 8002078:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800207a:	486b      	ldr	r0, [pc, #428]	; (8002228 <HAL_UART_Init+0x1dc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800207c:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800207e:	4001      	ands	r1, r0
 8002080:	430a      	orrs	r2, r1
 8002082:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	4969      	ldr	r1, [pc, #420]	; (800222c <HAL_UART_Init+0x1e0>)
  tmpreg |= huart->Init.OneBitSampling;
 8002088:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800208a:	400a      	ands	r2, r1
 800208c:	68e1      	ldr	r1, [r4, #12]
 800208e:	430a      	orrs	r2, r1
 8002090:	605a      	str	r2, [r3, #4]
  tmpreg |= huart->Init.OneBitSampling;
 8002092:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002094:	6899      	ldr	r1, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8002096:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002098:	4865      	ldr	r0, [pc, #404]	; (8002230 <HAL_UART_Init+0x1e4>)
 800209a:	4001      	ands	r1, r0
 800209c:	430a      	orrs	r2, r1
 800209e:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80020a0:	4a64      	ldr	r2, [pc, #400]	; (8002234 <HAL_UART_Init+0x1e8>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d008      	beq.n	80020b8 <HAL_UART_Init+0x6c>
 80020a6:	4a64      	ldr	r2, [pc, #400]	; (8002238 <HAL_UART_Init+0x1ec>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d00c      	beq.n	80020c6 <HAL_UART_Init+0x7a>
  huart->RxISR = NULL;
 80020ac:	2300      	movs	r3, #0
    return HAL_ERROR;
 80020ae:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 80020b0:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 80020b2:	66a3      	str	r3, [r4, #104]	; 0x68
}
 80020b4:	b002      	add	sp, #8
 80020b6:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80020b8:	4b60      	ldr	r3, [pc, #384]	; (800223c <HAL_UART_Init+0x1f0>)
 80020ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020bc:	2303      	movs	r3, #3
 80020be:	4013      	ands	r3, r2
 80020c0:	3b01      	subs	r3, #1
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d935      	bls.n	8002132 <HAL_UART_Init+0xe6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020c6:	2380      	movs	r3, #128	; 0x80
 80020c8:	021b      	lsls	r3, r3, #8
 80020ca:	429d      	cmp	r5, r3
 80020cc:	d058      	beq.n	8002180 <HAL_UART_Init+0x134>
        pclk = HAL_RCC_GetPCLK1Freq();
 80020ce:	f7ff f9fd 	bl	80014cc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80020d2:	2800      	cmp	r0, #0
 80020d4:	d13b      	bne.n	800214e <HAL_UART_Init+0x102>
  huart->RxISR = NULL;
 80020d6:	2300      	movs	r3, #0
 80020d8:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 80020da:	66a3      	str	r3, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80020dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d14a      	bne.n	8002178 <HAL_UART_Init+0x12c>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80020e2:	6823      	ldr	r3, [r4, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80020e4:	2508      	movs	r5, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	4955      	ldr	r1, [pc, #340]	; (8002240 <HAL_UART_Init+0x1f4>)
 80020ea:	400a      	ands	r2, r1
  __HAL_UART_ENABLE(huart);
 80020ec:	2101      	movs	r1, #1
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80020ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80020f0:	689a      	ldr	r2, [r3, #8]
 80020f2:	43aa      	bics	r2, r5
 80020f4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	430a      	orrs	r2, r1
 80020fa:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020fc:	2380      	movs	r3, #128	; 0x80
 80020fe:	2200      	movs	r2, #0
 8002100:	50e2      	str	r2, [r4, r3]
  tickstart = HAL_GetTick();
 8002102:	f7fe fcdb 	bl	8000abc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002106:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002108:	0006      	movs	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	4215      	tst	r5, r2
 800210e:	d157      	bne.n	80021c0 <HAL_UART_Init+0x174>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	075b      	lsls	r3, r3, #29
 8002114:	d463      	bmi.n	80021de <HAL_UART_Init+0x192>
  huart->gState = HAL_UART_STATE_READY;
 8002116:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002118:	2274      	movs	r2, #116	; 0x74
  huart->gState = HAL_UART_STATE_READY;
 800211a:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800211c:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800211e:	2300      	movs	r3, #0
  return HAL_OK;
 8002120:	2000      	movs	r0, #0
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002122:	6623      	str	r3, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8002124:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8002126:	e7c5      	b.n	80020b4 <HAL_UART_Init+0x68>
    huart->Lock = HAL_UNLOCKED;
 8002128:	2274      	movs	r2, #116	; 0x74
 800212a:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 800212c:	f7fe fac0 	bl	80006b0 <HAL_UART_MspInit>
 8002130:	e795      	b.n	800205e <HAL_UART_Init+0x12>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002132:	2080      	movs	r0, #128	; 0x80
 8002134:	4a43      	ldr	r2, [pc, #268]	; (8002244 <HAL_UART_Init+0x1f8>)
 8002136:	0200      	lsls	r0, r0, #8
 8002138:	5cd3      	ldrb	r3, [r2, r3]
 800213a:	4285      	cmp	r5, r0
 800213c:	d061      	beq.n	8002202 <HAL_UART_Init+0x1b6>
    switch (clocksource)
 800213e:	2b04      	cmp	r3, #4
 8002140:	d05c      	beq.n	80021fc <HAL_UART_Init+0x1b0>
 8002142:	d83a      	bhi.n	80021ba <HAL_UART_Init+0x16e>
 8002144:	2b00      	cmp	r3, #0
 8002146:	d0c2      	beq.n	80020ce <HAL_UART_Init+0x82>
 8002148:	2b02      	cmp	r3, #2
 800214a:	d1af      	bne.n	80020ac <HAL_UART_Init+0x60>
        pclk = (uint32_t) HSI_VALUE;
 800214c:	483e      	ldr	r0, [pc, #248]	; (8002248 <HAL_UART_Init+0x1fc>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800214e:	6863      	ldr	r3, [r4, #4]
 8002150:	6861      	ldr	r1, [r4, #4]
 8002152:	085b      	lsrs	r3, r3, #1
 8002154:	1818      	adds	r0, r3, r0
 8002156:	f7fd ffe1 	bl	800011c <__udivsi3>
 800215a:	0400      	lsls	r0, r0, #16
 800215c:	0c00      	lsrs	r0, r0, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800215e:	0002      	movs	r2, r0
 8002160:	4b3a      	ldr	r3, [pc, #232]	; (800224c <HAL_UART_Init+0x200>)
 8002162:	3a10      	subs	r2, #16
 8002164:	429a      	cmp	r2, r3
 8002166:	d8a1      	bhi.n	80020ac <HAL_UART_Init+0x60>
        huart->Instance->BRR = usartdiv;
 8002168:	6823      	ldr	r3, [r4, #0]
 800216a:	60d8      	str	r0, [r3, #12]
  huart->RxISR = NULL;
 800216c:	2300      	movs	r3, #0
 800216e:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8002170:	66a3      	str	r3, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002172:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0b4      	beq.n	80020e2 <HAL_UART_Init+0x96>
    UART_AdvFeatureConfig(huart);
 8002178:	0020      	movs	r0, r4
 800217a:	f7ff fe87 	bl	8001e8c <UART_AdvFeatureConfig>
 800217e:	e7b0      	b.n	80020e2 <HAL_UART_Init+0x96>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002180:	f7ff f9a4 	bl	80014cc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002184:	2800      	cmp	r0, #0
 8002186:	d0a6      	beq.n	80020d6 <HAL_UART_Init+0x8a>
 8002188:	0040      	lsls	r0, r0, #1
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800218a:	6863      	ldr	r3, [r4, #4]
 800218c:	6861      	ldr	r1, [r4, #4]
 800218e:	085b      	lsrs	r3, r3, #1
 8002190:	1818      	adds	r0, r3, r0
 8002192:	f7fd ffc3 	bl	800011c <__udivsi3>
 8002196:	0403      	lsls	r3, r0, #16
 8002198:	0c1a      	lsrs	r2, r3, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800219a:	492c      	ldr	r1, [pc, #176]	; (800224c <HAL_UART_Init+0x200>)
 800219c:	3a10      	subs	r2, #16
 800219e:	428a      	cmp	r2, r1
 80021a0:	d900      	bls.n	80021a4 <HAL_UART_Init+0x158>
 80021a2:	e783      	b.n	80020ac <HAL_UART_Init+0x60>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80021a4:	4a2a      	ldr	r2, [pc, #168]	; (8002250 <HAL_UART_Init+0x204>)
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80021a6:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80021a8:	4010      	ands	r0, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80021aa:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 80021ac:	4318      	orrs	r0, r3
  huart->RxISR = NULL;
 80021ae:	2300      	movs	r3, #0
        huart->Instance->BRR = brrtemp;
 80021b0:	6822      	ldr	r2, [r4, #0]
 80021b2:	60d0      	str	r0, [r2, #12]
  huart->RxISR = NULL;
 80021b4:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 80021b6:	66a3      	str	r3, [r4, #104]	; 0x68
  return ret;
 80021b8:	e790      	b.n	80020dc <HAL_UART_Init+0x90>
    switch (clocksource)
 80021ba:	2b08      	cmp	r3, #8
 80021bc:	d0c7      	beq.n	800214e <HAL_UART_Init+0x102>
 80021be:	e775      	b.n	80020ac <HAL_UART_Init+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80021c0:	2180      	movs	r1, #128	; 0x80
 80021c2:	4b24      	ldr	r3, [pc, #144]	; (8002254 <HAL_UART_Init+0x208>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	0389      	lsls	r1, r1, #14
 80021ca:	0003      	movs	r3, r0
 80021cc:	0020      	movs	r0, r4
 80021ce:	f7ff fec5 	bl	8001f5c <UART_WaitOnFlagUntilTimeout>
 80021d2:	2800      	cmp	r0, #0
 80021d4:	d10e      	bne.n	80021f4 <HAL_UART_Init+0x1a8>
 80021d6:	6823      	ldr	r3, [r4, #0]
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	075b      	lsls	r3, r3, #29
 80021dc:	d59b      	bpl.n	8002116 <HAL_UART_Init+0xca>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80021de:	2180      	movs	r1, #128	; 0x80
 80021e0:	4b1c      	ldr	r3, [pc, #112]	; (8002254 <HAL_UART_Init+0x208>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	0020      	movs	r0, r4
 80021e8:	0033      	movs	r3, r6
 80021ea:	03c9      	lsls	r1, r1, #15
 80021ec:	f7ff feb6 	bl	8001f5c <UART_WaitOnFlagUntilTimeout>
 80021f0:	2800      	cmp	r0, #0
 80021f2:	d090      	beq.n	8002116 <HAL_UART_Init+0xca>
      return HAL_TIMEOUT;
 80021f4:	2003      	movs	r0, #3
 80021f6:	e75d      	b.n	80020b4 <HAL_UART_Init+0x68>
    return HAL_ERROR;
 80021f8:	2001      	movs	r0, #1
 80021fa:	e75b      	b.n	80020b4 <HAL_UART_Init+0x68>
        pclk = HAL_RCC_GetSysClockFreq();
 80021fc:	f7ff f926 	bl	800144c <HAL_RCC_GetSysClockFreq>
        break;
 8002200:	e767      	b.n	80020d2 <HAL_UART_Init+0x86>
    switch (clocksource)
 8002202:	2b04      	cmp	r3, #4
 8002204:	d007      	beq.n	8002216 <HAL_UART_Init+0x1ca>
 8002206:	d809      	bhi.n	800221c <HAL_UART_Init+0x1d0>
 8002208:	2b00      	cmp	r3, #0
 800220a:	d0b9      	beq.n	8002180 <HAL_UART_Init+0x134>
 800220c:	2b02      	cmp	r3, #2
 800220e:	d000      	beq.n	8002212 <HAL_UART_Init+0x1c6>
 8002210:	e74c      	b.n	80020ac <HAL_UART_Init+0x60>
 8002212:	4811      	ldr	r0, [pc, #68]	; (8002258 <HAL_UART_Init+0x20c>)
 8002214:	e7b9      	b.n	800218a <HAL_UART_Init+0x13e>
        pclk = HAL_RCC_GetSysClockFreq();
 8002216:	f7ff f919 	bl	800144c <HAL_RCC_GetSysClockFreq>
        break;
 800221a:	e7b3      	b.n	8002184 <HAL_UART_Init+0x138>
    switch (clocksource)
 800221c:	2080      	movs	r0, #128	; 0x80
 800221e:	0240      	lsls	r0, r0, #9
 8002220:	2b08      	cmp	r3, #8
 8002222:	d0b2      	beq.n	800218a <HAL_UART_Init+0x13e>
 8002224:	e742      	b.n	80020ac <HAL_UART_Init+0x60>
 8002226:	46c0      	nop			; (mov r8, r8)
 8002228:	efff69f3 	.word	0xefff69f3
 800222c:	ffffcfff 	.word	0xffffcfff
 8002230:	fffff4ff 	.word	0xfffff4ff
 8002234:	40013800 	.word	0x40013800
 8002238:	40004400 	.word	0x40004400
 800223c:	40021000 	.word	0x40021000
 8002240:	fffff7ff 	.word	0xfffff7ff
 8002244:	0800340c 	.word	0x0800340c
 8002248:	007a1200 	.word	0x007a1200
 800224c:	0000ffef 	.word	0x0000ffef
 8002250:	0000fff0 	.word	0x0000fff0
 8002254:	01ffffff 	.word	0x01ffffff
 8002258:	00f42400 	.word	0x00f42400

0800225c <__assert_func>:
 800225c:	b530      	push	{r4, r5, lr}
 800225e:	0014      	movs	r4, r2
 8002260:	001a      	movs	r2, r3
 8002262:	4b09      	ldr	r3, [pc, #36]	; (8002288 <__assert_func+0x2c>)
 8002264:	0005      	movs	r5, r0
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	b085      	sub	sp, #20
 800226a:	68d8      	ldr	r0, [r3, #12]
 800226c:	4b07      	ldr	r3, [pc, #28]	; (800228c <__assert_func+0x30>)
 800226e:	2c00      	cmp	r4, #0
 8002270:	d101      	bne.n	8002276 <__assert_func+0x1a>
 8002272:	4b07      	ldr	r3, [pc, #28]	; (8002290 <__assert_func+0x34>)
 8002274:	001c      	movs	r4, r3
 8002276:	9301      	str	r3, [sp, #4]
 8002278:	9100      	str	r1, [sp, #0]
 800227a:	002b      	movs	r3, r5
 800227c:	4905      	ldr	r1, [pc, #20]	; (8002294 <__assert_func+0x38>)
 800227e:	9402      	str	r4, [sp, #8]
 8002280:	f000 f810 	bl	80022a4 <fiprintf>
 8002284:	f000 fcc0 	bl	8002c08 <abort>
 8002288:	20000020 	.word	0x20000020
 800228c:	0800340f 	.word	0x0800340f
 8002290:	0800344a 	.word	0x0800344a
 8002294:	0800341c 	.word	0x0800341c

08002298 <__errno>:
 8002298:	4b01      	ldr	r3, [pc, #4]	; (80022a0 <__errno+0x8>)
 800229a:	6818      	ldr	r0, [r3, #0]
 800229c:	4770      	bx	lr
 800229e:	46c0      	nop			; (mov r8, r8)
 80022a0:	20000020 	.word	0x20000020

080022a4 <fiprintf>:
 80022a4:	b40e      	push	{r1, r2, r3}
 80022a6:	b503      	push	{r0, r1, lr}
 80022a8:	0001      	movs	r1, r0
 80022aa:	ab03      	add	r3, sp, #12
 80022ac:	4804      	ldr	r0, [pc, #16]	; (80022c0 <fiprintf+0x1c>)
 80022ae:	cb04      	ldmia	r3!, {r2}
 80022b0:	6800      	ldr	r0, [r0, #0]
 80022b2:	9301      	str	r3, [sp, #4]
 80022b4:	f000 f90c 	bl	80024d0 <_vfiprintf_r>
 80022b8:	b002      	add	sp, #8
 80022ba:	bc08      	pop	{r3}
 80022bc:	b003      	add	sp, #12
 80022be:	4718      	bx	r3
 80022c0:	20000020 	.word	0x20000020

080022c4 <__libc_init_array>:
 80022c4:	b570      	push	{r4, r5, r6, lr}
 80022c6:	2600      	movs	r6, #0
 80022c8:	4d0c      	ldr	r5, [pc, #48]	; (80022fc <__libc_init_array+0x38>)
 80022ca:	4c0d      	ldr	r4, [pc, #52]	; (8002300 <__libc_init_array+0x3c>)
 80022cc:	1b64      	subs	r4, r4, r5
 80022ce:	10a4      	asrs	r4, r4, #2
 80022d0:	42a6      	cmp	r6, r4
 80022d2:	d109      	bne.n	80022e8 <__libc_init_array+0x24>
 80022d4:	2600      	movs	r6, #0
 80022d6:	f001 f801 	bl	80032dc <_init>
 80022da:	4d0a      	ldr	r5, [pc, #40]	; (8002304 <__libc_init_array+0x40>)
 80022dc:	4c0a      	ldr	r4, [pc, #40]	; (8002308 <__libc_init_array+0x44>)
 80022de:	1b64      	subs	r4, r4, r5
 80022e0:	10a4      	asrs	r4, r4, #2
 80022e2:	42a6      	cmp	r6, r4
 80022e4:	d105      	bne.n	80022f2 <__libc_init_array+0x2e>
 80022e6:	bd70      	pop	{r4, r5, r6, pc}
 80022e8:	00b3      	lsls	r3, r6, #2
 80022ea:	58eb      	ldr	r3, [r5, r3]
 80022ec:	4798      	blx	r3
 80022ee:	3601      	adds	r6, #1
 80022f0:	e7ee      	b.n	80022d0 <__libc_init_array+0xc>
 80022f2:	00b3      	lsls	r3, r6, #2
 80022f4:	58eb      	ldr	r3, [r5, r3]
 80022f6:	4798      	blx	r3
 80022f8:	3601      	adds	r6, #1
 80022fa:	e7f2      	b.n	80022e2 <__libc_init_array+0x1e>
 80022fc:	080034e4 	.word	0x080034e4
 8002300:	080034e4 	.word	0x080034e4
 8002304:	080034e4 	.word	0x080034e4
 8002308:	080034e8 	.word	0x080034e8

0800230c <malloc>:
 800230c:	b510      	push	{r4, lr}
 800230e:	4b03      	ldr	r3, [pc, #12]	; (800231c <malloc+0x10>)
 8002310:	0001      	movs	r1, r0
 8002312:	6818      	ldr	r0, [r3, #0]
 8002314:	f000 f856 	bl	80023c4 <_malloc_r>
 8002318:	bd10      	pop	{r4, pc}
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	20000020 	.word	0x20000020

08002320 <memset>:
 8002320:	0003      	movs	r3, r0
 8002322:	1882      	adds	r2, r0, r2
 8002324:	4293      	cmp	r3, r2
 8002326:	d100      	bne.n	800232a <memset+0xa>
 8002328:	4770      	bx	lr
 800232a:	7019      	strb	r1, [r3, #0]
 800232c:	3301      	adds	r3, #1
 800232e:	e7f9      	b.n	8002324 <memset+0x4>

08002330 <_free_r>:
 8002330:	b570      	push	{r4, r5, r6, lr}
 8002332:	0005      	movs	r5, r0
 8002334:	2900      	cmp	r1, #0
 8002336:	d010      	beq.n	800235a <_free_r+0x2a>
 8002338:	1f0c      	subs	r4, r1, #4
 800233a:	6823      	ldr	r3, [r4, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	da00      	bge.n	8002342 <_free_r+0x12>
 8002340:	18e4      	adds	r4, r4, r3
 8002342:	0028      	movs	r0, r5
 8002344:	f000 feb2 	bl	80030ac <__malloc_lock>
 8002348:	4a1d      	ldr	r2, [pc, #116]	; (80023c0 <_free_r+0x90>)
 800234a:	6813      	ldr	r3, [r2, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d105      	bne.n	800235c <_free_r+0x2c>
 8002350:	6063      	str	r3, [r4, #4]
 8002352:	6014      	str	r4, [r2, #0]
 8002354:	0028      	movs	r0, r5
 8002356:	f000 feb1 	bl	80030bc <__malloc_unlock>
 800235a:	bd70      	pop	{r4, r5, r6, pc}
 800235c:	42a3      	cmp	r3, r4
 800235e:	d908      	bls.n	8002372 <_free_r+0x42>
 8002360:	6821      	ldr	r1, [r4, #0]
 8002362:	1860      	adds	r0, r4, r1
 8002364:	4283      	cmp	r3, r0
 8002366:	d1f3      	bne.n	8002350 <_free_r+0x20>
 8002368:	6818      	ldr	r0, [r3, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	1841      	adds	r1, r0, r1
 800236e:	6021      	str	r1, [r4, #0]
 8002370:	e7ee      	b.n	8002350 <_free_r+0x20>
 8002372:	001a      	movs	r2, r3
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <_free_r+0x4e>
 800237a:	42a3      	cmp	r3, r4
 800237c:	d9f9      	bls.n	8002372 <_free_r+0x42>
 800237e:	6811      	ldr	r1, [r2, #0]
 8002380:	1850      	adds	r0, r2, r1
 8002382:	42a0      	cmp	r0, r4
 8002384:	d10b      	bne.n	800239e <_free_r+0x6e>
 8002386:	6820      	ldr	r0, [r4, #0]
 8002388:	1809      	adds	r1, r1, r0
 800238a:	1850      	adds	r0, r2, r1
 800238c:	6011      	str	r1, [r2, #0]
 800238e:	4283      	cmp	r3, r0
 8002390:	d1e0      	bne.n	8002354 <_free_r+0x24>
 8002392:	6818      	ldr	r0, [r3, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	1841      	adds	r1, r0, r1
 8002398:	6011      	str	r1, [r2, #0]
 800239a:	6053      	str	r3, [r2, #4]
 800239c:	e7da      	b.n	8002354 <_free_r+0x24>
 800239e:	42a0      	cmp	r0, r4
 80023a0:	d902      	bls.n	80023a8 <_free_r+0x78>
 80023a2:	230c      	movs	r3, #12
 80023a4:	602b      	str	r3, [r5, #0]
 80023a6:	e7d5      	b.n	8002354 <_free_r+0x24>
 80023a8:	6821      	ldr	r1, [r4, #0]
 80023aa:	1860      	adds	r0, r4, r1
 80023ac:	4283      	cmp	r3, r0
 80023ae:	d103      	bne.n	80023b8 <_free_r+0x88>
 80023b0:	6818      	ldr	r0, [r3, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	1841      	adds	r1, r0, r1
 80023b6:	6021      	str	r1, [r4, #0]
 80023b8:	6063      	str	r3, [r4, #4]
 80023ba:	6054      	str	r4, [r2, #4]
 80023bc:	e7ca      	b.n	8002354 <_free_r+0x24>
 80023be:	46c0      	nop			; (mov r8, r8)
 80023c0:	20000144 	.word	0x20000144

080023c4 <_malloc_r>:
 80023c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023c6:	2303      	movs	r3, #3
 80023c8:	1ccd      	adds	r5, r1, #3
 80023ca:	439d      	bics	r5, r3
 80023cc:	3508      	adds	r5, #8
 80023ce:	0006      	movs	r6, r0
 80023d0:	2d0c      	cmp	r5, #12
 80023d2:	d21f      	bcs.n	8002414 <_malloc_r+0x50>
 80023d4:	250c      	movs	r5, #12
 80023d6:	42a9      	cmp	r1, r5
 80023d8:	d81e      	bhi.n	8002418 <_malloc_r+0x54>
 80023da:	0030      	movs	r0, r6
 80023dc:	f000 fe66 	bl	80030ac <__malloc_lock>
 80023e0:	4925      	ldr	r1, [pc, #148]	; (8002478 <_malloc_r+0xb4>)
 80023e2:	680a      	ldr	r2, [r1, #0]
 80023e4:	0014      	movs	r4, r2
 80023e6:	2c00      	cmp	r4, #0
 80023e8:	d11a      	bne.n	8002420 <_malloc_r+0x5c>
 80023ea:	4f24      	ldr	r7, [pc, #144]	; (800247c <_malloc_r+0xb8>)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d104      	bne.n	80023fc <_malloc_r+0x38>
 80023f2:	0021      	movs	r1, r4
 80023f4:	0030      	movs	r0, r6
 80023f6:	f000 fb27 	bl	8002a48 <_sbrk_r>
 80023fa:	6038      	str	r0, [r7, #0]
 80023fc:	0029      	movs	r1, r5
 80023fe:	0030      	movs	r0, r6
 8002400:	f000 fb22 	bl	8002a48 <_sbrk_r>
 8002404:	1c43      	adds	r3, r0, #1
 8002406:	d12b      	bne.n	8002460 <_malloc_r+0x9c>
 8002408:	230c      	movs	r3, #12
 800240a:	0030      	movs	r0, r6
 800240c:	6033      	str	r3, [r6, #0]
 800240e:	f000 fe55 	bl	80030bc <__malloc_unlock>
 8002412:	e003      	b.n	800241c <_malloc_r+0x58>
 8002414:	2d00      	cmp	r5, #0
 8002416:	dade      	bge.n	80023d6 <_malloc_r+0x12>
 8002418:	230c      	movs	r3, #12
 800241a:	6033      	str	r3, [r6, #0]
 800241c:	2000      	movs	r0, #0
 800241e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002420:	6823      	ldr	r3, [r4, #0]
 8002422:	1b5b      	subs	r3, r3, r5
 8002424:	d419      	bmi.n	800245a <_malloc_r+0x96>
 8002426:	2b0b      	cmp	r3, #11
 8002428:	d903      	bls.n	8002432 <_malloc_r+0x6e>
 800242a:	6023      	str	r3, [r4, #0]
 800242c:	18e4      	adds	r4, r4, r3
 800242e:	6025      	str	r5, [r4, #0]
 8002430:	e003      	b.n	800243a <_malloc_r+0x76>
 8002432:	6863      	ldr	r3, [r4, #4]
 8002434:	42a2      	cmp	r2, r4
 8002436:	d10e      	bne.n	8002456 <_malloc_r+0x92>
 8002438:	600b      	str	r3, [r1, #0]
 800243a:	0030      	movs	r0, r6
 800243c:	f000 fe3e 	bl	80030bc <__malloc_unlock>
 8002440:	0020      	movs	r0, r4
 8002442:	2207      	movs	r2, #7
 8002444:	300b      	adds	r0, #11
 8002446:	1d23      	adds	r3, r4, #4
 8002448:	4390      	bics	r0, r2
 800244a:	1ac2      	subs	r2, r0, r3
 800244c:	4298      	cmp	r0, r3
 800244e:	d0e6      	beq.n	800241e <_malloc_r+0x5a>
 8002450:	1a1b      	subs	r3, r3, r0
 8002452:	50a3      	str	r3, [r4, r2]
 8002454:	e7e3      	b.n	800241e <_malloc_r+0x5a>
 8002456:	6053      	str	r3, [r2, #4]
 8002458:	e7ef      	b.n	800243a <_malloc_r+0x76>
 800245a:	0022      	movs	r2, r4
 800245c:	6864      	ldr	r4, [r4, #4]
 800245e:	e7c2      	b.n	80023e6 <_malloc_r+0x22>
 8002460:	2303      	movs	r3, #3
 8002462:	1cc4      	adds	r4, r0, #3
 8002464:	439c      	bics	r4, r3
 8002466:	42a0      	cmp	r0, r4
 8002468:	d0e1      	beq.n	800242e <_malloc_r+0x6a>
 800246a:	1a21      	subs	r1, r4, r0
 800246c:	0030      	movs	r0, r6
 800246e:	f000 faeb 	bl	8002a48 <_sbrk_r>
 8002472:	1c43      	adds	r3, r0, #1
 8002474:	d1db      	bne.n	800242e <_malloc_r+0x6a>
 8002476:	e7c7      	b.n	8002408 <_malloc_r+0x44>
 8002478:	20000144 	.word	0x20000144
 800247c:	20000148 	.word	0x20000148

08002480 <__sfputc_r>:
 8002480:	6893      	ldr	r3, [r2, #8]
 8002482:	b510      	push	{r4, lr}
 8002484:	3b01      	subs	r3, #1
 8002486:	6093      	str	r3, [r2, #8]
 8002488:	2b00      	cmp	r3, #0
 800248a:	da04      	bge.n	8002496 <__sfputc_r+0x16>
 800248c:	6994      	ldr	r4, [r2, #24]
 800248e:	42a3      	cmp	r3, r4
 8002490:	db07      	blt.n	80024a2 <__sfputc_r+0x22>
 8002492:	290a      	cmp	r1, #10
 8002494:	d005      	beq.n	80024a2 <__sfputc_r+0x22>
 8002496:	6813      	ldr	r3, [r2, #0]
 8002498:	1c58      	adds	r0, r3, #1
 800249a:	6010      	str	r0, [r2, #0]
 800249c:	7019      	strb	r1, [r3, #0]
 800249e:	0008      	movs	r0, r1
 80024a0:	bd10      	pop	{r4, pc}
 80024a2:	f000 fae3 	bl	8002a6c <__swbuf_r>
 80024a6:	0001      	movs	r1, r0
 80024a8:	e7f9      	b.n	800249e <__sfputc_r+0x1e>

080024aa <__sfputs_r>:
 80024aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ac:	0006      	movs	r6, r0
 80024ae:	000f      	movs	r7, r1
 80024b0:	0014      	movs	r4, r2
 80024b2:	18d5      	adds	r5, r2, r3
 80024b4:	42ac      	cmp	r4, r5
 80024b6:	d101      	bne.n	80024bc <__sfputs_r+0x12>
 80024b8:	2000      	movs	r0, #0
 80024ba:	e007      	b.n	80024cc <__sfputs_r+0x22>
 80024bc:	7821      	ldrb	r1, [r4, #0]
 80024be:	003a      	movs	r2, r7
 80024c0:	0030      	movs	r0, r6
 80024c2:	f7ff ffdd 	bl	8002480 <__sfputc_r>
 80024c6:	3401      	adds	r4, #1
 80024c8:	1c43      	adds	r3, r0, #1
 80024ca:	d1f3      	bne.n	80024b4 <__sfputs_r+0xa>
 80024cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080024d0 <_vfiprintf_r>:
 80024d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024d2:	b0a1      	sub	sp, #132	; 0x84
 80024d4:	0006      	movs	r6, r0
 80024d6:	000c      	movs	r4, r1
 80024d8:	001f      	movs	r7, r3
 80024da:	9203      	str	r2, [sp, #12]
 80024dc:	2800      	cmp	r0, #0
 80024de:	d004      	beq.n	80024ea <_vfiprintf_r+0x1a>
 80024e0:	6983      	ldr	r3, [r0, #24]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <_vfiprintf_r+0x1a>
 80024e6:	f000 fcc5 	bl	8002e74 <__sinit>
 80024ea:	4b8e      	ldr	r3, [pc, #568]	; (8002724 <_vfiprintf_r+0x254>)
 80024ec:	429c      	cmp	r4, r3
 80024ee:	d11c      	bne.n	800252a <_vfiprintf_r+0x5a>
 80024f0:	6874      	ldr	r4, [r6, #4]
 80024f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80024f4:	07db      	lsls	r3, r3, #31
 80024f6:	d405      	bmi.n	8002504 <_vfiprintf_r+0x34>
 80024f8:	89a3      	ldrh	r3, [r4, #12]
 80024fa:	059b      	lsls	r3, r3, #22
 80024fc:	d402      	bmi.n	8002504 <_vfiprintf_r+0x34>
 80024fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002500:	f000 fd59 	bl	8002fb6 <__retarget_lock_acquire_recursive>
 8002504:	89a3      	ldrh	r3, [r4, #12]
 8002506:	071b      	lsls	r3, r3, #28
 8002508:	d502      	bpl.n	8002510 <_vfiprintf_r+0x40>
 800250a:	6923      	ldr	r3, [r4, #16]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d11d      	bne.n	800254c <_vfiprintf_r+0x7c>
 8002510:	0021      	movs	r1, r4
 8002512:	0030      	movs	r0, r6
 8002514:	f000 fb00 	bl	8002b18 <__swsetup_r>
 8002518:	2800      	cmp	r0, #0
 800251a:	d017      	beq.n	800254c <_vfiprintf_r+0x7c>
 800251c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800251e:	07db      	lsls	r3, r3, #31
 8002520:	d50d      	bpl.n	800253e <_vfiprintf_r+0x6e>
 8002522:	2001      	movs	r0, #1
 8002524:	4240      	negs	r0, r0
 8002526:	b021      	add	sp, #132	; 0x84
 8002528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800252a:	4b7f      	ldr	r3, [pc, #508]	; (8002728 <_vfiprintf_r+0x258>)
 800252c:	429c      	cmp	r4, r3
 800252e:	d101      	bne.n	8002534 <_vfiprintf_r+0x64>
 8002530:	68b4      	ldr	r4, [r6, #8]
 8002532:	e7de      	b.n	80024f2 <_vfiprintf_r+0x22>
 8002534:	4b7d      	ldr	r3, [pc, #500]	; (800272c <_vfiprintf_r+0x25c>)
 8002536:	429c      	cmp	r4, r3
 8002538:	d1db      	bne.n	80024f2 <_vfiprintf_r+0x22>
 800253a:	68f4      	ldr	r4, [r6, #12]
 800253c:	e7d9      	b.n	80024f2 <_vfiprintf_r+0x22>
 800253e:	89a3      	ldrh	r3, [r4, #12]
 8002540:	059b      	lsls	r3, r3, #22
 8002542:	d4ee      	bmi.n	8002522 <_vfiprintf_r+0x52>
 8002544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002546:	f000 fd37 	bl	8002fb8 <__retarget_lock_release_recursive>
 800254a:	e7ea      	b.n	8002522 <_vfiprintf_r+0x52>
 800254c:	2300      	movs	r3, #0
 800254e:	ad08      	add	r5, sp, #32
 8002550:	616b      	str	r3, [r5, #20]
 8002552:	3320      	adds	r3, #32
 8002554:	766b      	strb	r3, [r5, #25]
 8002556:	3310      	adds	r3, #16
 8002558:	76ab      	strb	r3, [r5, #26]
 800255a:	9707      	str	r7, [sp, #28]
 800255c:	9f03      	ldr	r7, [sp, #12]
 800255e:	783b      	ldrb	r3, [r7, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <_vfiprintf_r+0x98>
 8002564:	2b25      	cmp	r3, #37	; 0x25
 8002566:	d14e      	bne.n	8002606 <_vfiprintf_r+0x136>
 8002568:	9b03      	ldr	r3, [sp, #12]
 800256a:	1afb      	subs	r3, r7, r3
 800256c:	9305      	str	r3, [sp, #20]
 800256e:	9b03      	ldr	r3, [sp, #12]
 8002570:	429f      	cmp	r7, r3
 8002572:	d00d      	beq.n	8002590 <_vfiprintf_r+0xc0>
 8002574:	9b05      	ldr	r3, [sp, #20]
 8002576:	0021      	movs	r1, r4
 8002578:	0030      	movs	r0, r6
 800257a:	9a03      	ldr	r2, [sp, #12]
 800257c:	f7ff ff95 	bl	80024aa <__sfputs_r>
 8002580:	1c43      	adds	r3, r0, #1
 8002582:	d100      	bne.n	8002586 <_vfiprintf_r+0xb6>
 8002584:	e0b5      	b.n	80026f2 <_vfiprintf_r+0x222>
 8002586:	696a      	ldr	r2, [r5, #20]
 8002588:	9b05      	ldr	r3, [sp, #20]
 800258a:	4694      	mov	ip, r2
 800258c:	4463      	add	r3, ip
 800258e:	616b      	str	r3, [r5, #20]
 8002590:	783b      	ldrb	r3, [r7, #0]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d100      	bne.n	8002598 <_vfiprintf_r+0xc8>
 8002596:	e0ac      	b.n	80026f2 <_vfiprintf_r+0x222>
 8002598:	2201      	movs	r2, #1
 800259a:	1c7b      	adds	r3, r7, #1
 800259c:	9303      	str	r3, [sp, #12]
 800259e:	2300      	movs	r3, #0
 80025a0:	4252      	negs	r2, r2
 80025a2:	606a      	str	r2, [r5, #4]
 80025a4:	a904      	add	r1, sp, #16
 80025a6:	3254      	adds	r2, #84	; 0x54
 80025a8:	1852      	adds	r2, r2, r1
 80025aa:	602b      	str	r3, [r5, #0]
 80025ac:	60eb      	str	r3, [r5, #12]
 80025ae:	60ab      	str	r3, [r5, #8]
 80025b0:	7013      	strb	r3, [r2, #0]
 80025b2:	65ab      	str	r3, [r5, #88]	; 0x58
 80025b4:	9b03      	ldr	r3, [sp, #12]
 80025b6:	2205      	movs	r2, #5
 80025b8:	7819      	ldrb	r1, [r3, #0]
 80025ba:	485d      	ldr	r0, [pc, #372]	; (8002730 <_vfiprintf_r+0x260>)
 80025bc:	f000 fd6a 	bl	8003094 <memchr>
 80025c0:	9b03      	ldr	r3, [sp, #12]
 80025c2:	1c5f      	adds	r7, r3, #1
 80025c4:	2800      	cmp	r0, #0
 80025c6:	d120      	bne.n	800260a <_vfiprintf_r+0x13a>
 80025c8:	682a      	ldr	r2, [r5, #0]
 80025ca:	06d3      	lsls	r3, r2, #27
 80025cc:	d504      	bpl.n	80025d8 <_vfiprintf_r+0x108>
 80025ce:	2353      	movs	r3, #83	; 0x53
 80025d0:	a904      	add	r1, sp, #16
 80025d2:	185b      	adds	r3, r3, r1
 80025d4:	2120      	movs	r1, #32
 80025d6:	7019      	strb	r1, [r3, #0]
 80025d8:	0713      	lsls	r3, r2, #28
 80025da:	d504      	bpl.n	80025e6 <_vfiprintf_r+0x116>
 80025dc:	2353      	movs	r3, #83	; 0x53
 80025de:	a904      	add	r1, sp, #16
 80025e0:	185b      	adds	r3, r3, r1
 80025e2:	212b      	movs	r1, #43	; 0x2b
 80025e4:	7019      	strb	r1, [r3, #0]
 80025e6:	9b03      	ldr	r3, [sp, #12]
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b2a      	cmp	r3, #42	; 0x2a
 80025ec:	d016      	beq.n	800261c <_vfiprintf_r+0x14c>
 80025ee:	2100      	movs	r1, #0
 80025f0:	68eb      	ldr	r3, [r5, #12]
 80025f2:	9f03      	ldr	r7, [sp, #12]
 80025f4:	783a      	ldrb	r2, [r7, #0]
 80025f6:	1c78      	adds	r0, r7, #1
 80025f8:	3a30      	subs	r2, #48	; 0x30
 80025fa:	4684      	mov	ip, r0
 80025fc:	2a09      	cmp	r2, #9
 80025fe:	d94f      	bls.n	80026a0 <_vfiprintf_r+0x1d0>
 8002600:	2900      	cmp	r1, #0
 8002602:	d111      	bne.n	8002628 <_vfiprintf_r+0x158>
 8002604:	e017      	b.n	8002636 <_vfiprintf_r+0x166>
 8002606:	3701      	adds	r7, #1
 8002608:	e7a9      	b.n	800255e <_vfiprintf_r+0x8e>
 800260a:	4b49      	ldr	r3, [pc, #292]	; (8002730 <_vfiprintf_r+0x260>)
 800260c:	682a      	ldr	r2, [r5, #0]
 800260e:	1ac0      	subs	r0, r0, r3
 8002610:	2301      	movs	r3, #1
 8002612:	4083      	lsls	r3, r0
 8002614:	4313      	orrs	r3, r2
 8002616:	602b      	str	r3, [r5, #0]
 8002618:	9703      	str	r7, [sp, #12]
 800261a:	e7cb      	b.n	80025b4 <_vfiprintf_r+0xe4>
 800261c:	9b07      	ldr	r3, [sp, #28]
 800261e:	1d19      	adds	r1, r3, #4
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	9107      	str	r1, [sp, #28]
 8002624:	2b00      	cmp	r3, #0
 8002626:	db01      	blt.n	800262c <_vfiprintf_r+0x15c>
 8002628:	930b      	str	r3, [sp, #44]	; 0x2c
 800262a:	e004      	b.n	8002636 <_vfiprintf_r+0x166>
 800262c:	425b      	negs	r3, r3
 800262e:	60eb      	str	r3, [r5, #12]
 8002630:	2302      	movs	r3, #2
 8002632:	4313      	orrs	r3, r2
 8002634:	602b      	str	r3, [r5, #0]
 8002636:	783b      	ldrb	r3, [r7, #0]
 8002638:	2b2e      	cmp	r3, #46	; 0x2e
 800263a:	d10a      	bne.n	8002652 <_vfiprintf_r+0x182>
 800263c:	787b      	ldrb	r3, [r7, #1]
 800263e:	2b2a      	cmp	r3, #42	; 0x2a
 8002640:	d137      	bne.n	80026b2 <_vfiprintf_r+0x1e2>
 8002642:	9b07      	ldr	r3, [sp, #28]
 8002644:	3702      	adds	r7, #2
 8002646:	1d1a      	adds	r2, r3, #4
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	9207      	str	r2, [sp, #28]
 800264c:	2b00      	cmp	r3, #0
 800264e:	db2d      	blt.n	80026ac <_vfiprintf_r+0x1dc>
 8002650:	9309      	str	r3, [sp, #36]	; 0x24
 8002652:	2203      	movs	r2, #3
 8002654:	7839      	ldrb	r1, [r7, #0]
 8002656:	4837      	ldr	r0, [pc, #220]	; (8002734 <_vfiprintf_r+0x264>)
 8002658:	f000 fd1c 	bl	8003094 <memchr>
 800265c:	2800      	cmp	r0, #0
 800265e:	d007      	beq.n	8002670 <_vfiprintf_r+0x1a0>
 8002660:	4b34      	ldr	r3, [pc, #208]	; (8002734 <_vfiprintf_r+0x264>)
 8002662:	682a      	ldr	r2, [r5, #0]
 8002664:	1ac0      	subs	r0, r0, r3
 8002666:	2340      	movs	r3, #64	; 0x40
 8002668:	4083      	lsls	r3, r0
 800266a:	4313      	orrs	r3, r2
 800266c:	3701      	adds	r7, #1
 800266e:	602b      	str	r3, [r5, #0]
 8002670:	7839      	ldrb	r1, [r7, #0]
 8002672:	1c7b      	adds	r3, r7, #1
 8002674:	2206      	movs	r2, #6
 8002676:	4830      	ldr	r0, [pc, #192]	; (8002738 <_vfiprintf_r+0x268>)
 8002678:	9303      	str	r3, [sp, #12]
 800267a:	7629      	strb	r1, [r5, #24]
 800267c:	f000 fd0a 	bl	8003094 <memchr>
 8002680:	2800      	cmp	r0, #0
 8002682:	d045      	beq.n	8002710 <_vfiprintf_r+0x240>
 8002684:	4b2d      	ldr	r3, [pc, #180]	; (800273c <_vfiprintf_r+0x26c>)
 8002686:	2b00      	cmp	r3, #0
 8002688:	d127      	bne.n	80026da <_vfiprintf_r+0x20a>
 800268a:	2207      	movs	r2, #7
 800268c:	9b07      	ldr	r3, [sp, #28]
 800268e:	3307      	adds	r3, #7
 8002690:	4393      	bics	r3, r2
 8002692:	3308      	adds	r3, #8
 8002694:	9307      	str	r3, [sp, #28]
 8002696:	696b      	ldr	r3, [r5, #20]
 8002698:	9a04      	ldr	r2, [sp, #16]
 800269a:	189b      	adds	r3, r3, r2
 800269c:	616b      	str	r3, [r5, #20]
 800269e:	e75d      	b.n	800255c <_vfiprintf_r+0x8c>
 80026a0:	210a      	movs	r1, #10
 80026a2:	434b      	muls	r3, r1
 80026a4:	4667      	mov	r7, ip
 80026a6:	189b      	adds	r3, r3, r2
 80026a8:	3909      	subs	r1, #9
 80026aa:	e7a3      	b.n	80025f4 <_vfiprintf_r+0x124>
 80026ac:	2301      	movs	r3, #1
 80026ae:	425b      	negs	r3, r3
 80026b0:	e7ce      	b.n	8002650 <_vfiprintf_r+0x180>
 80026b2:	2300      	movs	r3, #0
 80026b4:	001a      	movs	r2, r3
 80026b6:	3701      	adds	r7, #1
 80026b8:	606b      	str	r3, [r5, #4]
 80026ba:	7839      	ldrb	r1, [r7, #0]
 80026bc:	1c78      	adds	r0, r7, #1
 80026be:	3930      	subs	r1, #48	; 0x30
 80026c0:	4684      	mov	ip, r0
 80026c2:	2909      	cmp	r1, #9
 80026c4:	d903      	bls.n	80026ce <_vfiprintf_r+0x1fe>
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0c3      	beq.n	8002652 <_vfiprintf_r+0x182>
 80026ca:	9209      	str	r2, [sp, #36]	; 0x24
 80026cc:	e7c1      	b.n	8002652 <_vfiprintf_r+0x182>
 80026ce:	230a      	movs	r3, #10
 80026d0:	435a      	muls	r2, r3
 80026d2:	4667      	mov	r7, ip
 80026d4:	1852      	adds	r2, r2, r1
 80026d6:	3b09      	subs	r3, #9
 80026d8:	e7ef      	b.n	80026ba <_vfiprintf_r+0x1ea>
 80026da:	ab07      	add	r3, sp, #28
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	0022      	movs	r2, r4
 80026e0:	0029      	movs	r1, r5
 80026e2:	0030      	movs	r0, r6
 80026e4:	4b16      	ldr	r3, [pc, #88]	; (8002740 <_vfiprintf_r+0x270>)
 80026e6:	e000      	b.n	80026ea <_vfiprintf_r+0x21a>
 80026e8:	bf00      	nop
 80026ea:	9004      	str	r0, [sp, #16]
 80026ec:	9b04      	ldr	r3, [sp, #16]
 80026ee:	3301      	adds	r3, #1
 80026f0:	d1d1      	bne.n	8002696 <_vfiprintf_r+0x1c6>
 80026f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80026f4:	07db      	lsls	r3, r3, #31
 80026f6:	d405      	bmi.n	8002704 <_vfiprintf_r+0x234>
 80026f8:	89a3      	ldrh	r3, [r4, #12]
 80026fa:	059b      	lsls	r3, r3, #22
 80026fc:	d402      	bmi.n	8002704 <_vfiprintf_r+0x234>
 80026fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002700:	f000 fc5a 	bl	8002fb8 <__retarget_lock_release_recursive>
 8002704:	89a3      	ldrh	r3, [r4, #12]
 8002706:	065b      	lsls	r3, r3, #25
 8002708:	d500      	bpl.n	800270c <_vfiprintf_r+0x23c>
 800270a:	e70a      	b.n	8002522 <_vfiprintf_r+0x52>
 800270c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800270e:	e70a      	b.n	8002526 <_vfiprintf_r+0x56>
 8002710:	ab07      	add	r3, sp, #28
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	0022      	movs	r2, r4
 8002716:	0029      	movs	r1, r5
 8002718:	0030      	movs	r0, r6
 800271a:	4b09      	ldr	r3, [pc, #36]	; (8002740 <_vfiprintf_r+0x270>)
 800271c:	f000 f882 	bl	8002824 <_printf_i>
 8002720:	e7e3      	b.n	80026ea <_vfiprintf_r+0x21a>
 8002722:	46c0      	nop			; (mov r8, r8)
 8002724:	080034a4 	.word	0x080034a4
 8002728:	080034c4 	.word	0x080034c4
 800272c:	08003484 	.word	0x08003484
 8002730:	08003450 	.word	0x08003450
 8002734:	08003456 	.word	0x08003456
 8002738:	0800345a 	.word	0x0800345a
 800273c:	00000000 	.word	0x00000000
 8002740:	080024ab 	.word	0x080024ab

08002744 <_printf_common>:
 8002744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002746:	0015      	movs	r5, r2
 8002748:	9301      	str	r3, [sp, #4]
 800274a:	688a      	ldr	r2, [r1, #8]
 800274c:	690b      	ldr	r3, [r1, #16]
 800274e:	000c      	movs	r4, r1
 8002750:	9000      	str	r0, [sp, #0]
 8002752:	4293      	cmp	r3, r2
 8002754:	da00      	bge.n	8002758 <_printf_common+0x14>
 8002756:	0013      	movs	r3, r2
 8002758:	0022      	movs	r2, r4
 800275a:	602b      	str	r3, [r5, #0]
 800275c:	3243      	adds	r2, #67	; 0x43
 800275e:	7812      	ldrb	r2, [r2, #0]
 8002760:	2a00      	cmp	r2, #0
 8002762:	d001      	beq.n	8002768 <_printf_common+0x24>
 8002764:	3301      	adds	r3, #1
 8002766:	602b      	str	r3, [r5, #0]
 8002768:	6823      	ldr	r3, [r4, #0]
 800276a:	069b      	lsls	r3, r3, #26
 800276c:	d502      	bpl.n	8002774 <_printf_common+0x30>
 800276e:	682b      	ldr	r3, [r5, #0]
 8002770:	3302      	adds	r3, #2
 8002772:	602b      	str	r3, [r5, #0]
 8002774:	6822      	ldr	r2, [r4, #0]
 8002776:	2306      	movs	r3, #6
 8002778:	0017      	movs	r7, r2
 800277a:	401f      	ands	r7, r3
 800277c:	421a      	tst	r2, r3
 800277e:	d027      	beq.n	80027d0 <_printf_common+0x8c>
 8002780:	0023      	movs	r3, r4
 8002782:	3343      	adds	r3, #67	; 0x43
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	1e5a      	subs	r2, r3, #1
 8002788:	4193      	sbcs	r3, r2
 800278a:	6822      	ldr	r2, [r4, #0]
 800278c:	0692      	lsls	r2, r2, #26
 800278e:	d430      	bmi.n	80027f2 <_printf_common+0xae>
 8002790:	0022      	movs	r2, r4
 8002792:	9901      	ldr	r1, [sp, #4]
 8002794:	9800      	ldr	r0, [sp, #0]
 8002796:	9e08      	ldr	r6, [sp, #32]
 8002798:	3243      	adds	r2, #67	; 0x43
 800279a:	47b0      	blx	r6
 800279c:	1c43      	adds	r3, r0, #1
 800279e:	d025      	beq.n	80027ec <_printf_common+0xa8>
 80027a0:	2306      	movs	r3, #6
 80027a2:	6820      	ldr	r0, [r4, #0]
 80027a4:	682a      	ldr	r2, [r5, #0]
 80027a6:	68e1      	ldr	r1, [r4, #12]
 80027a8:	2500      	movs	r5, #0
 80027aa:	4003      	ands	r3, r0
 80027ac:	2b04      	cmp	r3, #4
 80027ae:	d103      	bne.n	80027b8 <_printf_common+0x74>
 80027b0:	1a8d      	subs	r5, r1, r2
 80027b2:	43eb      	mvns	r3, r5
 80027b4:	17db      	asrs	r3, r3, #31
 80027b6:	401d      	ands	r5, r3
 80027b8:	68a3      	ldr	r3, [r4, #8]
 80027ba:	6922      	ldr	r2, [r4, #16]
 80027bc:	4293      	cmp	r3, r2
 80027be:	dd01      	ble.n	80027c4 <_printf_common+0x80>
 80027c0:	1a9b      	subs	r3, r3, r2
 80027c2:	18ed      	adds	r5, r5, r3
 80027c4:	2700      	movs	r7, #0
 80027c6:	42bd      	cmp	r5, r7
 80027c8:	d120      	bne.n	800280c <_printf_common+0xc8>
 80027ca:	2000      	movs	r0, #0
 80027cc:	e010      	b.n	80027f0 <_printf_common+0xac>
 80027ce:	3701      	adds	r7, #1
 80027d0:	68e3      	ldr	r3, [r4, #12]
 80027d2:	682a      	ldr	r2, [r5, #0]
 80027d4:	1a9b      	subs	r3, r3, r2
 80027d6:	42bb      	cmp	r3, r7
 80027d8:	ddd2      	ble.n	8002780 <_printf_common+0x3c>
 80027da:	0022      	movs	r2, r4
 80027dc:	2301      	movs	r3, #1
 80027de:	9901      	ldr	r1, [sp, #4]
 80027e0:	9800      	ldr	r0, [sp, #0]
 80027e2:	9e08      	ldr	r6, [sp, #32]
 80027e4:	3219      	adds	r2, #25
 80027e6:	47b0      	blx	r6
 80027e8:	1c43      	adds	r3, r0, #1
 80027ea:	d1f0      	bne.n	80027ce <_printf_common+0x8a>
 80027ec:	2001      	movs	r0, #1
 80027ee:	4240      	negs	r0, r0
 80027f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80027f2:	2030      	movs	r0, #48	; 0x30
 80027f4:	18e1      	adds	r1, r4, r3
 80027f6:	3143      	adds	r1, #67	; 0x43
 80027f8:	7008      	strb	r0, [r1, #0]
 80027fa:	0021      	movs	r1, r4
 80027fc:	1c5a      	adds	r2, r3, #1
 80027fe:	3145      	adds	r1, #69	; 0x45
 8002800:	7809      	ldrb	r1, [r1, #0]
 8002802:	18a2      	adds	r2, r4, r2
 8002804:	3243      	adds	r2, #67	; 0x43
 8002806:	3302      	adds	r3, #2
 8002808:	7011      	strb	r1, [r2, #0]
 800280a:	e7c1      	b.n	8002790 <_printf_common+0x4c>
 800280c:	0022      	movs	r2, r4
 800280e:	2301      	movs	r3, #1
 8002810:	9901      	ldr	r1, [sp, #4]
 8002812:	9800      	ldr	r0, [sp, #0]
 8002814:	9e08      	ldr	r6, [sp, #32]
 8002816:	321a      	adds	r2, #26
 8002818:	47b0      	blx	r6
 800281a:	1c43      	adds	r3, r0, #1
 800281c:	d0e6      	beq.n	80027ec <_printf_common+0xa8>
 800281e:	3701      	adds	r7, #1
 8002820:	e7d1      	b.n	80027c6 <_printf_common+0x82>
	...

08002824 <_printf_i>:
 8002824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002826:	b08b      	sub	sp, #44	; 0x2c
 8002828:	9206      	str	r2, [sp, #24]
 800282a:	000a      	movs	r2, r1
 800282c:	3243      	adds	r2, #67	; 0x43
 800282e:	9307      	str	r3, [sp, #28]
 8002830:	9005      	str	r0, [sp, #20]
 8002832:	9204      	str	r2, [sp, #16]
 8002834:	7e0a      	ldrb	r2, [r1, #24]
 8002836:	000c      	movs	r4, r1
 8002838:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800283a:	2a78      	cmp	r2, #120	; 0x78
 800283c:	d806      	bhi.n	800284c <_printf_i+0x28>
 800283e:	2a62      	cmp	r2, #98	; 0x62
 8002840:	d808      	bhi.n	8002854 <_printf_i+0x30>
 8002842:	2a00      	cmp	r2, #0
 8002844:	d100      	bne.n	8002848 <_printf_i+0x24>
 8002846:	e0c0      	b.n	80029ca <_printf_i+0x1a6>
 8002848:	2a58      	cmp	r2, #88	; 0x58
 800284a:	d052      	beq.n	80028f2 <_printf_i+0xce>
 800284c:	0026      	movs	r6, r4
 800284e:	3642      	adds	r6, #66	; 0x42
 8002850:	7032      	strb	r2, [r6, #0]
 8002852:	e022      	b.n	800289a <_printf_i+0x76>
 8002854:	0010      	movs	r0, r2
 8002856:	3863      	subs	r0, #99	; 0x63
 8002858:	2815      	cmp	r0, #21
 800285a:	d8f7      	bhi.n	800284c <_printf_i+0x28>
 800285c:	f7fd fc54 	bl	8000108 <__gnu_thumb1_case_shi>
 8002860:	001f0016 	.word	0x001f0016
 8002864:	fff6fff6 	.word	0xfff6fff6
 8002868:	fff6fff6 	.word	0xfff6fff6
 800286c:	fff6001f 	.word	0xfff6001f
 8002870:	fff6fff6 	.word	0xfff6fff6
 8002874:	00a8fff6 	.word	0x00a8fff6
 8002878:	009a0036 	.word	0x009a0036
 800287c:	fff6fff6 	.word	0xfff6fff6
 8002880:	fff600b9 	.word	0xfff600b9
 8002884:	fff60036 	.word	0xfff60036
 8002888:	009efff6 	.word	0x009efff6
 800288c:	0026      	movs	r6, r4
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	3642      	adds	r6, #66	; 0x42
 8002892:	1d11      	adds	r1, r2, #4
 8002894:	6019      	str	r1, [r3, #0]
 8002896:	6813      	ldr	r3, [r2, #0]
 8002898:	7033      	strb	r3, [r6, #0]
 800289a:	2301      	movs	r3, #1
 800289c:	e0a7      	b.n	80029ee <_printf_i+0x1ca>
 800289e:	6808      	ldr	r0, [r1, #0]
 80028a0:	6819      	ldr	r1, [r3, #0]
 80028a2:	1d0a      	adds	r2, r1, #4
 80028a4:	0605      	lsls	r5, r0, #24
 80028a6:	d50b      	bpl.n	80028c0 <_printf_i+0x9c>
 80028a8:	680d      	ldr	r5, [r1, #0]
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	2d00      	cmp	r5, #0
 80028ae:	da03      	bge.n	80028b8 <_printf_i+0x94>
 80028b0:	232d      	movs	r3, #45	; 0x2d
 80028b2:	9a04      	ldr	r2, [sp, #16]
 80028b4:	426d      	negs	r5, r5
 80028b6:	7013      	strb	r3, [r2, #0]
 80028b8:	4b61      	ldr	r3, [pc, #388]	; (8002a40 <_printf_i+0x21c>)
 80028ba:	270a      	movs	r7, #10
 80028bc:	9303      	str	r3, [sp, #12]
 80028be:	e032      	b.n	8002926 <_printf_i+0x102>
 80028c0:	680d      	ldr	r5, [r1, #0]
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	0641      	lsls	r1, r0, #25
 80028c6:	d5f1      	bpl.n	80028ac <_printf_i+0x88>
 80028c8:	b22d      	sxth	r5, r5
 80028ca:	e7ef      	b.n	80028ac <_printf_i+0x88>
 80028cc:	680d      	ldr	r5, [r1, #0]
 80028ce:	6819      	ldr	r1, [r3, #0]
 80028d0:	1d08      	adds	r0, r1, #4
 80028d2:	6018      	str	r0, [r3, #0]
 80028d4:	062e      	lsls	r6, r5, #24
 80028d6:	d501      	bpl.n	80028dc <_printf_i+0xb8>
 80028d8:	680d      	ldr	r5, [r1, #0]
 80028da:	e003      	b.n	80028e4 <_printf_i+0xc0>
 80028dc:	066d      	lsls	r5, r5, #25
 80028de:	d5fb      	bpl.n	80028d8 <_printf_i+0xb4>
 80028e0:	680d      	ldr	r5, [r1, #0]
 80028e2:	b2ad      	uxth	r5, r5
 80028e4:	4b56      	ldr	r3, [pc, #344]	; (8002a40 <_printf_i+0x21c>)
 80028e6:	270a      	movs	r7, #10
 80028e8:	9303      	str	r3, [sp, #12]
 80028ea:	2a6f      	cmp	r2, #111	; 0x6f
 80028ec:	d117      	bne.n	800291e <_printf_i+0xfa>
 80028ee:	2708      	movs	r7, #8
 80028f0:	e015      	b.n	800291e <_printf_i+0xfa>
 80028f2:	3145      	adds	r1, #69	; 0x45
 80028f4:	700a      	strb	r2, [r1, #0]
 80028f6:	4a52      	ldr	r2, [pc, #328]	; (8002a40 <_printf_i+0x21c>)
 80028f8:	9203      	str	r2, [sp, #12]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	6821      	ldr	r1, [r4, #0]
 80028fe:	ca20      	ldmia	r2!, {r5}
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	0608      	lsls	r0, r1, #24
 8002904:	d550      	bpl.n	80029a8 <_printf_i+0x184>
 8002906:	07cb      	lsls	r3, r1, #31
 8002908:	d502      	bpl.n	8002910 <_printf_i+0xec>
 800290a:	2320      	movs	r3, #32
 800290c:	4319      	orrs	r1, r3
 800290e:	6021      	str	r1, [r4, #0]
 8002910:	2710      	movs	r7, #16
 8002912:	2d00      	cmp	r5, #0
 8002914:	d103      	bne.n	800291e <_printf_i+0xfa>
 8002916:	2320      	movs	r3, #32
 8002918:	6822      	ldr	r2, [r4, #0]
 800291a:	439a      	bics	r2, r3
 800291c:	6022      	str	r2, [r4, #0]
 800291e:	0023      	movs	r3, r4
 8002920:	2200      	movs	r2, #0
 8002922:	3343      	adds	r3, #67	; 0x43
 8002924:	701a      	strb	r2, [r3, #0]
 8002926:	6863      	ldr	r3, [r4, #4]
 8002928:	60a3      	str	r3, [r4, #8]
 800292a:	2b00      	cmp	r3, #0
 800292c:	db03      	blt.n	8002936 <_printf_i+0x112>
 800292e:	2204      	movs	r2, #4
 8002930:	6821      	ldr	r1, [r4, #0]
 8002932:	4391      	bics	r1, r2
 8002934:	6021      	str	r1, [r4, #0]
 8002936:	2d00      	cmp	r5, #0
 8002938:	d102      	bne.n	8002940 <_printf_i+0x11c>
 800293a:	9e04      	ldr	r6, [sp, #16]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00c      	beq.n	800295a <_printf_i+0x136>
 8002940:	9e04      	ldr	r6, [sp, #16]
 8002942:	0028      	movs	r0, r5
 8002944:	0039      	movs	r1, r7
 8002946:	f7fd fc6f 	bl	8000228 <__aeabi_uidivmod>
 800294a:	9b03      	ldr	r3, [sp, #12]
 800294c:	3e01      	subs	r6, #1
 800294e:	5c5b      	ldrb	r3, [r3, r1]
 8002950:	7033      	strb	r3, [r6, #0]
 8002952:	002b      	movs	r3, r5
 8002954:	0005      	movs	r5, r0
 8002956:	429f      	cmp	r7, r3
 8002958:	d9f3      	bls.n	8002942 <_printf_i+0x11e>
 800295a:	2f08      	cmp	r7, #8
 800295c:	d109      	bne.n	8002972 <_printf_i+0x14e>
 800295e:	6823      	ldr	r3, [r4, #0]
 8002960:	07db      	lsls	r3, r3, #31
 8002962:	d506      	bpl.n	8002972 <_printf_i+0x14e>
 8002964:	6863      	ldr	r3, [r4, #4]
 8002966:	6922      	ldr	r2, [r4, #16]
 8002968:	4293      	cmp	r3, r2
 800296a:	dc02      	bgt.n	8002972 <_printf_i+0x14e>
 800296c:	2330      	movs	r3, #48	; 0x30
 800296e:	3e01      	subs	r6, #1
 8002970:	7033      	strb	r3, [r6, #0]
 8002972:	9b04      	ldr	r3, [sp, #16]
 8002974:	1b9b      	subs	r3, r3, r6
 8002976:	6123      	str	r3, [r4, #16]
 8002978:	9b07      	ldr	r3, [sp, #28]
 800297a:	0021      	movs	r1, r4
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	9805      	ldr	r0, [sp, #20]
 8002980:	9b06      	ldr	r3, [sp, #24]
 8002982:	aa09      	add	r2, sp, #36	; 0x24
 8002984:	f7ff fede 	bl	8002744 <_printf_common>
 8002988:	1c43      	adds	r3, r0, #1
 800298a:	d135      	bne.n	80029f8 <_printf_i+0x1d4>
 800298c:	2001      	movs	r0, #1
 800298e:	4240      	negs	r0, r0
 8002990:	b00b      	add	sp, #44	; 0x2c
 8002992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002994:	2220      	movs	r2, #32
 8002996:	6809      	ldr	r1, [r1, #0]
 8002998:	430a      	orrs	r2, r1
 800299a:	6022      	str	r2, [r4, #0]
 800299c:	0022      	movs	r2, r4
 800299e:	2178      	movs	r1, #120	; 0x78
 80029a0:	3245      	adds	r2, #69	; 0x45
 80029a2:	7011      	strb	r1, [r2, #0]
 80029a4:	4a27      	ldr	r2, [pc, #156]	; (8002a44 <_printf_i+0x220>)
 80029a6:	e7a7      	b.n	80028f8 <_printf_i+0xd4>
 80029a8:	0648      	lsls	r0, r1, #25
 80029aa:	d5ac      	bpl.n	8002906 <_printf_i+0xe2>
 80029ac:	b2ad      	uxth	r5, r5
 80029ae:	e7aa      	b.n	8002906 <_printf_i+0xe2>
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	680d      	ldr	r5, [r1, #0]
 80029b4:	1d10      	adds	r0, r2, #4
 80029b6:	6949      	ldr	r1, [r1, #20]
 80029b8:	6018      	str	r0, [r3, #0]
 80029ba:	6813      	ldr	r3, [r2, #0]
 80029bc:	062e      	lsls	r6, r5, #24
 80029be:	d501      	bpl.n	80029c4 <_printf_i+0x1a0>
 80029c0:	6019      	str	r1, [r3, #0]
 80029c2:	e002      	b.n	80029ca <_printf_i+0x1a6>
 80029c4:	066d      	lsls	r5, r5, #25
 80029c6:	d5fb      	bpl.n	80029c0 <_printf_i+0x19c>
 80029c8:	8019      	strh	r1, [r3, #0]
 80029ca:	2300      	movs	r3, #0
 80029cc:	9e04      	ldr	r6, [sp, #16]
 80029ce:	6123      	str	r3, [r4, #16]
 80029d0:	e7d2      	b.n	8002978 <_printf_i+0x154>
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	1d11      	adds	r1, r2, #4
 80029d6:	6019      	str	r1, [r3, #0]
 80029d8:	6816      	ldr	r6, [r2, #0]
 80029da:	2100      	movs	r1, #0
 80029dc:	0030      	movs	r0, r6
 80029de:	6862      	ldr	r2, [r4, #4]
 80029e0:	f000 fb58 	bl	8003094 <memchr>
 80029e4:	2800      	cmp	r0, #0
 80029e6:	d001      	beq.n	80029ec <_printf_i+0x1c8>
 80029e8:	1b80      	subs	r0, r0, r6
 80029ea:	6060      	str	r0, [r4, #4]
 80029ec:	6863      	ldr	r3, [r4, #4]
 80029ee:	6123      	str	r3, [r4, #16]
 80029f0:	2300      	movs	r3, #0
 80029f2:	9a04      	ldr	r2, [sp, #16]
 80029f4:	7013      	strb	r3, [r2, #0]
 80029f6:	e7bf      	b.n	8002978 <_printf_i+0x154>
 80029f8:	6923      	ldr	r3, [r4, #16]
 80029fa:	0032      	movs	r2, r6
 80029fc:	9906      	ldr	r1, [sp, #24]
 80029fe:	9805      	ldr	r0, [sp, #20]
 8002a00:	9d07      	ldr	r5, [sp, #28]
 8002a02:	47a8      	blx	r5
 8002a04:	1c43      	adds	r3, r0, #1
 8002a06:	d0c1      	beq.n	800298c <_printf_i+0x168>
 8002a08:	6823      	ldr	r3, [r4, #0]
 8002a0a:	079b      	lsls	r3, r3, #30
 8002a0c:	d415      	bmi.n	8002a3a <_printf_i+0x216>
 8002a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a10:	68e0      	ldr	r0, [r4, #12]
 8002a12:	4298      	cmp	r0, r3
 8002a14:	dabc      	bge.n	8002990 <_printf_i+0x16c>
 8002a16:	0018      	movs	r0, r3
 8002a18:	e7ba      	b.n	8002990 <_printf_i+0x16c>
 8002a1a:	0022      	movs	r2, r4
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	9906      	ldr	r1, [sp, #24]
 8002a20:	9805      	ldr	r0, [sp, #20]
 8002a22:	9e07      	ldr	r6, [sp, #28]
 8002a24:	3219      	adds	r2, #25
 8002a26:	47b0      	blx	r6
 8002a28:	1c43      	adds	r3, r0, #1
 8002a2a:	d0af      	beq.n	800298c <_printf_i+0x168>
 8002a2c:	3501      	adds	r5, #1
 8002a2e:	68e3      	ldr	r3, [r4, #12]
 8002a30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002a32:	1a9b      	subs	r3, r3, r2
 8002a34:	42ab      	cmp	r3, r5
 8002a36:	dcf0      	bgt.n	8002a1a <_printf_i+0x1f6>
 8002a38:	e7e9      	b.n	8002a0e <_printf_i+0x1ea>
 8002a3a:	2500      	movs	r5, #0
 8002a3c:	e7f7      	b.n	8002a2e <_printf_i+0x20a>
 8002a3e:	46c0      	nop			; (mov r8, r8)
 8002a40:	08003461 	.word	0x08003461
 8002a44:	08003472 	.word	0x08003472

08002a48 <_sbrk_r>:
 8002a48:	2300      	movs	r3, #0
 8002a4a:	b570      	push	{r4, r5, r6, lr}
 8002a4c:	4d06      	ldr	r5, [pc, #24]	; (8002a68 <_sbrk_r+0x20>)
 8002a4e:	0004      	movs	r4, r0
 8002a50:	0008      	movs	r0, r1
 8002a52:	602b      	str	r3, [r5, #0]
 8002a54:	f7fd ff0e 	bl	8000874 <_sbrk>
 8002a58:	1c43      	adds	r3, r0, #1
 8002a5a:	d103      	bne.n	8002a64 <_sbrk_r+0x1c>
 8002a5c:	682b      	ldr	r3, [r5, #0]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d000      	beq.n	8002a64 <_sbrk_r+0x1c>
 8002a62:	6023      	str	r3, [r4, #0]
 8002a64:	bd70      	pop	{r4, r5, r6, pc}
 8002a66:	46c0      	nop			; (mov r8, r8)
 8002a68:	20000a94 	.word	0x20000a94

08002a6c <__swbuf_r>:
 8002a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a6e:	0005      	movs	r5, r0
 8002a70:	000e      	movs	r6, r1
 8002a72:	0014      	movs	r4, r2
 8002a74:	2800      	cmp	r0, #0
 8002a76:	d004      	beq.n	8002a82 <__swbuf_r+0x16>
 8002a78:	6983      	ldr	r3, [r0, #24]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <__swbuf_r+0x16>
 8002a7e:	f000 f9f9 	bl	8002e74 <__sinit>
 8002a82:	4b22      	ldr	r3, [pc, #136]	; (8002b0c <__swbuf_r+0xa0>)
 8002a84:	429c      	cmp	r4, r3
 8002a86:	d12e      	bne.n	8002ae6 <__swbuf_r+0x7a>
 8002a88:	686c      	ldr	r4, [r5, #4]
 8002a8a:	69a3      	ldr	r3, [r4, #24]
 8002a8c:	60a3      	str	r3, [r4, #8]
 8002a8e:	89a3      	ldrh	r3, [r4, #12]
 8002a90:	071b      	lsls	r3, r3, #28
 8002a92:	d532      	bpl.n	8002afa <__swbuf_r+0x8e>
 8002a94:	6923      	ldr	r3, [r4, #16]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d02f      	beq.n	8002afa <__swbuf_r+0x8e>
 8002a9a:	6823      	ldr	r3, [r4, #0]
 8002a9c:	6922      	ldr	r2, [r4, #16]
 8002a9e:	b2f7      	uxtb	r7, r6
 8002aa0:	1a98      	subs	r0, r3, r2
 8002aa2:	6963      	ldr	r3, [r4, #20]
 8002aa4:	b2f6      	uxtb	r6, r6
 8002aa6:	4283      	cmp	r3, r0
 8002aa8:	dc05      	bgt.n	8002ab6 <__swbuf_r+0x4a>
 8002aaa:	0021      	movs	r1, r4
 8002aac:	0028      	movs	r0, r5
 8002aae:	f000 f93f 	bl	8002d30 <_fflush_r>
 8002ab2:	2800      	cmp	r0, #0
 8002ab4:	d127      	bne.n	8002b06 <__swbuf_r+0x9a>
 8002ab6:	68a3      	ldr	r3, [r4, #8]
 8002ab8:	3001      	adds	r0, #1
 8002aba:	3b01      	subs	r3, #1
 8002abc:	60a3      	str	r3, [r4, #8]
 8002abe:	6823      	ldr	r3, [r4, #0]
 8002ac0:	1c5a      	adds	r2, r3, #1
 8002ac2:	6022      	str	r2, [r4, #0]
 8002ac4:	701f      	strb	r7, [r3, #0]
 8002ac6:	6963      	ldr	r3, [r4, #20]
 8002ac8:	4283      	cmp	r3, r0
 8002aca:	d004      	beq.n	8002ad6 <__swbuf_r+0x6a>
 8002acc:	89a3      	ldrh	r3, [r4, #12]
 8002ace:	07db      	lsls	r3, r3, #31
 8002ad0:	d507      	bpl.n	8002ae2 <__swbuf_r+0x76>
 8002ad2:	2e0a      	cmp	r6, #10
 8002ad4:	d105      	bne.n	8002ae2 <__swbuf_r+0x76>
 8002ad6:	0021      	movs	r1, r4
 8002ad8:	0028      	movs	r0, r5
 8002ada:	f000 f929 	bl	8002d30 <_fflush_r>
 8002ade:	2800      	cmp	r0, #0
 8002ae0:	d111      	bne.n	8002b06 <__swbuf_r+0x9a>
 8002ae2:	0030      	movs	r0, r6
 8002ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ae6:	4b0a      	ldr	r3, [pc, #40]	; (8002b10 <__swbuf_r+0xa4>)
 8002ae8:	429c      	cmp	r4, r3
 8002aea:	d101      	bne.n	8002af0 <__swbuf_r+0x84>
 8002aec:	68ac      	ldr	r4, [r5, #8]
 8002aee:	e7cc      	b.n	8002a8a <__swbuf_r+0x1e>
 8002af0:	4b08      	ldr	r3, [pc, #32]	; (8002b14 <__swbuf_r+0xa8>)
 8002af2:	429c      	cmp	r4, r3
 8002af4:	d1c9      	bne.n	8002a8a <__swbuf_r+0x1e>
 8002af6:	68ec      	ldr	r4, [r5, #12]
 8002af8:	e7c7      	b.n	8002a8a <__swbuf_r+0x1e>
 8002afa:	0021      	movs	r1, r4
 8002afc:	0028      	movs	r0, r5
 8002afe:	f000 f80b 	bl	8002b18 <__swsetup_r>
 8002b02:	2800      	cmp	r0, #0
 8002b04:	d0c9      	beq.n	8002a9a <__swbuf_r+0x2e>
 8002b06:	2601      	movs	r6, #1
 8002b08:	4276      	negs	r6, r6
 8002b0a:	e7ea      	b.n	8002ae2 <__swbuf_r+0x76>
 8002b0c:	080034a4 	.word	0x080034a4
 8002b10:	080034c4 	.word	0x080034c4
 8002b14:	08003484 	.word	0x08003484

08002b18 <__swsetup_r>:
 8002b18:	4b37      	ldr	r3, [pc, #220]	; (8002bf8 <__swsetup_r+0xe0>)
 8002b1a:	b570      	push	{r4, r5, r6, lr}
 8002b1c:	681d      	ldr	r5, [r3, #0]
 8002b1e:	0006      	movs	r6, r0
 8002b20:	000c      	movs	r4, r1
 8002b22:	2d00      	cmp	r5, #0
 8002b24:	d005      	beq.n	8002b32 <__swsetup_r+0x1a>
 8002b26:	69ab      	ldr	r3, [r5, #24]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d102      	bne.n	8002b32 <__swsetup_r+0x1a>
 8002b2c:	0028      	movs	r0, r5
 8002b2e:	f000 f9a1 	bl	8002e74 <__sinit>
 8002b32:	4b32      	ldr	r3, [pc, #200]	; (8002bfc <__swsetup_r+0xe4>)
 8002b34:	429c      	cmp	r4, r3
 8002b36:	d10f      	bne.n	8002b58 <__swsetup_r+0x40>
 8002b38:	686c      	ldr	r4, [r5, #4]
 8002b3a:	230c      	movs	r3, #12
 8002b3c:	5ee2      	ldrsh	r2, [r4, r3]
 8002b3e:	b293      	uxth	r3, r2
 8002b40:	0711      	lsls	r1, r2, #28
 8002b42:	d42d      	bmi.n	8002ba0 <__swsetup_r+0x88>
 8002b44:	06d9      	lsls	r1, r3, #27
 8002b46:	d411      	bmi.n	8002b6c <__swsetup_r+0x54>
 8002b48:	2309      	movs	r3, #9
 8002b4a:	2001      	movs	r0, #1
 8002b4c:	6033      	str	r3, [r6, #0]
 8002b4e:	3337      	adds	r3, #55	; 0x37
 8002b50:	4313      	orrs	r3, r2
 8002b52:	81a3      	strh	r3, [r4, #12]
 8002b54:	4240      	negs	r0, r0
 8002b56:	bd70      	pop	{r4, r5, r6, pc}
 8002b58:	4b29      	ldr	r3, [pc, #164]	; (8002c00 <__swsetup_r+0xe8>)
 8002b5a:	429c      	cmp	r4, r3
 8002b5c:	d101      	bne.n	8002b62 <__swsetup_r+0x4a>
 8002b5e:	68ac      	ldr	r4, [r5, #8]
 8002b60:	e7eb      	b.n	8002b3a <__swsetup_r+0x22>
 8002b62:	4b28      	ldr	r3, [pc, #160]	; (8002c04 <__swsetup_r+0xec>)
 8002b64:	429c      	cmp	r4, r3
 8002b66:	d1e8      	bne.n	8002b3a <__swsetup_r+0x22>
 8002b68:	68ec      	ldr	r4, [r5, #12]
 8002b6a:	e7e6      	b.n	8002b3a <__swsetup_r+0x22>
 8002b6c:	075b      	lsls	r3, r3, #29
 8002b6e:	d513      	bpl.n	8002b98 <__swsetup_r+0x80>
 8002b70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b72:	2900      	cmp	r1, #0
 8002b74:	d008      	beq.n	8002b88 <__swsetup_r+0x70>
 8002b76:	0023      	movs	r3, r4
 8002b78:	3344      	adds	r3, #68	; 0x44
 8002b7a:	4299      	cmp	r1, r3
 8002b7c:	d002      	beq.n	8002b84 <__swsetup_r+0x6c>
 8002b7e:	0030      	movs	r0, r6
 8002b80:	f7ff fbd6 	bl	8002330 <_free_r>
 8002b84:	2300      	movs	r3, #0
 8002b86:	6363      	str	r3, [r4, #52]	; 0x34
 8002b88:	2224      	movs	r2, #36	; 0x24
 8002b8a:	89a3      	ldrh	r3, [r4, #12]
 8002b8c:	4393      	bics	r3, r2
 8002b8e:	81a3      	strh	r3, [r4, #12]
 8002b90:	2300      	movs	r3, #0
 8002b92:	6063      	str	r3, [r4, #4]
 8002b94:	6923      	ldr	r3, [r4, #16]
 8002b96:	6023      	str	r3, [r4, #0]
 8002b98:	2308      	movs	r3, #8
 8002b9a:	89a2      	ldrh	r2, [r4, #12]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	81a3      	strh	r3, [r4, #12]
 8002ba0:	6923      	ldr	r3, [r4, #16]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10b      	bne.n	8002bbe <__swsetup_r+0xa6>
 8002ba6:	21a0      	movs	r1, #160	; 0xa0
 8002ba8:	2280      	movs	r2, #128	; 0x80
 8002baa:	89a3      	ldrh	r3, [r4, #12]
 8002bac:	0089      	lsls	r1, r1, #2
 8002bae:	0092      	lsls	r2, r2, #2
 8002bb0:	400b      	ands	r3, r1
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d003      	beq.n	8002bbe <__swsetup_r+0xa6>
 8002bb6:	0021      	movs	r1, r4
 8002bb8:	0030      	movs	r0, r6
 8002bba:	f000 fa27 	bl	800300c <__smakebuf_r>
 8002bbe:	220c      	movs	r2, #12
 8002bc0:	5ea3      	ldrsh	r3, [r4, r2]
 8002bc2:	2001      	movs	r0, #1
 8002bc4:	001a      	movs	r2, r3
 8002bc6:	b299      	uxth	r1, r3
 8002bc8:	4002      	ands	r2, r0
 8002bca:	4203      	tst	r3, r0
 8002bcc:	d00f      	beq.n	8002bee <__swsetup_r+0xd6>
 8002bce:	2200      	movs	r2, #0
 8002bd0:	60a2      	str	r2, [r4, #8]
 8002bd2:	6962      	ldr	r2, [r4, #20]
 8002bd4:	4252      	negs	r2, r2
 8002bd6:	61a2      	str	r2, [r4, #24]
 8002bd8:	2000      	movs	r0, #0
 8002bda:	6922      	ldr	r2, [r4, #16]
 8002bdc:	4282      	cmp	r2, r0
 8002bde:	d1ba      	bne.n	8002b56 <__swsetup_r+0x3e>
 8002be0:	060a      	lsls	r2, r1, #24
 8002be2:	d5b8      	bpl.n	8002b56 <__swsetup_r+0x3e>
 8002be4:	2240      	movs	r2, #64	; 0x40
 8002be6:	4313      	orrs	r3, r2
 8002be8:	81a3      	strh	r3, [r4, #12]
 8002bea:	3801      	subs	r0, #1
 8002bec:	e7b3      	b.n	8002b56 <__swsetup_r+0x3e>
 8002bee:	0788      	lsls	r0, r1, #30
 8002bf0:	d400      	bmi.n	8002bf4 <__swsetup_r+0xdc>
 8002bf2:	6962      	ldr	r2, [r4, #20]
 8002bf4:	60a2      	str	r2, [r4, #8]
 8002bf6:	e7ef      	b.n	8002bd8 <__swsetup_r+0xc0>
 8002bf8:	20000020 	.word	0x20000020
 8002bfc:	080034a4 	.word	0x080034a4
 8002c00:	080034c4 	.word	0x080034c4
 8002c04:	08003484 	.word	0x08003484

08002c08 <abort>:
 8002c08:	2006      	movs	r0, #6
 8002c0a:	b510      	push	{r4, lr}
 8002c0c:	f000 fa88 	bl	8003120 <raise>
 8002c10:	2001      	movs	r0, #1
 8002c12:	f7fd fdff 	bl	8000814 <_exit>
	...

08002c18 <__sflush_r>:
 8002c18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c1a:	898b      	ldrh	r3, [r1, #12]
 8002c1c:	0005      	movs	r5, r0
 8002c1e:	000c      	movs	r4, r1
 8002c20:	071a      	lsls	r2, r3, #28
 8002c22:	d45f      	bmi.n	8002ce4 <__sflush_r+0xcc>
 8002c24:	684a      	ldr	r2, [r1, #4]
 8002c26:	2a00      	cmp	r2, #0
 8002c28:	dc04      	bgt.n	8002c34 <__sflush_r+0x1c>
 8002c2a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8002c2c:	2a00      	cmp	r2, #0
 8002c2e:	dc01      	bgt.n	8002c34 <__sflush_r+0x1c>
 8002c30:	2000      	movs	r0, #0
 8002c32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002c34:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002c36:	2f00      	cmp	r7, #0
 8002c38:	d0fa      	beq.n	8002c30 <__sflush_r+0x18>
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	2180      	movs	r1, #128	; 0x80
 8002c3e:	682e      	ldr	r6, [r5, #0]
 8002c40:	602a      	str	r2, [r5, #0]
 8002c42:	001a      	movs	r2, r3
 8002c44:	0149      	lsls	r1, r1, #5
 8002c46:	400a      	ands	r2, r1
 8002c48:	420b      	tst	r3, r1
 8002c4a:	d034      	beq.n	8002cb6 <__sflush_r+0x9e>
 8002c4c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002c4e:	89a3      	ldrh	r3, [r4, #12]
 8002c50:	075b      	lsls	r3, r3, #29
 8002c52:	d506      	bpl.n	8002c62 <__sflush_r+0x4a>
 8002c54:	6863      	ldr	r3, [r4, #4]
 8002c56:	1ac0      	subs	r0, r0, r3
 8002c58:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <__sflush_r+0x4a>
 8002c5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002c60:	1ac0      	subs	r0, r0, r3
 8002c62:	0002      	movs	r2, r0
 8002c64:	6a21      	ldr	r1, [r4, #32]
 8002c66:	2300      	movs	r3, #0
 8002c68:	0028      	movs	r0, r5
 8002c6a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002c6c:	47b8      	blx	r7
 8002c6e:	89a1      	ldrh	r1, [r4, #12]
 8002c70:	1c43      	adds	r3, r0, #1
 8002c72:	d106      	bne.n	8002c82 <__sflush_r+0x6a>
 8002c74:	682b      	ldr	r3, [r5, #0]
 8002c76:	2b1d      	cmp	r3, #29
 8002c78:	d831      	bhi.n	8002cde <__sflush_r+0xc6>
 8002c7a:	4a2c      	ldr	r2, [pc, #176]	; (8002d2c <__sflush_r+0x114>)
 8002c7c:	40da      	lsrs	r2, r3
 8002c7e:	07d3      	lsls	r3, r2, #31
 8002c80:	d52d      	bpl.n	8002cde <__sflush_r+0xc6>
 8002c82:	2300      	movs	r3, #0
 8002c84:	6063      	str	r3, [r4, #4]
 8002c86:	6923      	ldr	r3, [r4, #16]
 8002c88:	6023      	str	r3, [r4, #0]
 8002c8a:	04cb      	lsls	r3, r1, #19
 8002c8c:	d505      	bpl.n	8002c9a <__sflush_r+0x82>
 8002c8e:	1c43      	adds	r3, r0, #1
 8002c90:	d102      	bne.n	8002c98 <__sflush_r+0x80>
 8002c92:	682b      	ldr	r3, [r5, #0]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d100      	bne.n	8002c9a <__sflush_r+0x82>
 8002c98:	6560      	str	r0, [r4, #84]	; 0x54
 8002c9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c9c:	602e      	str	r6, [r5, #0]
 8002c9e:	2900      	cmp	r1, #0
 8002ca0:	d0c6      	beq.n	8002c30 <__sflush_r+0x18>
 8002ca2:	0023      	movs	r3, r4
 8002ca4:	3344      	adds	r3, #68	; 0x44
 8002ca6:	4299      	cmp	r1, r3
 8002ca8:	d002      	beq.n	8002cb0 <__sflush_r+0x98>
 8002caa:	0028      	movs	r0, r5
 8002cac:	f7ff fb40 	bl	8002330 <_free_r>
 8002cb0:	2000      	movs	r0, #0
 8002cb2:	6360      	str	r0, [r4, #52]	; 0x34
 8002cb4:	e7bd      	b.n	8002c32 <__sflush_r+0x1a>
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	0028      	movs	r0, r5
 8002cba:	6a21      	ldr	r1, [r4, #32]
 8002cbc:	47b8      	blx	r7
 8002cbe:	1c43      	adds	r3, r0, #1
 8002cc0:	d1c5      	bne.n	8002c4e <__sflush_r+0x36>
 8002cc2:	682b      	ldr	r3, [r5, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0c2      	beq.n	8002c4e <__sflush_r+0x36>
 8002cc8:	2b1d      	cmp	r3, #29
 8002cca:	d001      	beq.n	8002cd0 <__sflush_r+0xb8>
 8002ccc:	2b16      	cmp	r3, #22
 8002cce:	d101      	bne.n	8002cd4 <__sflush_r+0xbc>
 8002cd0:	602e      	str	r6, [r5, #0]
 8002cd2:	e7ad      	b.n	8002c30 <__sflush_r+0x18>
 8002cd4:	2340      	movs	r3, #64	; 0x40
 8002cd6:	89a2      	ldrh	r2, [r4, #12]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	81a3      	strh	r3, [r4, #12]
 8002cdc:	e7a9      	b.n	8002c32 <__sflush_r+0x1a>
 8002cde:	2340      	movs	r3, #64	; 0x40
 8002ce0:	430b      	orrs	r3, r1
 8002ce2:	e7fa      	b.n	8002cda <__sflush_r+0xc2>
 8002ce4:	690f      	ldr	r7, [r1, #16]
 8002ce6:	2f00      	cmp	r7, #0
 8002ce8:	d0a2      	beq.n	8002c30 <__sflush_r+0x18>
 8002cea:	680a      	ldr	r2, [r1, #0]
 8002cec:	600f      	str	r7, [r1, #0]
 8002cee:	1bd2      	subs	r2, r2, r7
 8002cf0:	9201      	str	r2, [sp, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	079b      	lsls	r3, r3, #30
 8002cf6:	d100      	bne.n	8002cfa <__sflush_r+0xe2>
 8002cf8:	694a      	ldr	r2, [r1, #20]
 8002cfa:	60a2      	str	r2, [r4, #8]
 8002cfc:	9b01      	ldr	r3, [sp, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	dc00      	bgt.n	8002d04 <__sflush_r+0xec>
 8002d02:	e795      	b.n	8002c30 <__sflush_r+0x18>
 8002d04:	003a      	movs	r2, r7
 8002d06:	0028      	movs	r0, r5
 8002d08:	9b01      	ldr	r3, [sp, #4]
 8002d0a:	6a21      	ldr	r1, [r4, #32]
 8002d0c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002d0e:	47b0      	blx	r6
 8002d10:	2800      	cmp	r0, #0
 8002d12:	dc06      	bgt.n	8002d22 <__sflush_r+0x10a>
 8002d14:	2340      	movs	r3, #64	; 0x40
 8002d16:	2001      	movs	r0, #1
 8002d18:	89a2      	ldrh	r2, [r4, #12]
 8002d1a:	4240      	negs	r0, r0
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	81a3      	strh	r3, [r4, #12]
 8002d20:	e787      	b.n	8002c32 <__sflush_r+0x1a>
 8002d22:	9b01      	ldr	r3, [sp, #4]
 8002d24:	183f      	adds	r7, r7, r0
 8002d26:	1a1b      	subs	r3, r3, r0
 8002d28:	9301      	str	r3, [sp, #4]
 8002d2a:	e7e7      	b.n	8002cfc <__sflush_r+0xe4>
 8002d2c:	20400001 	.word	0x20400001

08002d30 <_fflush_r>:
 8002d30:	690b      	ldr	r3, [r1, #16]
 8002d32:	b570      	push	{r4, r5, r6, lr}
 8002d34:	0005      	movs	r5, r0
 8002d36:	000c      	movs	r4, r1
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d102      	bne.n	8002d42 <_fflush_r+0x12>
 8002d3c:	2500      	movs	r5, #0
 8002d3e:	0028      	movs	r0, r5
 8002d40:	bd70      	pop	{r4, r5, r6, pc}
 8002d42:	2800      	cmp	r0, #0
 8002d44:	d004      	beq.n	8002d50 <_fflush_r+0x20>
 8002d46:	6983      	ldr	r3, [r0, #24]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <_fflush_r+0x20>
 8002d4c:	f000 f892 	bl	8002e74 <__sinit>
 8002d50:	4b14      	ldr	r3, [pc, #80]	; (8002da4 <_fflush_r+0x74>)
 8002d52:	429c      	cmp	r4, r3
 8002d54:	d11b      	bne.n	8002d8e <_fflush_r+0x5e>
 8002d56:	686c      	ldr	r4, [r5, #4]
 8002d58:	220c      	movs	r2, #12
 8002d5a:	5ea3      	ldrsh	r3, [r4, r2]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0ed      	beq.n	8002d3c <_fflush_r+0xc>
 8002d60:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002d62:	07d2      	lsls	r2, r2, #31
 8002d64:	d404      	bmi.n	8002d70 <_fflush_r+0x40>
 8002d66:	059b      	lsls	r3, r3, #22
 8002d68:	d402      	bmi.n	8002d70 <_fflush_r+0x40>
 8002d6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d6c:	f000 f923 	bl	8002fb6 <__retarget_lock_acquire_recursive>
 8002d70:	0028      	movs	r0, r5
 8002d72:	0021      	movs	r1, r4
 8002d74:	f7ff ff50 	bl	8002c18 <__sflush_r>
 8002d78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d7a:	0005      	movs	r5, r0
 8002d7c:	07db      	lsls	r3, r3, #31
 8002d7e:	d4de      	bmi.n	8002d3e <_fflush_r+0xe>
 8002d80:	89a3      	ldrh	r3, [r4, #12]
 8002d82:	059b      	lsls	r3, r3, #22
 8002d84:	d4db      	bmi.n	8002d3e <_fflush_r+0xe>
 8002d86:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d88:	f000 f916 	bl	8002fb8 <__retarget_lock_release_recursive>
 8002d8c:	e7d7      	b.n	8002d3e <_fflush_r+0xe>
 8002d8e:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <_fflush_r+0x78>)
 8002d90:	429c      	cmp	r4, r3
 8002d92:	d101      	bne.n	8002d98 <_fflush_r+0x68>
 8002d94:	68ac      	ldr	r4, [r5, #8]
 8002d96:	e7df      	b.n	8002d58 <_fflush_r+0x28>
 8002d98:	4b04      	ldr	r3, [pc, #16]	; (8002dac <_fflush_r+0x7c>)
 8002d9a:	429c      	cmp	r4, r3
 8002d9c:	d1dc      	bne.n	8002d58 <_fflush_r+0x28>
 8002d9e:	68ec      	ldr	r4, [r5, #12]
 8002da0:	e7da      	b.n	8002d58 <_fflush_r+0x28>
 8002da2:	46c0      	nop			; (mov r8, r8)
 8002da4:	080034a4 	.word	0x080034a4
 8002da8:	080034c4 	.word	0x080034c4
 8002dac:	08003484 	.word	0x08003484

08002db0 <std>:
 8002db0:	2300      	movs	r3, #0
 8002db2:	b510      	push	{r4, lr}
 8002db4:	0004      	movs	r4, r0
 8002db6:	6003      	str	r3, [r0, #0]
 8002db8:	6043      	str	r3, [r0, #4]
 8002dba:	6083      	str	r3, [r0, #8]
 8002dbc:	8181      	strh	r1, [r0, #12]
 8002dbe:	6643      	str	r3, [r0, #100]	; 0x64
 8002dc0:	0019      	movs	r1, r3
 8002dc2:	81c2      	strh	r2, [r0, #14]
 8002dc4:	6103      	str	r3, [r0, #16]
 8002dc6:	6143      	str	r3, [r0, #20]
 8002dc8:	6183      	str	r3, [r0, #24]
 8002dca:	2208      	movs	r2, #8
 8002dcc:	305c      	adds	r0, #92	; 0x5c
 8002dce:	f7ff faa7 	bl	8002320 <memset>
 8002dd2:	4b05      	ldr	r3, [pc, #20]	; (8002de8 <std+0x38>)
 8002dd4:	6263      	str	r3, [r4, #36]	; 0x24
 8002dd6:	4b05      	ldr	r3, [pc, #20]	; (8002dec <std+0x3c>)
 8002dd8:	6224      	str	r4, [r4, #32]
 8002dda:	62a3      	str	r3, [r4, #40]	; 0x28
 8002ddc:	4b04      	ldr	r3, [pc, #16]	; (8002df0 <std+0x40>)
 8002dde:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002de0:	4b04      	ldr	r3, [pc, #16]	; (8002df4 <std+0x44>)
 8002de2:	6323      	str	r3, [r4, #48]	; 0x30
 8002de4:	bd10      	pop	{r4, pc}
 8002de6:	46c0      	nop			; (mov r8, r8)
 8002de8:	08003161 	.word	0x08003161
 8002dec:	08003189 	.word	0x08003189
 8002df0:	080031c1 	.word	0x080031c1
 8002df4:	080031ed 	.word	0x080031ed

08002df8 <_cleanup_r>:
 8002df8:	b510      	push	{r4, lr}
 8002dfa:	4902      	ldr	r1, [pc, #8]	; (8002e04 <_cleanup_r+0xc>)
 8002dfc:	f000 f8ba 	bl	8002f74 <_fwalk_reent>
 8002e00:	bd10      	pop	{r4, pc}
 8002e02:	46c0      	nop			; (mov r8, r8)
 8002e04:	08002d31 	.word	0x08002d31

08002e08 <__sfmoreglue>:
 8002e08:	b570      	push	{r4, r5, r6, lr}
 8002e0a:	2568      	movs	r5, #104	; 0x68
 8002e0c:	1e4a      	subs	r2, r1, #1
 8002e0e:	4355      	muls	r5, r2
 8002e10:	000e      	movs	r6, r1
 8002e12:	0029      	movs	r1, r5
 8002e14:	3174      	adds	r1, #116	; 0x74
 8002e16:	f7ff fad5 	bl	80023c4 <_malloc_r>
 8002e1a:	1e04      	subs	r4, r0, #0
 8002e1c:	d008      	beq.n	8002e30 <__sfmoreglue+0x28>
 8002e1e:	2100      	movs	r1, #0
 8002e20:	002a      	movs	r2, r5
 8002e22:	6001      	str	r1, [r0, #0]
 8002e24:	6046      	str	r6, [r0, #4]
 8002e26:	300c      	adds	r0, #12
 8002e28:	60a0      	str	r0, [r4, #8]
 8002e2a:	3268      	adds	r2, #104	; 0x68
 8002e2c:	f7ff fa78 	bl	8002320 <memset>
 8002e30:	0020      	movs	r0, r4
 8002e32:	bd70      	pop	{r4, r5, r6, pc}

08002e34 <__sfp_lock_acquire>:
 8002e34:	b510      	push	{r4, lr}
 8002e36:	4802      	ldr	r0, [pc, #8]	; (8002e40 <__sfp_lock_acquire+0xc>)
 8002e38:	f000 f8bd 	bl	8002fb6 <__retarget_lock_acquire_recursive>
 8002e3c:	bd10      	pop	{r4, pc}
 8002e3e:	46c0      	nop			; (mov r8, r8)
 8002e40:	20000a90 	.word	0x20000a90

08002e44 <__sfp_lock_release>:
 8002e44:	b510      	push	{r4, lr}
 8002e46:	4802      	ldr	r0, [pc, #8]	; (8002e50 <__sfp_lock_release+0xc>)
 8002e48:	f000 f8b6 	bl	8002fb8 <__retarget_lock_release_recursive>
 8002e4c:	bd10      	pop	{r4, pc}
 8002e4e:	46c0      	nop			; (mov r8, r8)
 8002e50:	20000a90 	.word	0x20000a90

08002e54 <__sinit_lock_acquire>:
 8002e54:	b510      	push	{r4, lr}
 8002e56:	4802      	ldr	r0, [pc, #8]	; (8002e60 <__sinit_lock_acquire+0xc>)
 8002e58:	f000 f8ad 	bl	8002fb6 <__retarget_lock_acquire_recursive>
 8002e5c:	bd10      	pop	{r4, pc}
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	20000a8b 	.word	0x20000a8b

08002e64 <__sinit_lock_release>:
 8002e64:	b510      	push	{r4, lr}
 8002e66:	4802      	ldr	r0, [pc, #8]	; (8002e70 <__sinit_lock_release+0xc>)
 8002e68:	f000 f8a6 	bl	8002fb8 <__retarget_lock_release_recursive>
 8002e6c:	bd10      	pop	{r4, pc}
 8002e6e:	46c0      	nop			; (mov r8, r8)
 8002e70:	20000a8b 	.word	0x20000a8b

08002e74 <__sinit>:
 8002e74:	b513      	push	{r0, r1, r4, lr}
 8002e76:	0004      	movs	r4, r0
 8002e78:	f7ff ffec 	bl	8002e54 <__sinit_lock_acquire>
 8002e7c:	69a3      	ldr	r3, [r4, #24]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d002      	beq.n	8002e88 <__sinit+0x14>
 8002e82:	f7ff ffef 	bl	8002e64 <__sinit_lock_release>
 8002e86:	bd13      	pop	{r0, r1, r4, pc}
 8002e88:	64a3      	str	r3, [r4, #72]	; 0x48
 8002e8a:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002e8c:	6523      	str	r3, [r4, #80]	; 0x50
 8002e8e:	4b13      	ldr	r3, [pc, #76]	; (8002edc <__sinit+0x68>)
 8002e90:	4a13      	ldr	r2, [pc, #76]	; (8002ee0 <__sinit+0x6c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	62a2      	str	r2, [r4, #40]	; 0x28
 8002e96:	9301      	str	r3, [sp, #4]
 8002e98:	42a3      	cmp	r3, r4
 8002e9a:	d101      	bne.n	8002ea0 <__sinit+0x2c>
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	61a3      	str	r3, [r4, #24]
 8002ea0:	0020      	movs	r0, r4
 8002ea2:	f000 f81f 	bl	8002ee4 <__sfp>
 8002ea6:	6060      	str	r0, [r4, #4]
 8002ea8:	0020      	movs	r0, r4
 8002eaa:	f000 f81b 	bl	8002ee4 <__sfp>
 8002eae:	60a0      	str	r0, [r4, #8]
 8002eb0:	0020      	movs	r0, r4
 8002eb2:	f000 f817 	bl	8002ee4 <__sfp>
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	2104      	movs	r1, #4
 8002eba:	60e0      	str	r0, [r4, #12]
 8002ebc:	6860      	ldr	r0, [r4, #4]
 8002ebe:	f7ff ff77 	bl	8002db0 <std>
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	2109      	movs	r1, #9
 8002ec6:	68a0      	ldr	r0, [r4, #8]
 8002ec8:	f7ff ff72 	bl	8002db0 <std>
 8002ecc:	2202      	movs	r2, #2
 8002ece:	2112      	movs	r1, #18
 8002ed0:	68e0      	ldr	r0, [r4, #12]
 8002ed2:	f7ff ff6d 	bl	8002db0 <std>
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	61a3      	str	r3, [r4, #24]
 8002eda:	e7d2      	b.n	8002e82 <__sinit+0xe>
 8002edc:	0800344c 	.word	0x0800344c
 8002ee0:	08002df9 	.word	0x08002df9

08002ee4 <__sfp>:
 8002ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ee6:	0007      	movs	r7, r0
 8002ee8:	f7ff ffa4 	bl	8002e34 <__sfp_lock_acquire>
 8002eec:	4b1f      	ldr	r3, [pc, #124]	; (8002f6c <__sfp+0x88>)
 8002eee:	681e      	ldr	r6, [r3, #0]
 8002ef0:	69b3      	ldr	r3, [r6, #24]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d102      	bne.n	8002efc <__sfp+0x18>
 8002ef6:	0030      	movs	r0, r6
 8002ef8:	f7ff ffbc 	bl	8002e74 <__sinit>
 8002efc:	3648      	adds	r6, #72	; 0x48
 8002efe:	68b4      	ldr	r4, [r6, #8]
 8002f00:	6873      	ldr	r3, [r6, #4]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	d504      	bpl.n	8002f10 <__sfp+0x2c>
 8002f06:	6833      	ldr	r3, [r6, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d022      	beq.n	8002f52 <__sfp+0x6e>
 8002f0c:	6836      	ldr	r6, [r6, #0]
 8002f0e:	e7f6      	b.n	8002efe <__sfp+0x1a>
 8002f10:	220c      	movs	r2, #12
 8002f12:	5ea5      	ldrsh	r5, [r4, r2]
 8002f14:	2d00      	cmp	r5, #0
 8002f16:	d11a      	bne.n	8002f4e <__sfp+0x6a>
 8002f18:	0020      	movs	r0, r4
 8002f1a:	4b15      	ldr	r3, [pc, #84]	; (8002f70 <__sfp+0x8c>)
 8002f1c:	3058      	adds	r0, #88	; 0x58
 8002f1e:	60e3      	str	r3, [r4, #12]
 8002f20:	6665      	str	r5, [r4, #100]	; 0x64
 8002f22:	f000 f847 	bl	8002fb4 <__retarget_lock_init_recursive>
 8002f26:	f7ff ff8d 	bl	8002e44 <__sfp_lock_release>
 8002f2a:	0020      	movs	r0, r4
 8002f2c:	2208      	movs	r2, #8
 8002f2e:	0029      	movs	r1, r5
 8002f30:	6025      	str	r5, [r4, #0]
 8002f32:	60a5      	str	r5, [r4, #8]
 8002f34:	6065      	str	r5, [r4, #4]
 8002f36:	6125      	str	r5, [r4, #16]
 8002f38:	6165      	str	r5, [r4, #20]
 8002f3a:	61a5      	str	r5, [r4, #24]
 8002f3c:	305c      	adds	r0, #92	; 0x5c
 8002f3e:	f7ff f9ef 	bl	8002320 <memset>
 8002f42:	6365      	str	r5, [r4, #52]	; 0x34
 8002f44:	63a5      	str	r5, [r4, #56]	; 0x38
 8002f46:	64a5      	str	r5, [r4, #72]	; 0x48
 8002f48:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002f4a:	0020      	movs	r0, r4
 8002f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f4e:	3468      	adds	r4, #104	; 0x68
 8002f50:	e7d7      	b.n	8002f02 <__sfp+0x1e>
 8002f52:	2104      	movs	r1, #4
 8002f54:	0038      	movs	r0, r7
 8002f56:	f7ff ff57 	bl	8002e08 <__sfmoreglue>
 8002f5a:	1e04      	subs	r4, r0, #0
 8002f5c:	6030      	str	r0, [r6, #0]
 8002f5e:	d1d5      	bne.n	8002f0c <__sfp+0x28>
 8002f60:	f7ff ff70 	bl	8002e44 <__sfp_lock_release>
 8002f64:	230c      	movs	r3, #12
 8002f66:	603b      	str	r3, [r7, #0]
 8002f68:	e7ef      	b.n	8002f4a <__sfp+0x66>
 8002f6a:	46c0      	nop			; (mov r8, r8)
 8002f6c:	0800344c 	.word	0x0800344c
 8002f70:	ffff0001 	.word	0xffff0001

08002f74 <_fwalk_reent>:
 8002f74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f76:	0004      	movs	r4, r0
 8002f78:	0006      	movs	r6, r0
 8002f7a:	2700      	movs	r7, #0
 8002f7c:	9101      	str	r1, [sp, #4]
 8002f7e:	3448      	adds	r4, #72	; 0x48
 8002f80:	6863      	ldr	r3, [r4, #4]
 8002f82:	68a5      	ldr	r5, [r4, #8]
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	9b00      	ldr	r3, [sp, #0]
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	d504      	bpl.n	8002f98 <_fwalk_reent+0x24>
 8002f8e:	6824      	ldr	r4, [r4, #0]
 8002f90:	2c00      	cmp	r4, #0
 8002f92:	d1f5      	bne.n	8002f80 <_fwalk_reent+0xc>
 8002f94:	0038      	movs	r0, r7
 8002f96:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002f98:	89ab      	ldrh	r3, [r5, #12]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d908      	bls.n	8002fb0 <_fwalk_reent+0x3c>
 8002f9e:	220e      	movs	r2, #14
 8002fa0:	5eab      	ldrsh	r3, [r5, r2]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	d004      	beq.n	8002fb0 <_fwalk_reent+0x3c>
 8002fa6:	0029      	movs	r1, r5
 8002fa8:	0030      	movs	r0, r6
 8002faa:	9b01      	ldr	r3, [sp, #4]
 8002fac:	4798      	blx	r3
 8002fae:	4307      	orrs	r7, r0
 8002fb0:	3568      	adds	r5, #104	; 0x68
 8002fb2:	e7e8      	b.n	8002f86 <_fwalk_reent+0x12>

08002fb4 <__retarget_lock_init_recursive>:
 8002fb4:	4770      	bx	lr

08002fb6 <__retarget_lock_acquire_recursive>:
 8002fb6:	4770      	bx	lr

08002fb8 <__retarget_lock_release_recursive>:
 8002fb8:	4770      	bx	lr
	...

08002fbc <__swhatbuf_r>:
 8002fbc:	b570      	push	{r4, r5, r6, lr}
 8002fbe:	000e      	movs	r6, r1
 8002fc0:	001d      	movs	r5, r3
 8002fc2:	230e      	movs	r3, #14
 8002fc4:	5ec9      	ldrsh	r1, [r1, r3]
 8002fc6:	0014      	movs	r4, r2
 8002fc8:	b096      	sub	sp, #88	; 0x58
 8002fca:	2900      	cmp	r1, #0
 8002fcc:	da07      	bge.n	8002fde <__swhatbuf_r+0x22>
 8002fce:	2300      	movs	r3, #0
 8002fd0:	602b      	str	r3, [r5, #0]
 8002fd2:	89b3      	ldrh	r3, [r6, #12]
 8002fd4:	061b      	lsls	r3, r3, #24
 8002fd6:	d411      	bmi.n	8002ffc <__swhatbuf_r+0x40>
 8002fd8:	2380      	movs	r3, #128	; 0x80
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	e00f      	b.n	8002ffe <__swhatbuf_r+0x42>
 8002fde:	466a      	mov	r2, sp
 8002fe0:	f000 f930 	bl	8003244 <_fstat_r>
 8002fe4:	2800      	cmp	r0, #0
 8002fe6:	dbf2      	blt.n	8002fce <__swhatbuf_r+0x12>
 8002fe8:	23f0      	movs	r3, #240	; 0xf0
 8002fea:	9901      	ldr	r1, [sp, #4]
 8002fec:	021b      	lsls	r3, r3, #8
 8002fee:	4019      	ands	r1, r3
 8002ff0:	4b05      	ldr	r3, [pc, #20]	; (8003008 <__swhatbuf_r+0x4c>)
 8002ff2:	18c9      	adds	r1, r1, r3
 8002ff4:	424b      	negs	r3, r1
 8002ff6:	4159      	adcs	r1, r3
 8002ff8:	6029      	str	r1, [r5, #0]
 8002ffa:	e7ed      	b.n	8002fd8 <__swhatbuf_r+0x1c>
 8002ffc:	2340      	movs	r3, #64	; 0x40
 8002ffe:	2000      	movs	r0, #0
 8003000:	6023      	str	r3, [r4, #0]
 8003002:	b016      	add	sp, #88	; 0x58
 8003004:	bd70      	pop	{r4, r5, r6, pc}
 8003006:	46c0      	nop			; (mov r8, r8)
 8003008:	ffffe000 	.word	0xffffe000

0800300c <__smakebuf_r>:
 800300c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800300e:	2602      	movs	r6, #2
 8003010:	898b      	ldrh	r3, [r1, #12]
 8003012:	0005      	movs	r5, r0
 8003014:	000c      	movs	r4, r1
 8003016:	4233      	tst	r3, r6
 8003018:	d006      	beq.n	8003028 <__smakebuf_r+0x1c>
 800301a:	0023      	movs	r3, r4
 800301c:	3347      	adds	r3, #71	; 0x47
 800301e:	6023      	str	r3, [r4, #0]
 8003020:	6123      	str	r3, [r4, #16]
 8003022:	2301      	movs	r3, #1
 8003024:	6163      	str	r3, [r4, #20]
 8003026:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003028:	466a      	mov	r2, sp
 800302a:	ab01      	add	r3, sp, #4
 800302c:	f7ff ffc6 	bl	8002fbc <__swhatbuf_r>
 8003030:	9900      	ldr	r1, [sp, #0]
 8003032:	0007      	movs	r7, r0
 8003034:	0028      	movs	r0, r5
 8003036:	f7ff f9c5 	bl	80023c4 <_malloc_r>
 800303a:	2800      	cmp	r0, #0
 800303c:	d108      	bne.n	8003050 <__smakebuf_r+0x44>
 800303e:	220c      	movs	r2, #12
 8003040:	5ea3      	ldrsh	r3, [r4, r2]
 8003042:	059a      	lsls	r2, r3, #22
 8003044:	d4ef      	bmi.n	8003026 <__smakebuf_r+0x1a>
 8003046:	2203      	movs	r2, #3
 8003048:	4393      	bics	r3, r2
 800304a:	431e      	orrs	r6, r3
 800304c:	81a6      	strh	r6, [r4, #12]
 800304e:	e7e4      	b.n	800301a <__smakebuf_r+0xe>
 8003050:	4b0f      	ldr	r3, [pc, #60]	; (8003090 <__smakebuf_r+0x84>)
 8003052:	62ab      	str	r3, [r5, #40]	; 0x28
 8003054:	2380      	movs	r3, #128	; 0x80
 8003056:	89a2      	ldrh	r2, [r4, #12]
 8003058:	6020      	str	r0, [r4, #0]
 800305a:	4313      	orrs	r3, r2
 800305c:	81a3      	strh	r3, [r4, #12]
 800305e:	9b00      	ldr	r3, [sp, #0]
 8003060:	6120      	str	r0, [r4, #16]
 8003062:	6163      	str	r3, [r4, #20]
 8003064:	9b01      	ldr	r3, [sp, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00d      	beq.n	8003086 <__smakebuf_r+0x7a>
 800306a:	0028      	movs	r0, r5
 800306c:	230e      	movs	r3, #14
 800306e:	5ee1      	ldrsh	r1, [r4, r3]
 8003070:	f000 f8fa 	bl	8003268 <_isatty_r>
 8003074:	2800      	cmp	r0, #0
 8003076:	d006      	beq.n	8003086 <__smakebuf_r+0x7a>
 8003078:	2203      	movs	r2, #3
 800307a:	89a3      	ldrh	r3, [r4, #12]
 800307c:	4393      	bics	r3, r2
 800307e:	001a      	movs	r2, r3
 8003080:	2301      	movs	r3, #1
 8003082:	4313      	orrs	r3, r2
 8003084:	81a3      	strh	r3, [r4, #12]
 8003086:	89a0      	ldrh	r0, [r4, #12]
 8003088:	4307      	orrs	r7, r0
 800308a:	81a7      	strh	r7, [r4, #12]
 800308c:	e7cb      	b.n	8003026 <__smakebuf_r+0x1a>
 800308e:	46c0      	nop			; (mov r8, r8)
 8003090:	08002df9 	.word	0x08002df9

08003094 <memchr>:
 8003094:	b2c9      	uxtb	r1, r1
 8003096:	1882      	adds	r2, r0, r2
 8003098:	4290      	cmp	r0, r2
 800309a:	d101      	bne.n	80030a0 <memchr+0xc>
 800309c:	2000      	movs	r0, #0
 800309e:	4770      	bx	lr
 80030a0:	7803      	ldrb	r3, [r0, #0]
 80030a2:	428b      	cmp	r3, r1
 80030a4:	d0fb      	beq.n	800309e <memchr+0xa>
 80030a6:	3001      	adds	r0, #1
 80030a8:	e7f6      	b.n	8003098 <memchr+0x4>
	...

080030ac <__malloc_lock>:
 80030ac:	b510      	push	{r4, lr}
 80030ae:	4802      	ldr	r0, [pc, #8]	; (80030b8 <__malloc_lock+0xc>)
 80030b0:	f7ff ff81 	bl	8002fb6 <__retarget_lock_acquire_recursive>
 80030b4:	bd10      	pop	{r4, pc}
 80030b6:	46c0      	nop			; (mov r8, r8)
 80030b8:	20000a8c 	.word	0x20000a8c

080030bc <__malloc_unlock>:
 80030bc:	b510      	push	{r4, lr}
 80030be:	4802      	ldr	r0, [pc, #8]	; (80030c8 <__malloc_unlock+0xc>)
 80030c0:	f7ff ff7a 	bl	8002fb8 <__retarget_lock_release_recursive>
 80030c4:	bd10      	pop	{r4, pc}
 80030c6:	46c0      	nop			; (mov r8, r8)
 80030c8:	20000a8c 	.word	0x20000a8c

080030cc <_raise_r>:
 80030cc:	b570      	push	{r4, r5, r6, lr}
 80030ce:	0004      	movs	r4, r0
 80030d0:	000d      	movs	r5, r1
 80030d2:	291f      	cmp	r1, #31
 80030d4:	d904      	bls.n	80030e0 <_raise_r+0x14>
 80030d6:	2316      	movs	r3, #22
 80030d8:	6003      	str	r3, [r0, #0]
 80030da:	2001      	movs	r0, #1
 80030dc:	4240      	negs	r0, r0
 80030de:	bd70      	pop	{r4, r5, r6, pc}
 80030e0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d004      	beq.n	80030f0 <_raise_r+0x24>
 80030e6:	008a      	lsls	r2, r1, #2
 80030e8:	189b      	adds	r3, r3, r2
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	2a00      	cmp	r2, #0
 80030ee:	d108      	bne.n	8003102 <_raise_r+0x36>
 80030f0:	0020      	movs	r0, r4
 80030f2:	f000 f831 	bl	8003158 <_getpid_r>
 80030f6:	002a      	movs	r2, r5
 80030f8:	0001      	movs	r1, r0
 80030fa:	0020      	movs	r0, r4
 80030fc:	f000 f81a 	bl	8003134 <_kill_r>
 8003100:	e7ed      	b.n	80030de <_raise_r+0x12>
 8003102:	2000      	movs	r0, #0
 8003104:	2a01      	cmp	r2, #1
 8003106:	d0ea      	beq.n	80030de <_raise_r+0x12>
 8003108:	1c51      	adds	r1, r2, #1
 800310a:	d103      	bne.n	8003114 <_raise_r+0x48>
 800310c:	2316      	movs	r3, #22
 800310e:	3001      	adds	r0, #1
 8003110:	6023      	str	r3, [r4, #0]
 8003112:	e7e4      	b.n	80030de <_raise_r+0x12>
 8003114:	2400      	movs	r4, #0
 8003116:	0028      	movs	r0, r5
 8003118:	601c      	str	r4, [r3, #0]
 800311a:	4790      	blx	r2
 800311c:	0020      	movs	r0, r4
 800311e:	e7de      	b.n	80030de <_raise_r+0x12>

08003120 <raise>:
 8003120:	b510      	push	{r4, lr}
 8003122:	4b03      	ldr	r3, [pc, #12]	; (8003130 <raise+0x10>)
 8003124:	0001      	movs	r1, r0
 8003126:	6818      	ldr	r0, [r3, #0]
 8003128:	f7ff ffd0 	bl	80030cc <_raise_r>
 800312c:	bd10      	pop	{r4, pc}
 800312e:	46c0      	nop			; (mov r8, r8)
 8003130:	20000020 	.word	0x20000020

08003134 <_kill_r>:
 8003134:	2300      	movs	r3, #0
 8003136:	b570      	push	{r4, r5, r6, lr}
 8003138:	4d06      	ldr	r5, [pc, #24]	; (8003154 <_kill_r+0x20>)
 800313a:	0004      	movs	r4, r0
 800313c:	0008      	movs	r0, r1
 800313e:	0011      	movs	r1, r2
 8003140:	602b      	str	r3, [r5, #0]
 8003142:	f7fd fb5f 	bl	8000804 <_kill>
 8003146:	1c43      	adds	r3, r0, #1
 8003148:	d103      	bne.n	8003152 <_kill_r+0x1e>
 800314a:	682b      	ldr	r3, [r5, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d000      	beq.n	8003152 <_kill_r+0x1e>
 8003150:	6023      	str	r3, [r4, #0]
 8003152:	bd70      	pop	{r4, r5, r6, pc}
 8003154:	20000a94 	.word	0x20000a94

08003158 <_getpid_r>:
 8003158:	b510      	push	{r4, lr}
 800315a:	f7fd fb51 	bl	8000800 <_getpid>
 800315e:	bd10      	pop	{r4, pc}

08003160 <__sread>:
 8003160:	b570      	push	{r4, r5, r6, lr}
 8003162:	000c      	movs	r4, r1
 8003164:	250e      	movs	r5, #14
 8003166:	5f49      	ldrsh	r1, [r1, r5]
 8003168:	f000 f8a4 	bl	80032b4 <_read_r>
 800316c:	2800      	cmp	r0, #0
 800316e:	db03      	blt.n	8003178 <__sread+0x18>
 8003170:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003172:	181b      	adds	r3, r3, r0
 8003174:	6563      	str	r3, [r4, #84]	; 0x54
 8003176:	bd70      	pop	{r4, r5, r6, pc}
 8003178:	89a3      	ldrh	r3, [r4, #12]
 800317a:	4a02      	ldr	r2, [pc, #8]	; (8003184 <__sread+0x24>)
 800317c:	4013      	ands	r3, r2
 800317e:	81a3      	strh	r3, [r4, #12]
 8003180:	e7f9      	b.n	8003176 <__sread+0x16>
 8003182:	46c0      	nop			; (mov r8, r8)
 8003184:	ffffefff 	.word	0xffffefff

08003188 <__swrite>:
 8003188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800318a:	001f      	movs	r7, r3
 800318c:	898b      	ldrh	r3, [r1, #12]
 800318e:	0005      	movs	r5, r0
 8003190:	000c      	movs	r4, r1
 8003192:	0016      	movs	r6, r2
 8003194:	05db      	lsls	r3, r3, #23
 8003196:	d505      	bpl.n	80031a4 <__swrite+0x1c>
 8003198:	230e      	movs	r3, #14
 800319a:	5ec9      	ldrsh	r1, [r1, r3]
 800319c:	2200      	movs	r2, #0
 800319e:	2302      	movs	r3, #2
 80031a0:	f000 f874 	bl	800328c <_lseek_r>
 80031a4:	89a3      	ldrh	r3, [r4, #12]
 80031a6:	4a05      	ldr	r2, [pc, #20]	; (80031bc <__swrite+0x34>)
 80031a8:	0028      	movs	r0, r5
 80031aa:	4013      	ands	r3, r2
 80031ac:	81a3      	strh	r3, [r4, #12]
 80031ae:	0032      	movs	r2, r6
 80031b0:	230e      	movs	r3, #14
 80031b2:	5ee1      	ldrsh	r1, [r4, r3]
 80031b4:	003b      	movs	r3, r7
 80031b6:	f000 f81f 	bl	80031f8 <_write_r>
 80031ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031bc:	ffffefff 	.word	0xffffefff

080031c0 <__sseek>:
 80031c0:	b570      	push	{r4, r5, r6, lr}
 80031c2:	000c      	movs	r4, r1
 80031c4:	250e      	movs	r5, #14
 80031c6:	5f49      	ldrsh	r1, [r1, r5]
 80031c8:	f000 f860 	bl	800328c <_lseek_r>
 80031cc:	89a3      	ldrh	r3, [r4, #12]
 80031ce:	1c42      	adds	r2, r0, #1
 80031d0:	d103      	bne.n	80031da <__sseek+0x1a>
 80031d2:	4a05      	ldr	r2, [pc, #20]	; (80031e8 <__sseek+0x28>)
 80031d4:	4013      	ands	r3, r2
 80031d6:	81a3      	strh	r3, [r4, #12]
 80031d8:	bd70      	pop	{r4, r5, r6, pc}
 80031da:	2280      	movs	r2, #128	; 0x80
 80031dc:	0152      	lsls	r2, r2, #5
 80031de:	4313      	orrs	r3, r2
 80031e0:	81a3      	strh	r3, [r4, #12]
 80031e2:	6560      	str	r0, [r4, #84]	; 0x54
 80031e4:	e7f8      	b.n	80031d8 <__sseek+0x18>
 80031e6:	46c0      	nop			; (mov r8, r8)
 80031e8:	ffffefff 	.word	0xffffefff

080031ec <__sclose>:
 80031ec:	b510      	push	{r4, lr}
 80031ee:	230e      	movs	r3, #14
 80031f0:	5ec9      	ldrsh	r1, [r1, r3]
 80031f2:	f000 f815 	bl	8003220 <_close_r>
 80031f6:	bd10      	pop	{r4, pc}

080031f8 <_write_r>:
 80031f8:	b570      	push	{r4, r5, r6, lr}
 80031fa:	0004      	movs	r4, r0
 80031fc:	0008      	movs	r0, r1
 80031fe:	0011      	movs	r1, r2
 8003200:	001a      	movs	r2, r3
 8003202:	2300      	movs	r3, #0
 8003204:	4d05      	ldr	r5, [pc, #20]	; (800321c <_write_r+0x24>)
 8003206:	602b      	str	r3, [r5, #0]
 8003208:	f7fd fb18 	bl	800083c <_write>
 800320c:	1c43      	adds	r3, r0, #1
 800320e:	d103      	bne.n	8003218 <_write_r+0x20>
 8003210:	682b      	ldr	r3, [r5, #0]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d000      	beq.n	8003218 <_write_r+0x20>
 8003216:	6023      	str	r3, [r4, #0]
 8003218:	bd70      	pop	{r4, r5, r6, pc}
 800321a:	46c0      	nop			; (mov r8, r8)
 800321c:	20000a94 	.word	0x20000a94

08003220 <_close_r>:
 8003220:	2300      	movs	r3, #0
 8003222:	b570      	push	{r4, r5, r6, lr}
 8003224:	4d06      	ldr	r5, [pc, #24]	; (8003240 <_close_r+0x20>)
 8003226:	0004      	movs	r4, r0
 8003228:	0008      	movs	r0, r1
 800322a:	602b      	str	r3, [r5, #0]
 800322c:	f7fd fb14 	bl	8000858 <_close>
 8003230:	1c43      	adds	r3, r0, #1
 8003232:	d103      	bne.n	800323c <_close_r+0x1c>
 8003234:	682b      	ldr	r3, [r5, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d000      	beq.n	800323c <_close_r+0x1c>
 800323a:	6023      	str	r3, [r4, #0]
 800323c:	bd70      	pop	{r4, r5, r6, pc}
 800323e:	46c0      	nop			; (mov r8, r8)
 8003240:	20000a94 	.word	0x20000a94

08003244 <_fstat_r>:
 8003244:	2300      	movs	r3, #0
 8003246:	b570      	push	{r4, r5, r6, lr}
 8003248:	4d06      	ldr	r5, [pc, #24]	; (8003264 <_fstat_r+0x20>)
 800324a:	0004      	movs	r4, r0
 800324c:	0008      	movs	r0, r1
 800324e:	0011      	movs	r1, r2
 8003250:	602b      	str	r3, [r5, #0]
 8003252:	f7fd fb05 	bl	8000860 <_fstat>
 8003256:	1c43      	adds	r3, r0, #1
 8003258:	d103      	bne.n	8003262 <_fstat_r+0x1e>
 800325a:	682b      	ldr	r3, [r5, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d000      	beq.n	8003262 <_fstat_r+0x1e>
 8003260:	6023      	str	r3, [r4, #0]
 8003262:	bd70      	pop	{r4, r5, r6, pc}
 8003264:	20000a94 	.word	0x20000a94

08003268 <_isatty_r>:
 8003268:	2300      	movs	r3, #0
 800326a:	b570      	push	{r4, r5, r6, lr}
 800326c:	4d06      	ldr	r5, [pc, #24]	; (8003288 <_isatty_r+0x20>)
 800326e:	0004      	movs	r4, r0
 8003270:	0008      	movs	r0, r1
 8003272:	602b      	str	r3, [r5, #0]
 8003274:	f7fd fafa 	bl	800086c <_isatty>
 8003278:	1c43      	adds	r3, r0, #1
 800327a:	d103      	bne.n	8003284 <_isatty_r+0x1c>
 800327c:	682b      	ldr	r3, [r5, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d000      	beq.n	8003284 <_isatty_r+0x1c>
 8003282:	6023      	str	r3, [r4, #0]
 8003284:	bd70      	pop	{r4, r5, r6, pc}
 8003286:	46c0      	nop			; (mov r8, r8)
 8003288:	20000a94 	.word	0x20000a94

0800328c <_lseek_r>:
 800328c:	b570      	push	{r4, r5, r6, lr}
 800328e:	0004      	movs	r4, r0
 8003290:	0008      	movs	r0, r1
 8003292:	0011      	movs	r1, r2
 8003294:	001a      	movs	r2, r3
 8003296:	2300      	movs	r3, #0
 8003298:	4d05      	ldr	r5, [pc, #20]	; (80032b0 <_lseek_r+0x24>)
 800329a:	602b      	str	r3, [r5, #0]
 800329c:	f7fd fae8 	bl	8000870 <_lseek>
 80032a0:	1c43      	adds	r3, r0, #1
 80032a2:	d103      	bne.n	80032ac <_lseek_r+0x20>
 80032a4:	682b      	ldr	r3, [r5, #0]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d000      	beq.n	80032ac <_lseek_r+0x20>
 80032aa:	6023      	str	r3, [r4, #0]
 80032ac:	bd70      	pop	{r4, r5, r6, pc}
 80032ae:	46c0      	nop			; (mov r8, r8)
 80032b0:	20000a94 	.word	0x20000a94

080032b4 <_read_r>:
 80032b4:	b570      	push	{r4, r5, r6, lr}
 80032b6:	0004      	movs	r4, r0
 80032b8:	0008      	movs	r0, r1
 80032ba:	0011      	movs	r1, r2
 80032bc:	001a      	movs	r2, r3
 80032be:	2300      	movs	r3, #0
 80032c0:	4d05      	ldr	r5, [pc, #20]	; (80032d8 <_read_r+0x24>)
 80032c2:	602b      	str	r3, [r5, #0]
 80032c4:	f7fd faac 	bl	8000820 <_read>
 80032c8:	1c43      	adds	r3, r0, #1
 80032ca:	d103      	bne.n	80032d4 <_read_r+0x20>
 80032cc:	682b      	ldr	r3, [r5, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d000      	beq.n	80032d4 <_read_r+0x20>
 80032d2:	6023      	str	r3, [r4, #0]
 80032d4:	bd70      	pop	{r4, r5, r6, pc}
 80032d6:	46c0      	nop			; (mov r8, r8)
 80032d8:	20000a94 	.word	0x20000a94

080032dc <_init>:
 80032dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032de:	46c0      	nop			; (mov r8, r8)
 80032e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032e2:	bc08      	pop	{r3}
 80032e4:	469e      	mov	lr, r3
 80032e6:	4770      	bx	lr

080032e8 <_fini>:
 80032e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ea:	46c0      	nop			; (mov r8, r8)
 80032ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ee:	bc08      	pop	{r3}
 80032f0:	469e      	mov	lr, r3
 80032f2:	4770      	bx	lr
